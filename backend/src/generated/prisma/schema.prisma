generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  username                String    @unique
  bio                     String?
  linkedin                String?
  portfolio               String?
  email                   String    @unique
  image                   String?   @default("https://placehold.co/600x400")
  role                    UserRole  @default(USER)
  password                String
  forgotPasswordOtp       String?
  forgotPasswordOtpExpiry DateTime?

  currentStreak  Int       @default(0)
  longestStreak  Int       @default(0)
  lastSolvedDate DateTime?

  followers      User[] @relation("UserFollows")
  following      User[] @relation("UserFollows")
  followerCount  Int    @default(0)
  followingCount Int    @default(0)

  badges Json @default("[]")

  problems      Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
  playlists     Playlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  likes    Int @default(0)
  dislikes Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission        Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
}

model ProblemReaction {
  id        String  @id @default(uuid())
  problemId String
  userId    String
  isLike    Boolean

  @@unique([problemId, userId])
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    String
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String   @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

model Badge {
  id          String   @id @default(uuid())
  name        String   @unique
  icon        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
