
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Follow
 * 
 */
export type Follow = $Result.DefaultSelection<Prisma.$FollowPayload>
/**
 * Model Problem
 * 
 */
export type Problem = $Result.DefaultSelection<Prisma.$ProblemPayload>
/**
 * Model ProblemReaction
 * 
 */
export type ProblemReaction = $Result.DefaultSelection<Prisma.$ProblemReactionPayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model TestCaseResult
 * 
 */
export type TestCaseResult = $Result.DefaultSelection<Prisma.$TestCaseResultPayload>
/**
 * Model ProblemSolved
 * 
 */
export type ProblemSolved = $Result.DefaultSelection<Prisma.$ProblemSolvedPayload>
/**
 * Model Playlist
 * 
 */
export type Playlist = $Result.DefaultSelection<Prisma.$PlaylistPayload>
/**
 * Model PlaylistPurchase
 * 
 */
export type PlaylistPurchase = $Result.DefaultSelection<Prisma.$PlaylistPurchasePayload>
/**
 * Model ProblemInPlaylist
 * 
 */
export type ProblemInPlaylist = $Result.DefaultSelection<Prisma.$ProblemInPlaylistPayload>
/**
 * Model Badge
 * 
 */
export type Badge = $Result.DefaultSelection<Prisma.$BadgePayload>
/**
 * Model ProblemReport
 * 
 */
export type ProblemReport = $Result.DefaultSelection<Prisma.$ProblemReportPayload>
/**
 * Model ProblemDiscussion
 * 
 */
export type ProblemDiscussion = $Result.DefaultSelection<Prisma.$ProblemDiscussionPayload>
/**
 * Model DiscussionMessage
 * 
 */
export type DiscussionMessage = $Result.DefaultSelection<Prisma.$DiscussionMessagePayload>
/**
 * Model DiscussionReply
 * 
 */
export type DiscussionReply = $Result.DefaultSelection<Prisma.$DiscussionReplyPayload>
/**
 * Model DiscussionUpvote
 * 
 */
export type DiscussionUpvote = $Result.DefaultSelection<Prisma.$DiscussionUpvotePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model ProblemInvitation
 * 
 */
export type ProblemInvitation = $Result.DefaultSelection<Prisma.$ProblemInvitationPayload>
/**
 * Model ProblemCollaboration
 * 
 */
export type ProblemCollaboration = $Result.DefaultSelection<Prisma.$ProblemCollaborationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  USER: 'USER',
  PRO: 'PRO'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const Difficulty: {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

export type Difficulty = (typeof Difficulty)[keyof typeof Difficulty]


export const ReportReason: {
  INCORRECT_TEST_CASES: 'INCORRECT_TEST_CASES',
  POOR_DESCRIPTION: 'POOR_DESCRIPTION',
  DUPLICATE: 'DUPLICATE',
  INAPPROPRIATE: 'INAPPROPRIATE',
  OTHER: 'OTHER'
};

export type ReportReason = (typeof ReportReason)[keyof typeof ReportReason]


export const NotificationType: {
  INVITATION: 'INVITATION',
  ACCEPTED_INVITATION: 'ACCEPTED_INVITATION',
  COLLABORATION_JOINED: 'COLLABORATION_JOINED',
  PROBLEM_SOLVED: 'PROBLEM_SOLVED',
  NEW_FOLLOWER: 'NEW_FOLLOWER',
  GENERAL: 'GENERAL'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const InvitationStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  CANCELLED: 'CANCELLED'
};

export type InvitationStatus = (typeof InvitationStatus)[keyof typeof InvitationStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type Difficulty = $Enums.Difficulty

export const Difficulty: typeof $Enums.Difficulty

export type ReportReason = $Enums.ReportReason

export const ReportReason: typeof $Enums.ReportReason

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type InvitationStatus = $Enums.InvitationStatus

export const InvitationStatus: typeof $Enums.InvitationStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problem`: Exposes CRUD operations for the **Problem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Problems
    * const problems = await prisma.problem.findMany()
    * ```
    */
  get problem(): Prisma.ProblemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problemReaction`: Exposes CRUD operations for the **ProblemReaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemReactions
    * const problemReactions = await prisma.problemReaction.findMany()
    * ```
    */
  get problemReaction(): Prisma.ProblemReactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testCaseResult`: Exposes CRUD operations for the **TestCaseResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestCaseResults
    * const testCaseResults = await prisma.testCaseResult.findMany()
    * ```
    */
  get testCaseResult(): Prisma.TestCaseResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problemSolved`: Exposes CRUD operations for the **ProblemSolved** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemSolveds
    * const problemSolveds = await prisma.problemSolved.findMany()
    * ```
    */
  get problemSolved(): Prisma.ProblemSolvedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playlist`: Exposes CRUD operations for the **Playlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Playlists
    * const playlists = await prisma.playlist.findMany()
    * ```
    */
  get playlist(): Prisma.PlaylistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.playlistPurchase`: Exposes CRUD operations for the **PlaylistPurchase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlaylistPurchases
    * const playlistPurchases = await prisma.playlistPurchase.findMany()
    * ```
    */
  get playlistPurchase(): Prisma.PlaylistPurchaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problemInPlaylist`: Exposes CRUD operations for the **ProblemInPlaylist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemInPlaylists
    * const problemInPlaylists = await prisma.problemInPlaylist.findMany()
    * ```
    */
  get problemInPlaylist(): Prisma.ProblemInPlaylistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.badge`: Exposes CRUD operations for the **Badge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Badges
    * const badges = await prisma.badge.findMany()
    * ```
    */
  get badge(): Prisma.BadgeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problemReport`: Exposes CRUD operations for the **ProblemReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemReports
    * const problemReports = await prisma.problemReport.findMany()
    * ```
    */
  get problemReport(): Prisma.ProblemReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problemDiscussion`: Exposes CRUD operations for the **ProblemDiscussion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemDiscussions
    * const problemDiscussions = await prisma.problemDiscussion.findMany()
    * ```
    */
  get problemDiscussion(): Prisma.ProblemDiscussionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discussionMessage`: Exposes CRUD operations for the **DiscussionMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiscussionMessages
    * const discussionMessages = await prisma.discussionMessage.findMany()
    * ```
    */
  get discussionMessage(): Prisma.DiscussionMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discussionReply`: Exposes CRUD operations for the **DiscussionReply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiscussionReplies
    * const discussionReplies = await prisma.discussionReply.findMany()
    * ```
    */
  get discussionReply(): Prisma.DiscussionReplyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discussionUpvote`: Exposes CRUD operations for the **DiscussionUpvote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiscussionUpvotes
    * const discussionUpvotes = await prisma.discussionUpvote.findMany()
    * ```
    */
  get discussionUpvote(): Prisma.DiscussionUpvoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problemInvitation`: Exposes CRUD operations for the **ProblemInvitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemInvitations
    * const problemInvitations = await prisma.problemInvitation.findMany()
    * ```
    */
  get problemInvitation(): Prisma.ProblemInvitationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problemCollaboration`: Exposes CRUD operations for the **ProblemCollaboration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProblemCollaborations
    * const problemCollaborations = await prisma.problemCollaboration.findMany()
    * ```
    */
  get problemCollaboration(): Prisma.ProblemCollaborationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Follow: 'Follow',
    Problem: 'Problem',
    ProblemReaction: 'ProblemReaction',
    Submission: 'Submission',
    TestCaseResult: 'TestCaseResult',
    ProblemSolved: 'ProblemSolved',
    Playlist: 'Playlist',
    PlaylistPurchase: 'PlaylistPurchase',
    ProblemInPlaylist: 'ProblemInPlaylist',
    Badge: 'Badge',
    ProblemReport: 'ProblemReport',
    ProblemDiscussion: 'ProblemDiscussion',
    DiscussionMessage: 'DiscussionMessage',
    DiscussionReply: 'DiscussionReply',
    DiscussionUpvote: 'DiscussionUpvote',
    Notification: 'Notification',
    ProblemInvitation: 'ProblemInvitation',
    ProblemCollaboration: 'ProblemCollaboration'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "follow" | "problem" | "problemReaction" | "submission" | "testCaseResult" | "problemSolved" | "playlist" | "playlistPurchase" | "problemInPlaylist" | "badge" | "problemReport" | "problemDiscussion" | "discussionMessage" | "discussionReply" | "discussionUpvote" | "notification" | "problemInvitation" | "problemCollaboration"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Follow: {
        payload: Prisma.$FollowPayload<ExtArgs>
        fields: Prisma.FollowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findFirst: {
            args: Prisma.FollowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          findMany: {
            args: Prisma.FollowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          create: {
            args: Prisma.FollowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          createMany: {
            args: Prisma.FollowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FollowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          delete: {
            args: Prisma.FollowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          update: {
            args: Prisma.FollowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          deleteMany: {
            args: Prisma.FollowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FollowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>[]
          }
          upsert: {
            args: Prisma.FollowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowPayload>
          }
          aggregate: {
            args: Prisma.FollowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollow>
          }
          groupBy: {
            args: Prisma.FollowGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowCountArgs<ExtArgs>
            result: $Utils.Optional<FollowCountAggregateOutputType> | number
          }
        }
      }
      Problem: {
        payload: Prisma.$ProblemPayload<ExtArgs>
        fields: Prisma.ProblemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          findFirst: {
            args: Prisma.ProblemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          findMany: {
            args: Prisma.ProblemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>[]
          }
          create: {
            args: Prisma.ProblemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          createMany: {
            args: Prisma.ProblemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>[]
          }
          delete: {
            args: Prisma.ProblemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          update: {
            args: Prisma.ProblemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          deleteMany: {
            args: Prisma.ProblemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>[]
          }
          upsert: {
            args: Prisma.ProblemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          aggregate: {
            args: Prisma.ProblemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblem>
          }
          groupBy: {
            args: Prisma.ProblemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemCountAggregateOutputType> | number
          }
        }
      }
      ProblemReaction: {
        payload: Prisma.$ProblemReactionPayload<ExtArgs>
        fields: Prisma.ProblemReactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemReactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemReactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload>
          }
          findFirst: {
            args: Prisma.ProblemReactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemReactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload>
          }
          findMany: {
            args: Prisma.ProblemReactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload>[]
          }
          create: {
            args: Prisma.ProblemReactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload>
          }
          createMany: {
            args: Prisma.ProblemReactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemReactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload>[]
          }
          delete: {
            args: Prisma.ProblemReactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload>
          }
          update: {
            args: Prisma.ProblemReactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload>
          }
          deleteMany: {
            args: Prisma.ProblemReactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemReactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemReactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload>[]
          }
          upsert: {
            args: Prisma.ProblemReactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReactionPayload>
          }
          aggregate: {
            args: Prisma.ProblemReactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblemReaction>
          }
          groupBy: {
            args: Prisma.ProblemReactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemReactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemReactionCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemReactionCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      TestCaseResult: {
        payload: Prisma.$TestCaseResultPayload<ExtArgs>
        fields: Prisma.TestCaseResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestCaseResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestCaseResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
          }
          findFirst: {
            args: Prisma.TestCaseResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestCaseResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
          }
          findMany: {
            args: Prisma.TestCaseResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload>[]
          }
          create: {
            args: Prisma.TestCaseResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
          }
          createMany: {
            args: Prisma.TestCaseResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestCaseResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload>[]
          }
          delete: {
            args: Prisma.TestCaseResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
          }
          update: {
            args: Prisma.TestCaseResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
          }
          deleteMany: {
            args: Prisma.TestCaseResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestCaseResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TestCaseResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload>[]
          }
          upsert: {
            args: Prisma.TestCaseResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestCaseResultPayload>
          }
          aggregate: {
            args: Prisma.TestCaseResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestCaseResult>
          }
          groupBy: {
            args: Prisma.TestCaseResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestCaseResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestCaseResultCountArgs<ExtArgs>
            result: $Utils.Optional<TestCaseResultCountAggregateOutputType> | number
          }
        }
      }
      ProblemSolved: {
        payload: Prisma.$ProblemSolvedPayload<ExtArgs>
        fields: Prisma.ProblemSolvedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemSolvedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemSolvedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
          }
          findFirst: {
            args: Prisma.ProblemSolvedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemSolvedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
          }
          findMany: {
            args: Prisma.ProblemSolvedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>[]
          }
          create: {
            args: Prisma.ProblemSolvedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
          }
          createMany: {
            args: Prisma.ProblemSolvedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemSolvedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>[]
          }
          delete: {
            args: Prisma.ProblemSolvedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
          }
          update: {
            args: Prisma.ProblemSolvedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
          }
          deleteMany: {
            args: Prisma.ProblemSolvedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemSolvedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemSolvedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>[]
          }
          upsert: {
            args: Prisma.ProblemSolvedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemSolvedPayload>
          }
          aggregate: {
            args: Prisma.ProblemSolvedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblemSolved>
          }
          groupBy: {
            args: Prisma.ProblemSolvedGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemSolvedGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemSolvedCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemSolvedCountAggregateOutputType> | number
          }
        }
      }
      Playlist: {
        payload: Prisma.$PlaylistPayload<ExtArgs>
        fields: Prisma.PlaylistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaylistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaylistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          findFirst: {
            args: Prisma.PlaylistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaylistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          findMany: {
            args: Prisma.PlaylistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>[]
          }
          create: {
            args: Prisma.PlaylistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          createMany: {
            args: Prisma.PlaylistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlaylistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>[]
          }
          delete: {
            args: Prisma.PlaylistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          update: {
            args: Prisma.PlaylistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          deleteMany: {
            args: Prisma.PlaylistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlaylistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlaylistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>[]
          }
          upsert: {
            args: Prisma.PlaylistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          aggregate: {
            args: Prisma.PlaylistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlaylist>
          }
          groupBy: {
            args: Prisma.PlaylistGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlaylistGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaylistCountArgs<ExtArgs>
            result: $Utils.Optional<PlaylistCountAggregateOutputType> | number
          }
        }
      }
      PlaylistPurchase: {
        payload: Prisma.$PlaylistPurchasePayload<ExtArgs>
        fields: Prisma.PlaylistPurchaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaylistPurchaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaylistPurchaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload>
          }
          findFirst: {
            args: Prisma.PlaylistPurchaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaylistPurchaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload>
          }
          findMany: {
            args: Prisma.PlaylistPurchaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload>[]
          }
          create: {
            args: Prisma.PlaylistPurchaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload>
          }
          createMany: {
            args: Prisma.PlaylistPurchaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlaylistPurchaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload>[]
          }
          delete: {
            args: Prisma.PlaylistPurchaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload>
          }
          update: {
            args: Prisma.PlaylistPurchaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload>
          }
          deleteMany: {
            args: Prisma.PlaylistPurchaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlaylistPurchaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlaylistPurchaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload>[]
          }
          upsert: {
            args: Prisma.PlaylistPurchaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlaylistPurchasePayload>
          }
          aggregate: {
            args: Prisma.PlaylistPurchaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlaylistPurchase>
          }
          groupBy: {
            args: Prisma.PlaylistPurchaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlaylistPurchaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaylistPurchaseCountArgs<ExtArgs>
            result: $Utils.Optional<PlaylistPurchaseCountAggregateOutputType> | number
          }
        }
      }
      ProblemInPlaylist: {
        payload: Prisma.$ProblemInPlaylistPayload<ExtArgs>
        fields: Prisma.ProblemInPlaylistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemInPlaylistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemInPlaylistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
          }
          findFirst: {
            args: Prisma.ProblemInPlaylistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemInPlaylistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
          }
          findMany: {
            args: Prisma.ProblemInPlaylistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>[]
          }
          create: {
            args: Prisma.ProblemInPlaylistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
          }
          createMany: {
            args: Prisma.ProblemInPlaylistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemInPlaylistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>[]
          }
          delete: {
            args: Prisma.ProblemInPlaylistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
          }
          update: {
            args: Prisma.ProblemInPlaylistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
          }
          deleteMany: {
            args: Prisma.ProblemInPlaylistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemInPlaylistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemInPlaylistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>[]
          }
          upsert: {
            args: Prisma.ProblemInPlaylistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInPlaylistPayload>
          }
          aggregate: {
            args: Prisma.ProblemInPlaylistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblemInPlaylist>
          }
          groupBy: {
            args: Prisma.ProblemInPlaylistGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemInPlaylistGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemInPlaylistCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemInPlaylistCountAggregateOutputType> | number
          }
        }
      }
      Badge: {
        payload: Prisma.$BadgePayload<ExtArgs>
        fields: Prisma.BadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findFirst: {
            args: Prisma.BadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findMany: {
            args: Prisma.BadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          create: {
            args: Prisma.BadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          createMany: {
            args: Prisma.BadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          delete: {
            args: Prisma.BadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          update: {
            args: Prisma.BadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          deleteMany: {
            args: Prisma.BadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BadgeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          upsert: {
            args: Prisma.BadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          aggregate: {
            args: Prisma.BadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBadge>
          }
          groupBy: {
            args: Prisma.BadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BadgeCountArgs<ExtArgs>
            result: $Utils.Optional<BadgeCountAggregateOutputType> | number
          }
        }
      }
      ProblemReport: {
        payload: Prisma.$ProblemReportPayload<ExtArgs>
        fields: Prisma.ProblemReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload>
          }
          findFirst: {
            args: Prisma.ProblemReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload>
          }
          findMany: {
            args: Prisma.ProblemReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload>[]
          }
          create: {
            args: Prisma.ProblemReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload>
          }
          createMany: {
            args: Prisma.ProblemReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload>[]
          }
          delete: {
            args: Prisma.ProblemReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload>
          }
          update: {
            args: Prisma.ProblemReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload>
          }
          deleteMany: {
            args: Prisma.ProblemReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload>[]
          }
          upsert: {
            args: Prisma.ProblemReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemReportPayload>
          }
          aggregate: {
            args: Prisma.ProblemReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblemReport>
          }
          groupBy: {
            args: Prisma.ProblemReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemReportCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemReportCountAggregateOutputType> | number
          }
        }
      }
      ProblemDiscussion: {
        payload: Prisma.$ProblemDiscussionPayload<ExtArgs>
        fields: Prisma.ProblemDiscussionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemDiscussionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemDiscussionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload>
          }
          findFirst: {
            args: Prisma.ProblemDiscussionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemDiscussionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload>
          }
          findMany: {
            args: Prisma.ProblemDiscussionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload>[]
          }
          create: {
            args: Prisma.ProblemDiscussionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload>
          }
          createMany: {
            args: Prisma.ProblemDiscussionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemDiscussionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload>[]
          }
          delete: {
            args: Prisma.ProblemDiscussionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload>
          }
          update: {
            args: Prisma.ProblemDiscussionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload>
          }
          deleteMany: {
            args: Prisma.ProblemDiscussionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemDiscussionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemDiscussionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload>[]
          }
          upsert: {
            args: Prisma.ProblemDiscussionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemDiscussionPayload>
          }
          aggregate: {
            args: Prisma.ProblemDiscussionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblemDiscussion>
          }
          groupBy: {
            args: Prisma.ProblemDiscussionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemDiscussionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemDiscussionCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemDiscussionCountAggregateOutputType> | number
          }
        }
      }
      DiscussionMessage: {
        payload: Prisma.$DiscussionMessagePayload<ExtArgs>
        fields: Prisma.DiscussionMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscussionMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscussionMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload>
          }
          findFirst: {
            args: Prisma.DiscussionMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscussionMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload>
          }
          findMany: {
            args: Prisma.DiscussionMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload>[]
          }
          create: {
            args: Prisma.DiscussionMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload>
          }
          createMany: {
            args: Prisma.DiscussionMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiscussionMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload>[]
          }
          delete: {
            args: Prisma.DiscussionMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload>
          }
          update: {
            args: Prisma.DiscussionMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload>
          }
          deleteMany: {
            args: Prisma.DiscussionMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscussionMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DiscussionMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload>[]
          }
          upsert: {
            args: Prisma.DiscussionMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionMessagePayload>
          }
          aggregate: {
            args: Prisma.DiscussionMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscussionMessage>
          }
          groupBy: {
            args: Prisma.DiscussionMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscussionMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscussionMessageCountArgs<ExtArgs>
            result: $Utils.Optional<DiscussionMessageCountAggregateOutputType> | number
          }
        }
      }
      DiscussionReply: {
        payload: Prisma.$DiscussionReplyPayload<ExtArgs>
        fields: Prisma.DiscussionReplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscussionReplyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscussionReplyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload>
          }
          findFirst: {
            args: Prisma.DiscussionReplyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscussionReplyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload>
          }
          findMany: {
            args: Prisma.DiscussionReplyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload>[]
          }
          create: {
            args: Prisma.DiscussionReplyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload>
          }
          createMany: {
            args: Prisma.DiscussionReplyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiscussionReplyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload>[]
          }
          delete: {
            args: Prisma.DiscussionReplyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload>
          }
          update: {
            args: Prisma.DiscussionReplyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload>
          }
          deleteMany: {
            args: Prisma.DiscussionReplyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscussionReplyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DiscussionReplyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload>[]
          }
          upsert: {
            args: Prisma.DiscussionReplyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionReplyPayload>
          }
          aggregate: {
            args: Prisma.DiscussionReplyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscussionReply>
          }
          groupBy: {
            args: Prisma.DiscussionReplyGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscussionReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscussionReplyCountArgs<ExtArgs>
            result: $Utils.Optional<DiscussionReplyCountAggregateOutputType> | number
          }
        }
      }
      DiscussionUpvote: {
        payload: Prisma.$DiscussionUpvotePayload<ExtArgs>
        fields: Prisma.DiscussionUpvoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscussionUpvoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscussionUpvoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload>
          }
          findFirst: {
            args: Prisma.DiscussionUpvoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscussionUpvoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload>
          }
          findMany: {
            args: Prisma.DiscussionUpvoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload>[]
          }
          create: {
            args: Prisma.DiscussionUpvoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload>
          }
          createMany: {
            args: Prisma.DiscussionUpvoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiscussionUpvoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload>[]
          }
          delete: {
            args: Prisma.DiscussionUpvoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload>
          }
          update: {
            args: Prisma.DiscussionUpvoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload>
          }
          deleteMany: {
            args: Prisma.DiscussionUpvoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscussionUpvoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DiscussionUpvoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload>[]
          }
          upsert: {
            args: Prisma.DiscussionUpvoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionUpvotePayload>
          }
          aggregate: {
            args: Prisma.DiscussionUpvoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscussionUpvote>
          }
          groupBy: {
            args: Prisma.DiscussionUpvoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscussionUpvoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscussionUpvoteCountArgs<ExtArgs>
            result: $Utils.Optional<DiscussionUpvoteCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      ProblemInvitation: {
        payload: Prisma.$ProblemInvitationPayload<ExtArgs>
        fields: Prisma.ProblemInvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemInvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemInvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload>
          }
          findFirst: {
            args: Prisma.ProblemInvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemInvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload>
          }
          findMany: {
            args: Prisma.ProblemInvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload>[]
          }
          create: {
            args: Prisma.ProblemInvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload>
          }
          createMany: {
            args: Prisma.ProblemInvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemInvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload>[]
          }
          delete: {
            args: Prisma.ProblemInvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload>
          }
          update: {
            args: Prisma.ProblemInvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload>
          }
          deleteMany: {
            args: Prisma.ProblemInvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemInvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemInvitationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload>[]
          }
          upsert: {
            args: Prisma.ProblemInvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemInvitationPayload>
          }
          aggregate: {
            args: Prisma.ProblemInvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblemInvitation>
          }
          groupBy: {
            args: Prisma.ProblemInvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemInvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemInvitationCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemInvitationCountAggregateOutputType> | number
          }
        }
      }
      ProblemCollaboration: {
        payload: Prisma.$ProblemCollaborationPayload<ExtArgs>
        fields: Prisma.ProblemCollaborationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemCollaborationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemCollaborationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload>
          }
          findFirst: {
            args: Prisma.ProblemCollaborationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemCollaborationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload>
          }
          findMany: {
            args: Prisma.ProblemCollaborationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload>[]
          }
          create: {
            args: Prisma.ProblemCollaborationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload>
          }
          createMany: {
            args: Prisma.ProblemCollaborationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemCollaborationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload>[]
          }
          delete: {
            args: Prisma.ProblemCollaborationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload>
          }
          update: {
            args: Prisma.ProblemCollaborationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload>
          }
          deleteMany: {
            args: Prisma.ProblemCollaborationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemCollaborationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemCollaborationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload>[]
          }
          upsert: {
            args: Prisma.ProblemCollaborationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemCollaborationPayload>
          }
          aggregate: {
            args: Prisma.ProblemCollaborationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblemCollaboration>
          }
          groupBy: {
            args: Prisma.ProblemCollaborationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemCollaborationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemCollaborationCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemCollaborationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    follow?: FollowOmit
    problem?: ProblemOmit
    problemReaction?: ProblemReactionOmit
    submission?: SubmissionOmit
    testCaseResult?: TestCaseResultOmit
    problemSolved?: ProblemSolvedOmit
    playlist?: PlaylistOmit
    playlistPurchase?: PlaylistPurchaseOmit
    problemInPlaylist?: ProblemInPlaylistOmit
    badge?: BadgeOmit
    problemReport?: ProblemReportOmit
    problemDiscussion?: ProblemDiscussionOmit
    discussionMessage?: DiscussionMessageOmit
    discussionReply?: DiscussionReplyOmit
    discussionUpvote?: DiscussionUpvoteOmit
    notification?: NotificationOmit
    problemInvitation?: ProblemInvitationOmit
    problemCollaboration?: ProblemCollaborationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    followers: number
    following: number
    problems: number
    submission: number
    problemSolved: number
    playlists: number
    submittedReports: number
    discussionMessages: number
    discussionReplies: number
    discussionUpvotes: number
    playlistPurchases: number
    sentInvitations: number
    receivedInvitations: number
    participatingCollaborations: number
    notifications: number
    initiatedCollaborations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    followers?: boolean | UserCountOutputTypeCountFollowersArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
    problems?: boolean | UserCountOutputTypeCountProblemsArgs
    submission?: boolean | UserCountOutputTypeCountSubmissionArgs
    problemSolved?: boolean | UserCountOutputTypeCountProblemSolvedArgs
    playlists?: boolean | UserCountOutputTypeCountPlaylistsArgs
    submittedReports?: boolean | UserCountOutputTypeCountSubmittedReportsArgs
    discussionMessages?: boolean | UserCountOutputTypeCountDiscussionMessagesArgs
    discussionReplies?: boolean | UserCountOutputTypeCountDiscussionRepliesArgs
    discussionUpvotes?: boolean | UserCountOutputTypeCountDiscussionUpvotesArgs
    playlistPurchases?: boolean | UserCountOutputTypeCountPlaylistPurchasesArgs
    sentInvitations?: boolean | UserCountOutputTypeCountSentInvitationsArgs
    receivedInvitations?: boolean | UserCountOutputTypeCountReceivedInvitationsArgs
    participatingCollaborations?: boolean | UserCountOutputTypeCountParticipatingCollaborationsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    initiatedCollaborations?: boolean | UserCountOutputTypeCountInitiatedCollaborationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProblemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProblemSolvedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemSolvedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlaylistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmittedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDiscussionMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDiscussionRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionReplyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDiscussionUpvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionUpvoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlaylistPurchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistPurchaseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemInvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemInvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParticipatingCollaborationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemCollaborationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInitiatedCollaborationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemCollaborationWhereInput
  }


  /**
   * Count Type ProblemCountOutputType
   */

  export type ProblemCountOutputType = {
    invitations: number
    collaborations: number
    submission: number
    solvedBy: number
    problemsPlaylists: number
    reports: number
    discussions: number
  }

  export type ProblemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invitations?: boolean | ProblemCountOutputTypeCountInvitationsArgs
    collaborations?: boolean | ProblemCountOutputTypeCountCollaborationsArgs
    submission?: boolean | ProblemCountOutputTypeCountSubmissionArgs
    solvedBy?: boolean | ProblemCountOutputTypeCountSolvedByArgs
    problemsPlaylists?: boolean | ProblemCountOutputTypeCountProblemsPlaylistsArgs
    reports?: boolean | ProblemCountOutputTypeCountReportsArgs
    discussions?: boolean | ProblemCountOutputTypeCountDiscussionsArgs
  }

  // Custom InputTypes
  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCountOutputType
     */
    select?: ProblemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemInvitationWhereInput
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountCollaborationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemCollaborationWhereInput
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountSolvedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemSolvedWhereInput
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountProblemsPlaylistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemInPlaylistWhereInput
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemReportWhereInput
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountDiscussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemDiscussionWhereInput
  }


  /**
   * Count Type SubmissionCountOutputType
   */

  export type SubmissionCountOutputType = {
    testCases: number
  }

  export type SubmissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    testCases?: boolean | SubmissionCountOutputTypeCountTestCasesArgs
  }

  // Custom InputTypes
  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionCountOutputType
     */
    select?: SubmissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountTestCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseResultWhereInput
  }


  /**
   * Count Type PlaylistCountOutputType
   */

  export type PlaylistCountOutputType = {
    problems: number
    purchases: number
  }

  export type PlaylistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problems?: boolean | PlaylistCountOutputTypeCountProblemsArgs
    purchases?: boolean | PlaylistCountOutputTypeCountPurchasesArgs
  }

  // Custom InputTypes
  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistCountOutputType
     */
    select?: PlaylistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeCountProblemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemInPlaylistWhereInput
  }

  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeCountPurchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistPurchaseWhereInput
  }


  /**
   * Count Type ProblemDiscussionCountOutputType
   */

  export type ProblemDiscussionCountOutputType = {
    messages: number
  }

  export type ProblemDiscussionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ProblemDiscussionCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ProblemDiscussionCountOutputType without action
   */
  export type ProblemDiscussionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussionCountOutputType
     */
    select?: ProblemDiscussionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProblemDiscussionCountOutputType without action
   */
  export type ProblemDiscussionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionMessageWhereInput
  }


  /**
   * Count Type DiscussionMessageCountOutputType
   */

  export type DiscussionMessageCountOutputType = {
    replies: number
    upvotes: number
  }

  export type DiscussionMessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | DiscussionMessageCountOutputTypeCountRepliesArgs
    upvotes?: boolean | DiscussionMessageCountOutputTypeCountUpvotesArgs
  }

  // Custom InputTypes
  /**
   * DiscussionMessageCountOutputType without action
   */
  export type DiscussionMessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessageCountOutputType
     */
    select?: DiscussionMessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiscussionMessageCountOutputType without action
   */
  export type DiscussionMessageCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionReplyWhereInput
  }

  /**
   * DiscussionMessageCountOutputType without action
   */
  export type DiscussionMessageCountOutputTypeCountUpvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionUpvoteWhereInput
  }


  /**
   * Count Type ProblemCollaborationCountOutputType
   */

  export type ProblemCollaborationCountOutputType = {
    participants: number
  }

  export type ProblemCollaborationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | ProblemCollaborationCountOutputTypeCountParticipantsArgs
  }

  // Custom InputTypes
  /**
   * ProblemCollaborationCountOutputType without action
   */
  export type ProblemCollaborationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaborationCountOutputType
     */
    select?: ProblemCollaborationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProblemCollaborationCountOutputType without action
   */
  export type ProblemCollaborationCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    currentStreak: number | null
    longestStreak: number | null
    followerCount: number | null
    followingCount: number | null
  }

  export type UserSumAggregateOutputType = {
    currentStreak: number | null
    longestStreak: number | null
    followerCount: number | null
    followingCount: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    bio: string | null
    linkedin: string | null
    portfolio: string | null
    email: string | null
    image: string | null
    role: $Enums.UserRole | null
    password: string | null
    forgotPasswordOtp: string | null
    forgotPasswordOtpExpiry: Date | null
    provider: string | null
    currentStreak: number | null
    longestStreak: number | null
    lastSolvedDate: Date | null
    followerCount: number | null
    followingCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    username: string | null
    bio: string | null
    linkedin: string | null
    portfolio: string | null
    email: string | null
    image: string | null
    role: $Enums.UserRole | null
    password: string | null
    forgotPasswordOtp: string | null
    forgotPasswordOtpExpiry: Date | null
    provider: string | null
    currentStreak: number | null
    longestStreak: number | null
    lastSolvedDate: Date | null
    followerCount: number | null
    followingCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    username: number
    bio: number
    linkedin: number
    portfolio: number
    email: number
    image: number
    role: number
    password: number
    forgotPasswordOtp: number
    forgotPasswordOtpExpiry: number
    provider: number
    currentStreak: number
    longestStreak: number
    lastSolvedDate: number
    followerCount: number
    followingCount: number
    badges: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    currentStreak?: true
    longestStreak?: true
    followerCount?: true
    followingCount?: true
  }

  export type UserSumAggregateInputType = {
    currentStreak?: true
    longestStreak?: true
    followerCount?: true
    followingCount?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    bio?: true
    linkedin?: true
    portfolio?: true
    email?: true
    image?: true
    role?: true
    password?: true
    forgotPasswordOtp?: true
    forgotPasswordOtpExpiry?: true
    provider?: true
    currentStreak?: true
    longestStreak?: true
    lastSolvedDate?: true
    followerCount?: true
    followingCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    bio?: true
    linkedin?: true
    portfolio?: true
    email?: true
    image?: true
    role?: true
    password?: true
    forgotPasswordOtp?: true
    forgotPasswordOtpExpiry?: true
    provider?: true
    currentStreak?: true
    longestStreak?: true
    lastSolvedDate?: true
    followerCount?: true
    followingCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    bio?: true
    linkedin?: true
    portfolio?: true
    email?: true
    image?: true
    role?: true
    password?: true
    forgotPasswordOtp?: true
    forgotPasswordOtpExpiry?: true
    provider?: true
    currentStreak?: true
    longestStreak?: true
    lastSolvedDate?: true
    followerCount?: true
    followingCount?: true
    badges?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    username: string
    bio: string | null
    linkedin: string | null
    portfolio: string | null
    email: string
    image: string | null
    role: $Enums.UserRole
    password: string
    forgotPasswordOtp: string | null
    forgotPasswordOtpExpiry: Date | null
    provider: string | null
    currentStreak: number
    longestStreak: number
    lastSolvedDate: Date | null
    followerCount: number
    followingCount: number
    badges: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    bio?: boolean
    linkedin?: boolean
    portfolio?: boolean
    email?: boolean
    image?: boolean
    role?: boolean
    password?: boolean
    forgotPasswordOtp?: boolean
    forgotPasswordOtpExpiry?: boolean
    provider?: boolean
    currentStreak?: boolean
    longestStreak?: boolean
    lastSolvedDate?: boolean
    followerCount?: boolean
    followingCount?: boolean
    badges?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    followers?: boolean | User$followersArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    problems?: boolean | User$problemsArgs<ExtArgs>
    submission?: boolean | User$submissionArgs<ExtArgs>
    problemSolved?: boolean | User$problemSolvedArgs<ExtArgs>
    playlists?: boolean | User$playlistsArgs<ExtArgs>
    submittedReports?: boolean | User$submittedReportsArgs<ExtArgs>
    discussionMessages?: boolean | User$discussionMessagesArgs<ExtArgs>
    discussionReplies?: boolean | User$discussionRepliesArgs<ExtArgs>
    discussionUpvotes?: boolean | User$discussionUpvotesArgs<ExtArgs>
    playlistPurchases?: boolean | User$playlistPurchasesArgs<ExtArgs>
    sentInvitations?: boolean | User$sentInvitationsArgs<ExtArgs>
    receivedInvitations?: boolean | User$receivedInvitationsArgs<ExtArgs>
    participatingCollaborations?: boolean | User$participatingCollaborationsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    initiatedCollaborations?: boolean | User$initiatedCollaborationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    bio?: boolean
    linkedin?: boolean
    portfolio?: boolean
    email?: boolean
    image?: boolean
    role?: boolean
    password?: boolean
    forgotPasswordOtp?: boolean
    forgotPasswordOtpExpiry?: boolean
    provider?: boolean
    currentStreak?: boolean
    longestStreak?: boolean
    lastSolvedDate?: boolean
    followerCount?: boolean
    followingCount?: boolean
    badges?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    bio?: boolean
    linkedin?: boolean
    portfolio?: boolean
    email?: boolean
    image?: boolean
    role?: boolean
    password?: boolean
    forgotPasswordOtp?: boolean
    forgotPasswordOtpExpiry?: boolean
    provider?: boolean
    currentStreak?: boolean
    longestStreak?: boolean
    lastSolvedDate?: boolean
    followerCount?: boolean
    followingCount?: boolean
    badges?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    username?: boolean
    bio?: boolean
    linkedin?: boolean
    portfolio?: boolean
    email?: boolean
    image?: boolean
    role?: boolean
    password?: boolean
    forgotPasswordOtp?: boolean
    forgotPasswordOtpExpiry?: boolean
    provider?: boolean
    currentStreak?: boolean
    longestStreak?: boolean
    lastSolvedDate?: boolean
    followerCount?: boolean
    followingCount?: boolean
    badges?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "username" | "bio" | "linkedin" | "portfolio" | "email" | "image" | "role" | "password" | "forgotPasswordOtp" | "forgotPasswordOtpExpiry" | "provider" | "currentStreak" | "longestStreak" | "lastSolvedDate" | "followerCount" | "followingCount" | "badges" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    followers?: boolean | User$followersArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    problems?: boolean | User$problemsArgs<ExtArgs>
    submission?: boolean | User$submissionArgs<ExtArgs>
    problemSolved?: boolean | User$problemSolvedArgs<ExtArgs>
    playlists?: boolean | User$playlistsArgs<ExtArgs>
    submittedReports?: boolean | User$submittedReportsArgs<ExtArgs>
    discussionMessages?: boolean | User$discussionMessagesArgs<ExtArgs>
    discussionReplies?: boolean | User$discussionRepliesArgs<ExtArgs>
    discussionUpvotes?: boolean | User$discussionUpvotesArgs<ExtArgs>
    playlistPurchases?: boolean | User$playlistPurchasesArgs<ExtArgs>
    sentInvitations?: boolean | User$sentInvitationsArgs<ExtArgs>
    receivedInvitations?: boolean | User$receivedInvitationsArgs<ExtArgs>
    participatingCollaborations?: boolean | User$participatingCollaborationsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    initiatedCollaborations?: boolean | User$initiatedCollaborationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      followers: Prisma.$FollowPayload<ExtArgs>[]
      following: Prisma.$FollowPayload<ExtArgs>[]
      problems: Prisma.$ProblemPayload<ExtArgs>[]
      submission: Prisma.$SubmissionPayload<ExtArgs>[]
      problemSolved: Prisma.$ProblemSolvedPayload<ExtArgs>[]
      playlists: Prisma.$PlaylistPayload<ExtArgs>[]
      submittedReports: Prisma.$ProblemReportPayload<ExtArgs>[]
      discussionMessages: Prisma.$DiscussionMessagePayload<ExtArgs>[]
      discussionReplies: Prisma.$DiscussionReplyPayload<ExtArgs>[]
      discussionUpvotes: Prisma.$DiscussionUpvotePayload<ExtArgs>[]
      playlistPurchases: Prisma.$PlaylistPurchasePayload<ExtArgs>[]
      sentInvitations: Prisma.$ProblemInvitationPayload<ExtArgs>[]
      receivedInvitations: Prisma.$ProblemInvitationPayload<ExtArgs>[]
      participatingCollaborations: Prisma.$ProblemCollaborationPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      initiatedCollaborations: Prisma.$ProblemCollaborationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      username: string
      bio: string | null
      linkedin: string | null
      portfolio: string | null
      email: string
      image: string | null
      role: $Enums.UserRole
      password: string
      forgotPasswordOtp: string | null
      forgotPasswordOtpExpiry: Date | null
      provider: string | null
      currentStreak: number
      longestStreak: number
      lastSolvedDate: Date | null
      followerCount: number
      followingCount: number
      badges: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    followers<T extends User$followersArgs<ExtArgs> = {}>(args?: Subset<T, User$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    following<T extends User$followingArgs<ExtArgs> = {}>(args?: Subset<T, User$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    problems<T extends User$problemsArgs<ExtArgs> = {}>(args?: Subset<T, User$problemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submission<T extends User$submissionArgs<ExtArgs> = {}>(args?: Subset<T, User$submissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    problemSolved<T extends User$problemSolvedArgs<ExtArgs> = {}>(args?: Subset<T, User$problemSolvedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    playlists<T extends User$playlistsArgs<ExtArgs> = {}>(args?: Subset<T, User$playlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submittedReports<T extends User$submittedReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$submittedReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    discussionMessages<T extends User$discussionMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$discussionMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    discussionReplies<T extends User$discussionRepliesArgs<ExtArgs> = {}>(args?: Subset<T, User$discussionRepliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    discussionUpvotes<T extends User$discussionUpvotesArgs<ExtArgs> = {}>(args?: Subset<T, User$discussionUpvotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    playlistPurchases<T extends User$playlistPurchasesArgs<ExtArgs> = {}>(args?: Subset<T, User$playlistPurchasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentInvitations<T extends User$sentInvitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentInvitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedInvitations<T extends User$receivedInvitationsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedInvitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participatingCollaborations<T extends User$participatingCollaborationsArgs<ExtArgs> = {}>(args?: Subset<T, User$participatingCollaborationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    initiatedCollaborations<T extends User$initiatedCollaborationsArgs<ExtArgs> = {}>(args?: Subset<T, User$initiatedCollaborationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly linkedin: FieldRef<"User", 'String'>
    readonly portfolio: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly password: FieldRef<"User", 'String'>
    readonly forgotPasswordOtp: FieldRef<"User", 'String'>
    readonly forgotPasswordOtpExpiry: FieldRef<"User", 'DateTime'>
    readonly provider: FieldRef<"User", 'String'>
    readonly currentStreak: FieldRef<"User", 'Int'>
    readonly longestStreak: FieldRef<"User", 'Int'>
    readonly lastSolvedDate: FieldRef<"User", 'DateTime'>
    readonly followerCount: FieldRef<"User", 'Int'>
    readonly followingCount: FieldRef<"User", 'Int'>
    readonly badges: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.followers
   */
  export type User$followersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * User.following
   */
  export type User$followingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    cursor?: FollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * User.problems
   */
  export type User$problemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    where?: ProblemWhereInput
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    cursor?: ProblemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * User.submission
   */
  export type User$submissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * User.problemSolved
   */
  export type User$problemSolvedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    where?: ProblemSolvedWhereInput
    orderBy?: ProblemSolvedOrderByWithRelationInput | ProblemSolvedOrderByWithRelationInput[]
    cursor?: ProblemSolvedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemSolvedScalarFieldEnum | ProblemSolvedScalarFieldEnum[]
  }

  /**
   * User.playlists
   */
  export type User$playlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    where?: PlaylistWhereInput
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    cursor?: PlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }

  /**
   * User.submittedReports
   */
  export type User$submittedReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    where?: ProblemReportWhereInput
    orderBy?: ProblemReportOrderByWithRelationInput | ProblemReportOrderByWithRelationInput[]
    cursor?: ProblemReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemReportScalarFieldEnum | ProblemReportScalarFieldEnum[]
  }

  /**
   * User.discussionMessages
   */
  export type User$discussionMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    where?: DiscussionMessageWhereInput
    orderBy?: DiscussionMessageOrderByWithRelationInput | DiscussionMessageOrderByWithRelationInput[]
    cursor?: DiscussionMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionMessageScalarFieldEnum | DiscussionMessageScalarFieldEnum[]
  }

  /**
   * User.discussionReplies
   */
  export type User$discussionRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    where?: DiscussionReplyWhereInput
    orderBy?: DiscussionReplyOrderByWithRelationInput | DiscussionReplyOrderByWithRelationInput[]
    cursor?: DiscussionReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionReplyScalarFieldEnum | DiscussionReplyScalarFieldEnum[]
  }

  /**
   * User.discussionUpvotes
   */
  export type User$discussionUpvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    where?: DiscussionUpvoteWhereInput
    orderBy?: DiscussionUpvoteOrderByWithRelationInput | DiscussionUpvoteOrderByWithRelationInput[]
    cursor?: DiscussionUpvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionUpvoteScalarFieldEnum | DiscussionUpvoteScalarFieldEnum[]
  }

  /**
   * User.playlistPurchases
   */
  export type User$playlistPurchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    where?: PlaylistPurchaseWhereInput
    orderBy?: PlaylistPurchaseOrderByWithRelationInput | PlaylistPurchaseOrderByWithRelationInput[]
    cursor?: PlaylistPurchaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistPurchaseScalarFieldEnum | PlaylistPurchaseScalarFieldEnum[]
  }

  /**
   * User.sentInvitations
   */
  export type User$sentInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    where?: ProblemInvitationWhereInput
    orderBy?: ProblemInvitationOrderByWithRelationInput | ProblemInvitationOrderByWithRelationInput[]
    cursor?: ProblemInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemInvitationScalarFieldEnum | ProblemInvitationScalarFieldEnum[]
  }

  /**
   * User.receivedInvitations
   */
  export type User$receivedInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    where?: ProblemInvitationWhereInput
    orderBy?: ProblemInvitationOrderByWithRelationInput | ProblemInvitationOrderByWithRelationInput[]
    cursor?: ProblemInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemInvitationScalarFieldEnum | ProblemInvitationScalarFieldEnum[]
  }

  /**
   * User.participatingCollaborations
   */
  export type User$participatingCollaborationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    where?: ProblemCollaborationWhereInput
    orderBy?: ProblemCollaborationOrderByWithRelationInput | ProblemCollaborationOrderByWithRelationInput[]
    cursor?: ProblemCollaborationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemCollaborationScalarFieldEnum | ProblemCollaborationScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.initiatedCollaborations
   */
  export type User$initiatedCollaborationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    where?: ProblemCollaborationWhereInput
    orderBy?: ProblemCollaborationOrderByWithRelationInput | ProblemCollaborationOrderByWithRelationInput[]
    cursor?: ProblemCollaborationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemCollaborationScalarFieldEnum | ProblemCollaborationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Follow
   */

  export type AggregateFollow = {
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  export type FollowMinAggregateOutputType = {
    id: string | null
    followerId: string | null
    followingId: string | null
    createdAt: Date | null
  }

  export type FollowMaxAggregateOutputType = {
    id: string | null
    followerId: string | null
    followingId: string | null
    createdAt: Date | null
  }

  export type FollowCountAggregateOutputType = {
    id: number
    followerId: number
    followingId: number
    createdAt: number
    _all: number
  }


  export type FollowMinAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
  }

  export type FollowMaxAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
  }

  export type FollowCountAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
    _all?: true
  }

  export type FollowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follow to aggregate.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowMaxAggregateInputType
  }

  export type GetFollowAggregateType<T extends FollowAggregateArgs> = {
        [P in keyof T & keyof AggregateFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollow[P]>
      : GetScalarType<T[P], AggregateFollow[P]>
  }




  export type FollowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowWhereInput
    orderBy?: FollowOrderByWithAggregationInput | FollowOrderByWithAggregationInput[]
    by: FollowScalarFieldEnum[] | FollowScalarFieldEnum
    having?: FollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowCountAggregateInputType | true
    _min?: FollowMinAggregateInputType
    _max?: FollowMaxAggregateInputType
  }

  export type FollowGroupByOutputType = {
    id: string
    followerId: string
    followingId: string
    createdAt: Date
    _count: FollowCountAggregateOutputType | null
    _min: FollowMinAggregateOutputType | null
    _max: FollowMaxAggregateOutputType | null
  }

  type GetFollowGroupByPayload<T extends FollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowGroupByOutputType[P]>
            : GetScalarType<T[P], FollowGroupByOutputType[P]>
        }
      >
    >


  export type FollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["follow"]>

  export type FollowSelectScalar = {
    id?: boolean
    followerId?: boolean
    followingId?: boolean
    createdAt?: boolean
  }

  export type FollowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "followerId" | "followingId" | "createdAt", ExtArgs["result"]["follow"]>
  export type FollowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FollowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    follower?: boolean | UserDefaultArgs<ExtArgs>
    following?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FollowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Follow"
    objects: {
      follower: Prisma.$UserPayload<ExtArgs>
      following: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      followerId: string
      followingId: string
      createdAt: Date
    }, ExtArgs["result"]["follow"]>
    composites: {}
  }

  type FollowGetPayload<S extends boolean | null | undefined | FollowDefaultArgs> = $Result.GetResult<Prisma.$FollowPayload, S>

  type FollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FollowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FollowCountAggregateInputType | true
    }

  export interface FollowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follow'], meta: { name: 'Follow' } }
    /**
     * Find zero or one Follow that matches the filter.
     * @param {FollowFindUniqueArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowFindUniqueArgs>(args: SelectSubset<T, FollowFindUniqueArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Follow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FollowFindUniqueOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Follow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowFindFirstArgs>(args?: SelectSubset<T, FollowFindFirstArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Follow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindFirstOrThrowArgs} args - Arguments to find a Follow
     * @example
     * // Get one Follow
     * const follow = await prisma.follow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follow.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followWithIdOnly = await prisma.follow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FollowFindManyArgs>(args?: SelectSubset<T, FollowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Follow.
     * @param {FollowCreateArgs} args - Arguments to create a Follow.
     * @example
     * // Create one Follow
     * const Follow = await prisma.follow.create({
     *   data: {
     *     // ... data to create a Follow
     *   }
     * })
     * 
     */
    create<T extends FollowCreateArgs>(args: SelectSubset<T, FollowCreateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Follows.
     * @param {FollowCreateManyArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowCreateManyArgs>(args?: SelectSubset<T, FollowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Follows and returns the data saved in the database.
     * @param {FollowCreateManyAndReturnArgs} args - Arguments to create many Follows.
     * @example
     * // Create many Follows
     * const follow = await prisma.follow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Follows and only return the `id`
     * const followWithIdOnly = await prisma.follow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FollowCreateManyAndReturnArgs>(args?: SelectSubset<T, FollowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Follow.
     * @param {FollowDeleteArgs} args - Arguments to delete one Follow.
     * @example
     * // Delete one Follow
     * const Follow = await prisma.follow.delete({
     *   where: {
     *     // ... filter to delete one Follow
     *   }
     * })
     * 
     */
    delete<T extends FollowDeleteArgs>(args: SelectSubset<T, FollowDeleteArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Follow.
     * @param {FollowUpdateArgs} args - Arguments to update one Follow.
     * @example
     * // Update one Follow
     * const follow = await prisma.follow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowUpdateArgs>(args: SelectSubset<T, FollowUpdateArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Follows.
     * @param {FollowDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowDeleteManyArgs>(args?: SelectSubset<T, FollowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowUpdateManyArgs>(args: SelectSubset<T, FollowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows and returns the data updated in the database.
     * @param {FollowUpdateManyAndReturnArgs} args - Arguments to update many Follows.
     * @example
     * // Update many Follows
     * const follow = await prisma.follow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Follows and only return the `id`
     * const followWithIdOnly = await prisma.follow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FollowUpdateManyAndReturnArgs>(args: SelectSubset<T, FollowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Follow.
     * @param {FollowUpsertArgs} args - Arguments to update or create a Follow.
     * @example
     * // Update or create a Follow
     * const follow = await prisma.follow.upsert({
     *   create: {
     *     // ... data to create a Follow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follow we want to update
     *   }
     * })
     */
    upsert<T extends FollowUpsertArgs>(args: SelectSubset<T, FollowUpsertArgs<ExtArgs>>): Prisma__FollowClient<$Result.GetResult<Prisma.$FollowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follow.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowCountArgs>(
      args?: Subset<T, FollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowAggregateArgs>(args: Subset<T, FollowAggregateArgs>): Prisma.PrismaPromise<GetFollowAggregateType<T>>

    /**
     * Group by Follow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowGroupByArgs['orderBy'] }
        : { orderBy?: FollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Follow model
   */
  readonly fields: FollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    follower<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    following<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Follow model
   */
  interface FollowFieldRefs {
    readonly id: FieldRef<"Follow", 'String'>
    readonly followerId: FieldRef<"Follow", 'String'>
    readonly followingId: FieldRef<"Follow", 'String'>
    readonly createdAt: FieldRef<"Follow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Follow findUnique
   */
  export type FollowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findUniqueOrThrow
   */
  export type FollowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow findFirst
   */
  export type FollowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findFirstOrThrow
   */
  export type FollowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follow to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow findMany
   */
  export type FollowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowOrderByWithRelationInput | FollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     */
    cursor?: FollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    distinct?: FollowScalarFieldEnum | FollowScalarFieldEnum[]
  }

  /**
   * Follow create
   */
  export type FollowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to create a Follow.
     */
    data: XOR<FollowCreateInput, FollowUncheckedCreateInput>
  }

  /**
   * Follow createMany
   */
  export type FollowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Follow createManyAndReturn
   */
  export type FollowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * The data used to create many Follows.
     */
    data: FollowCreateManyInput | FollowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Follow update
   */
  export type FollowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The data needed to update a Follow.
     */
    data: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
    /**
     * Choose, which Follow to update.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow updateMany
   */
  export type FollowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to update.
     */
    limit?: number
  }

  /**
   * Follow updateManyAndReturn
   */
  export type FollowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Follow upsert
   */
  export type FollowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * The filter to search for the Follow to update in case it exists.
     */
    where: FollowWhereUniqueInput
    /**
     * In case the Follow found by the `where` argument doesn't exist, create a new Follow with this data.
     */
    create: XOR<FollowCreateInput, FollowUncheckedCreateInput>
    /**
     * In case the Follow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowUpdateInput, FollowUncheckedUpdateInput>
  }

  /**
   * Follow delete
   */
  export type FollowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
    /**
     * Filter which Follow to delete.
     */
    where: FollowWhereUniqueInput
  }

  /**
   * Follow deleteMany
   */
  export type FollowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowWhereInput
    /**
     * Limit how many Follows to delete.
     */
    limit?: number
  }

  /**
   * Follow without action
   */
  export type FollowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follow
     */
    select?: FollowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Follow
     */
    omit?: FollowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowInclude<ExtArgs> | null
  }


  /**
   * Model Problem
   */

  export type AggregateProblem = {
    _count: ProblemCountAggregateOutputType | null
    _avg: ProblemAvgAggregateOutputType | null
    _sum: ProblemSumAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  export type ProblemAvgAggregateOutputType = {
    likes: number | null
    dislikes: number | null
  }

  export type ProblemSumAggregateOutputType = {
    likes: number | null
    dislikes: number | null
  }

  export type ProblemMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    difficulty: $Enums.Difficulty | null
    userId: string | null
    constraints: string | null
    hints: string | null
    editorial: string | null
    isPaid: boolean | null
    likes: number | null
    dislikes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    difficulty: $Enums.Difficulty | null
    userId: string | null
    constraints: string | null
    hints: string | null
    editorial: string | null
    isPaid: boolean | null
    likes: number | null
    dislikes: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemCountAggregateOutputType = {
    id: number
    title: number
    description: number
    difficulty: number
    tags: number
    userId: number
    examples: number
    constraints: number
    hints: number
    editorial: number
    testcases: number
    codeSnippets: number
    referenceSolutions: number
    isPaid: number
    askedIn: number
    likes: number
    dislikes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemAvgAggregateInputType = {
    likes?: true
    dislikes?: true
  }

  export type ProblemSumAggregateInputType = {
    likes?: true
    dislikes?: true
  }

  export type ProblemMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    difficulty?: true
    userId?: true
    constraints?: true
    hints?: true
    editorial?: true
    isPaid?: true
    likes?: true
    dislikes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    difficulty?: true
    userId?: true
    constraints?: true
    hints?: true
    editorial?: true
    isPaid?: true
    likes?: true
    dislikes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    difficulty?: true
    tags?: true
    userId?: true
    examples?: true
    constraints?: true
    hints?: true
    editorial?: true
    testcases?: true
    codeSnippets?: true
    referenceSolutions?: true
    isPaid?: true
    askedIn?: true
    likes?: true
    dislikes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problem to aggregate.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Problems
    **/
    _count?: true | ProblemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProblemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProblemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemMaxAggregateInputType
  }

  export type GetProblemAggregateType<T extends ProblemAggregateArgs> = {
        [P in keyof T & keyof AggregateProblem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblem[P]>
      : GetScalarType<T[P], AggregateProblem[P]>
  }




  export type ProblemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemWhereInput
    orderBy?: ProblemOrderByWithAggregationInput | ProblemOrderByWithAggregationInput[]
    by: ProblemScalarFieldEnum[] | ProblemScalarFieldEnum
    having?: ProblemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemCountAggregateInputType | true
    _avg?: ProblemAvgAggregateInputType
    _sum?: ProblemSumAggregateInputType
    _min?: ProblemMinAggregateInputType
    _max?: ProblemMaxAggregateInputType
  }

  export type ProblemGroupByOutputType = {
    id: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags: string[]
    userId: string
    examples: JsonValue
    constraints: string
    hints: string | null
    editorial: string | null
    testcases: JsonValue
    codeSnippets: JsonValue
    referenceSolutions: JsonValue
    isPaid: boolean
    askedIn: string[]
    likes: number
    dislikes: number
    createdAt: Date
    updatedAt: Date
    _count: ProblemCountAggregateOutputType | null
    _avg: ProblemAvgAggregateOutputType | null
    _sum: ProblemSumAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  type GetProblemGroupByPayload<T extends ProblemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemGroupByOutputType[P]>
        }
      >
    >


  export type ProblemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    difficulty?: boolean
    tags?: boolean
    userId?: boolean
    examples?: boolean
    constraints?: boolean
    hints?: boolean
    editorial?: boolean
    testcases?: boolean
    codeSnippets?: boolean
    referenceSolutions?: boolean
    isPaid?: boolean
    askedIn?: boolean
    likes?: boolean
    dislikes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    invitations?: boolean | Problem$invitationsArgs<ExtArgs>
    collaborations?: boolean | Problem$collaborationsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | Problem$submissionArgs<ExtArgs>
    solvedBy?: boolean | Problem$solvedByArgs<ExtArgs>
    problemsPlaylists?: boolean | Problem$problemsPlaylistsArgs<ExtArgs>
    reports?: boolean | Problem$reportsArgs<ExtArgs>
    discussions?: boolean | Problem$discussionsArgs<ExtArgs>
    _count?: boolean | ProblemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problem"]>

  export type ProblemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    difficulty?: boolean
    tags?: boolean
    userId?: boolean
    examples?: boolean
    constraints?: boolean
    hints?: boolean
    editorial?: boolean
    testcases?: boolean
    codeSnippets?: boolean
    referenceSolutions?: boolean
    isPaid?: boolean
    askedIn?: boolean
    likes?: boolean
    dislikes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problem"]>

  export type ProblemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    difficulty?: boolean
    tags?: boolean
    userId?: boolean
    examples?: boolean
    constraints?: boolean
    hints?: boolean
    editorial?: boolean
    testcases?: boolean
    codeSnippets?: boolean
    referenceSolutions?: boolean
    isPaid?: boolean
    askedIn?: boolean
    likes?: boolean
    dislikes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problem"]>

  export type ProblemSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    difficulty?: boolean
    tags?: boolean
    userId?: boolean
    examples?: boolean
    constraints?: boolean
    hints?: boolean
    editorial?: boolean
    testcases?: boolean
    codeSnippets?: boolean
    referenceSolutions?: boolean
    isPaid?: boolean
    askedIn?: boolean
    likes?: boolean
    dislikes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "difficulty" | "tags" | "userId" | "examples" | "constraints" | "hints" | "editorial" | "testcases" | "codeSnippets" | "referenceSolutions" | "isPaid" | "askedIn" | "likes" | "dislikes" | "createdAt" | "updatedAt", ExtArgs["result"]["problem"]>
  export type ProblemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invitations?: boolean | Problem$invitationsArgs<ExtArgs>
    collaborations?: boolean | Problem$collaborationsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | Problem$submissionArgs<ExtArgs>
    solvedBy?: boolean | Problem$solvedByArgs<ExtArgs>
    problemsPlaylists?: boolean | Problem$problemsPlaylistsArgs<ExtArgs>
    reports?: boolean | Problem$reportsArgs<ExtArgs>
    discussions?: boolean | Problem$discussionsArgs<ExtArgs>
    _count?: boolean | ProblemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProblemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProblemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProblemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Problem"
    objects: {
      invitations: Prisma.$ProblemInvitationPayload<ExtArgs>[]
      collaborations: Prisma.$ProblemCollaborationPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      submission: Prisma.$SubmissionPayload<ExtArgs>[]
      solvedBy: Prisma.$ProblemSolvedPayload<ExtArgs>[]
      problemsPlaylists: Prisma.$ProblemInPlaylistPayload<ExtArgs>[]
      reports: Prisma.$ProblemReportPayload<ExtArgs>[]
      discussions: Prisma.$ProblemDiscussionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      difficulty: $Enums.Difficulty
      tags: string[]
      userId: string
      examples: Prisma.JsonValue
      constraints: string
      hints: string | null
      editorial: string | null
      testcases: Prisma.JsonValue
      codeSnippets: Prisma.JsonValue
      referenceSolutions: Prisma.JsonValue
      isPaid: boolean
      askedIn: string[]
      likes: number
      dislikes: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["problem"]>
    composites: {}
  }

  type ProblemGetPayload<S extends boolean | null | undefined | ProblemDefaultArgs> = $Result.GetResult<Prisma.$ProblemPayload, S>

  type ProblemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemCountAggregateInputType | true
    }

  export interface ProblemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Problem'], meta: { name: 'Problem' } }
    /**
     * Find zero or one Problem that matches the filter.
     * @param {ProblemFindUniqueArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemFindUniqueArgs>(args: SelectSubset<T, ProblemFindUniqueArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Problem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemFindUniqueOrThrowArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Problem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindFirstArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemFindFirstArgs>(args?: SelectSubset<T, ProblemFindFirstArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Problem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindFirstOrThrowArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Problems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Problems
     * const problems = await prisma.problem.findMany()
     * 
     * // Get first 10 Problems
     * const problems = await prisma.problem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemWithIdOnly = await prisma.problem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemFindManyArgs>(args?: SelectSubset<T, ProblemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Problem.
     * @param {ProblemCreateArgs} args - Arguments to create a Problem.
     * @example
     * // Create one Problem
     * const Problem = await prisma.problem.create({
     *   data: {
     *     // ... data to create a Problem
     *   }
     * })
     * 
     */
    create<T extends ProblemCreateArgs>(args: SelectSubset<T, ProblemCreateArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Problems.
     * @param {ProblemCreateManyArgs} args - Arguments to create many Problems.
     * @example
     * // Create many Problems
     * const problem = await prisma.problem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemCreateManyArgs>(args?: SelectSubset<T, ProblemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Problems and returns the data saved in the database.
     * @param {ProblemCreateManyAndReturnArgs} args - Arguments to create many Problems.
     * @example
     * // Create many Problems
     * const problem = await prisma.problem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Problems and only return the `id`
     * const problemWithIdOnly = await prisma.problem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Problem.
     * @param {ProblemDeleteArgs} args - Arguments to delete one Problem.
     * @example
     * // Delete one Problem
     * const Problem = await prisma.problem.delete({
     *   where: {
     *     // ... filter to delete one Problem
     *   }
     * })
     * 
     */
    delete<T extends ProblemDeleteArgs>(args: SelectSubset<T, ProblemDeleteArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Problem.
     * @param {ProblemUpdateArgs} args - Arguments to update one Problem.
     * @example
     * // Update one Problem
     * const problem = await prisma.problem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemUpdateArgs>(args: SelectSubset<T, ProblemUpdateArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Problems.
     * @param {ProblemDeleteManyArgs} args - Arguments to filter Problems to delete.
     * @example
     * // Delete a few Problems
     * const { count } = await prisma.problem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemDeleteManyArgs>(args?: SelectSubset<T, ProblemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Problems
     * const problem = await prisma.problem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemUpdateManyArgs>(args: SelectSubset<T, ProblemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problems and returns the data updated in the database.
     * @param {ProblemUpdateManyAndReturnArgs} args - Arguments to update many Problems.
     * @example
     * // Update many Problems
     * const problem = await prisma.problem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Problems and only return the `id`
     * const problemWithIdOnly = await prisma.problem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Problem.
     * @param {ProblemUpsertArgs} args - Arguments to update or create a Problem.
     * @example
     * // Update or create a Problem
     * const problem = await prisma.problem.upsert({
     *   create: {
     *     // ... data to create a Problem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Problem we want to update
     *   }
     * })
     */
    upsert<T extends ProblemUpsertArgs>(args: SelectSubset<T, ProblemUpsertArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCountArgs} args - Arguments to filter Problems to count.
     * @example
     * // Count the number of Problems
     * const count = await prisma.problem.count({
     *   where: {
     *     // ... the filter for the Problems we want to count
     *   }
     * })
    **/
    count<T extends ProblemCountArgs>(
      args?: Subset<T, ProblemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemAggregateArgs>(args: Subset<T, ProblemAggregateArgs>): Prisma.PrismaPromise<GetProblemAggregateType<T>>

    /**
     * Group by Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemGroupByArgs['orderBy'] }
        : { orderBy?: ProblemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Problem model
   */
  readonly fields: ProblemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Problem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    invitations<T extends Problem$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, Problem$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    collaborations<T extends Problem$collaborationsArgs<ExtArgs> = {}>(args?: Subset<T, Problem$collaborationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submission<T extends Problem$submissionArgs<ExtArgs> = {}>(args?: Subset<T, Problem$submissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    solvedBy<T extends Problem$solvedByArgs<ExtArgs> = {}>(args?: Subset<T, Problem$solvedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    problemsPlaylists<T extends Problem$problemsPlaylistsArgs<ExtArgs> = {}>(args?: Subset<T, Problem$problemsPlaylistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends Problem$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Problem$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    discussions<T extends Problem$discussionsArgs<ExtArgs> = {}>(args?: Subset<T, Problem$discussionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Problem model
   */
  interface ProblemFieldRefs {
    readonly id: FieldRef<"Problem", 'String'>
    readonly title: FieldRef<"Problem", 'String'>
    readonly description: FieldRef<"Problem", 'String'>
    readonly difficulty: FieldRef<"Problem", 'Difficulty'>
    readonly tags: FieldRef<"Problem", 'String[]'>
    readonly userId: FieldRef<"Problem", 'String'>
    readonly examples: FieldRef<"Problem", 'Json'>
    readonly constraints: FieldRef<"Problem", 'String'>
    readonly hints: FieldRef<"Problem", 'String'>
    readonly editorial: FieldRef<"Problem", 'String'>
    readonly testcases: FieldRef<"Problem", 'Json'>
    readonly codeSnippets: FieldRef<"Problem", 'Json'>
    readonly referenceSolutions: FieldRef<"Problem", 'Json'>
    readonly isPaid: FieldRef<"Problem", 'Boolean'>
    readonly askedIn: FieldRef<"Problem", 'String[]'>
    readonly likes: FieldRef<"Problem", 'Int'>
    readonly dislikes: FieldRef<"Problem", 'Int'>
    readonly createdAt: FieldRef<"Problem", 'DateTime'>
    readonly updatedAt: FieldRef<"Problem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Problem findUnique
   */
  export type ProblemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem findUniqueOrThrow
   */
  export type ProblemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem findFirst
   */
  export type ProblemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem findFirstOrThrow
   */
  export type ProblemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem findMany
   */
  export type ProblemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problems to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem create
   */
  export type ProblemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The data needed to create a Problem.
     */
    data: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
  }

  /**
   * Problem createMany
   */
  export type ProblemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Problems.
     */
    data: ProblemCreateManyInput | ProblemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Problem createManyAndReturn
   */
  export type ProblemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * The data used to create many Problems.
     */
    data: ProblemCreateManyInput | ProblemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Problem update
   */
  export type ProblemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The data needed to update a Problem.
     */
    data: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
    /**
     * Choose, which Problem to update.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem updateMany
   */
  export type ProblemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Problems.
     */
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyInput>
    /**
     * Filter which Problems to update
     */
    where?: ProblemWhereInput
    /**
     * Limit how many Problems to update.
     */
    limit?: number
  }

  /**
   * Problem updateManyAndReturn
   */
  export type ProblemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * The data used to update Problems.
     */
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyInput>
    /**
     * Filter which Problems to update
     */
    where?: ProblemWhereInput
    /**
     * Limit how many Problems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Problem upsert
   */
  export type ProblemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The filter to search for the Problem to update in case it exists.
     */
    where: ProblemWhereUniqueInput
    /**
     * In case the Problem found by the `where` argument doesn't exist, create a new Problem with this data.
     */
    create: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
    /**
     * In case the Problem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
  }

  /**
   * Problem delete
   */
  export type ProblemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter which Problem to delete.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem deleteMany
   */
  export type ProblemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problems to delete
     */
    where?: ProblemWhereInput
    /**
     * Limit how many Problems to delete.
     */
    limit?: number
  }

  /**
   * Problem.invitations
   */
  export type Problem$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    where?: ProblemInvitationWhereInput
    orderBy?: ProblemInvitationOrderByWithRelationInput | ProblemInvitationOrderByWithRelationInput[]
    cursor?: ProblemInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemInvitationScalarFieldEnum | ProblemInvitationScalarFieldEnum[]
  }

  /**
   * Problem.collaborations
   */
  export type Problem$collaborationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    where?: ProblemCollaborationWhereInput
    orderBy?: ProblemCollaborationOrderByWithRelationInput | ProblemCollaborationOrderByWithRelationInput[]
    cursor?: ProblemCollaborationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemCollaborationScalarFieldEnum | ProblemCollaborationScalarFieldEnum[]
  }

  /**
   * Problem.submission
   */
  export type Problem$submissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Problem.solvedBy
   */
  export type Problem$solvedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    where?: ProblemSolvedWhereInput
    orderBy?: ProblemSolvedOrderByWithRelationInput | ProblemSolvedOrderByWithRelationInput[]
    cursor?: ProblemSolvedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemSolvedScalarFieldEnum | ProblemSolvedScalarFieldEnum[]
  }

  /**
   * Problem.problemsPlaylists
   */
  export type Problem$problemsPlaylistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    where?: ProblemInPlaylistWhereInput
    orderBy?: ProblemInPlaylistOrderByWithRelationInput | ProblemInPlaylistOrderByWithRelationInput[]
    cursor?: ProblemInPlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemInPlaylistScalarFieldEnum | ProblemInPlaylistScalarFieldEnum[]
  }

  /**
   * Problem.reports
   */
  export type Problem$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    where?: ProblemReportWhereInput
    orderBy?: ProblemReportOrderByWithRelationInput | ProblemReportOrderByWithRelationInput[]
    cursor?: ProblemReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemReportScalarFieldEnum | ProblemReportScalarFieldEnum[]
  }

  /**
   * Problem.discussions
   */
  export type Problem$discussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    where?: ProblemDiscussionWhereInput
    orderBy?: ProblemDiscussionOrderByWithRelationInput | ProblemDiscussionOrderByWithRelationInput[]
    cursor?: ProblemDiscussionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemDiscussionScalarFieldEnum | ProblemDiscussionScalarFieldEnum[]
  }

  /**
   * Problem without action
   */
  export type ProblemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
  }


  /**
   * Model ProblemReaction
   */

  export type AggregateProblemReaction = {
    _count: ProblemReactionCountAggregateOutputType | null
    _min: ProblemReactionMinAggregateOutputType | null
    _max: ProblemReactionMaxAggregateOutputType | null
  }

  export type ProblemReactionMinAggregateOutputType = {
    id: string | null
    problemId: string | null
    userId: string | null
    isLike: boolean | null
  }

  export type ProblemReactionMaxAggregateOutputType = {
    id: string | null
    problemId: string | null
    userId: string | null
    isLike: boolean | null
  }

  export type ProblemReactionCountAggregateOutputType = {
    id: number
    problemId: number
    userId: number
    isLike: number
    _all: number
  }


  export type ProblemReactionMinAggregateInputType = {
    id?: true
    problemId?: true
    userId?: true
    isLike?: true
  }

  export type ProblemReactionMaxAggregateInputType = {
    id?: true
    problemId?: true
    userId?: true
    isLike?: true
  }

  export type ProblemReactionCountAggregateInputType = {
    id?: true
    problemId?: true
    userId?: true
    isLike?: true
    _all?: true
  }

  export type ProblemReactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemReaction to aggregate.
     */
    where?: ProblemReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemReactions to fetch.
     */
    orderBy?: ProblemReactionOrderByWithRelationInput | ProblemReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemReactions
    **/
    _count?: true | ProblemReactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemReactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemReactionMaxAggregateInputType
  }

  export type GetProblemReactionAggregateType<T extends ProblemReactionAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemReaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemReaction[P]>
      : GetScalarType<T[P], AggregateProblemReaction[P]>
  }




  export type ProblemReactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemReactionWhereInput
    orderBy?: ProblemReactionOrderByWithAggregationInput | ProblemReactionOrderByWithAggregationInput[]
    by: ProblemReactionScalarFieldEnum[] | ProblemReactionScalarFieldEnum
    having?: ProblemReactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemReactionCountAggregateInputType | true
    _min?: ProblemReactionMinAggregateInputType
    _max?: ProblemReactionMaxAggregateInputType
  }

  export type ProblemReactionGroupByOutputType = {
    id: string
    problemId: string
    userId: string
    isLike: boolean
    _count: ProblemReactionCountAggregateOutputType | null
    _min: ProblemReactionMinAggregateOutputType | null
    _max: ProblemReactionMaxAggregateOutputType | null
  }

  type GetProblemReactionGroupByPayload<T extends ProblemReactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemReactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemReactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemReactionGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemReactionGroupByOutputType[P]>
        }
      >
    >


  export type ProblemReactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    userId?: boolean
    isLike?: boolean
  }, ExtArgs["result"]["problemReaction"]>

  export type ProblemReactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    userId?: boolean
    isLike?: boolean
  }, ExtArgs["result"]["problemReaction"]>

  export type ProblemReactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    userId?: boolean
    isLike?: boolean
  }, ExtArgs["result"]["problemReaction"]>

  export type ProblemReactionSelectScalar = {
    id?: boolean
    problemId?: boolean
    userId?: boolean
    isLike?: boolean
  }

  export type ProblemReactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "problemId" | "userId" | "isLike", ExtArgs["result"]["problemReaction"]>

  export type $ProblemReactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProblemReaction"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      problemId: string
      userId: string
      isLike: boolean
    }, ExtArgs["result"]["problemReaction"]>
    composites: {}
  }

  type ProblemReactionGetPayload<S extends boolean | null | undefined | ProblemReactionDefaultArgs> = $Result.GetResult<Prisma.$ProblemReactionPayload, S>

  type ProblemReactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemReactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemReactionCountAggregateInputType | true
    }

  export interface ProblemReactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemReaction'], meta: { name: 'ProblemReaction' } }
    /**
     * Find zero or one ProblemReaction that matches the filter.
     * @param {ProblemReactionFindUniqueArgs} args - Arguments to find a ProblemReaction
     * @example
     * // Get one ProblemReaction
     * const problemReaction = await prisma.problemReaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemReactionFindUniqueArgs>(args: SelectSubset<T, ProblemReactionFindUniqueArgs<ExtArgs>>): Prisma__ProblemReactionClient<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProblemReaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemReactionFindUniqueOrThrowArgs} args - Arguments to find a ProblemReaction
     * @example
     * // Get one ProblemReaction
     * const problemReaction = await prisma.problemReaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemReactionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemReactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemReactionClient<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemReaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReactionFindFirstArgs} args - Arguments to find a ProblemReaction
     * @example
     * // Get one ProblemReaction
     * const problemReaction = await prisma.problemReaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemReactionFindFirstArgs>(args?: SelectSubset<T, ProblemReactionFindFirstArgs<ExtArgs>>): Prisma__ProblemReactionClient<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemReaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReactionFindFirstOrThrowArgs} args - Arguments to find a ProblemReaction
     * @example
     * // Get one ProblemReaction
     * const problemReaction = await prisma.problemReaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemReactionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemReactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemReactionClient<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProblemReactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemReactions
     * const problemReactions = await prisma.problemReaction.findMany()
     * 
     * // Get first 10 ProblemReactions
     * const problemReactions = await prisma.problemReaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemReactionWithIdOnly = await prisma.problemReaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemReactionFindManyArgs>(args?: SelectSubset<T, ProblemReactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProblemReaction.
     * @param {ProblemReactionCreateArgs} args - Arguments to create a ProblemReaction.
     * @example
     * // Create one ProblemReaction
     * const ProblemReaction = await prisma.problemReaction.create({
     *   data: {
     *     // ... data to create a ProblemReaction
     *   }
     * })
     * 
     */
    create<T extends ProblemReactionCreateArgs>(args: SelectSubset<T, ProblemReactionCreateArgs<ExtArgs>>): Prisma__ProblemReactionClient<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProblemReactions.
     * @param {ProblemReactionCreateManyArgs} args - Arguments to create many ProblemReactions.
     * @example
     * // Create many ProblemReactions
     * const problemReaction = await prisma.problemReaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemReactionCreateManyArgs>(args?: SelectSubset<T, ProblemReactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProblemReactions and returns the data saved in the database.
     * @param {ProblemReactionCreateManyAndReturnArgs} args - Arguments to create many ProblemReactions.
     * @example
     * // Create many ProblemReactions
     * const problemReaction = await prisma.problemReaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProblemReactions and only return the `id`
     * const problemReactionWithIdOnly = await prisma.problemReaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemReactionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemReactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProblemReaction.
     * @param {ProblemReactionDeleteArgs} args - Arguments to delete one ProblemReaction.
     * @example
     * // Delete one ProblemReaction
     * const ProblemReaction = await prisma.problemReaction.delete({
     *   where: {
     *     // ... filter to delete one ProblemReaction
     *   }
     * })
     * 
     */
    delete<T extends ProblemReactionDeleteArgs>(args: SelectSubset<T, ProblemReactionDeleteArgs<ExtArgs>>): Prisma__ProblemReactionClient<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProblemReaction.
     * @param {ProblemReactionUpdateArgs} args - Arguments to update one ProblemReaction.
     * @example
     * // Update one ProblemReaction
     * const problemReaction = await prisma.problemReaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemReactionUpdateArgs>(args: SelectSubset<T, ProblemReactionUpdateArgs<ExtArgs>>): Prisma__ProblemReactionClient<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProblemReactions.
     * @param {ProblemReactionDeleteManyArgs} args - Arguments to filter ProblemReactions to delete.
     * @example
     * // Delete a few ProblemReactions
     * const { count } = await prisma.problemReaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemReactionDeleteManyArgs>(args?: SelectSubset<T, ProblemReactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemReactions
     * const problemReaction = await prisma.problemReaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemReactionUpdateManyArgs>(args: SelectSubset<T, ProblemReactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemReactions and returns the data updated in the database.
     * @param {ProblemReactionUpdateManyAndReturnArgs} args - Arguments to update many ProblemReactions.
     * @example
     * // Update many ProblemReactions
     * const problemReaction = await prisma.problemReaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProblemReactions and only return the `id`
     * const problemReactionWithIdOnly = await prisma.problemReaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemReactionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemReactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProblemReaction.
     * @param {ProblemReactionUpsertArgs} args - Arguments to update or create a ProblemReaction.
     * @example
     * // Update or create a ProblemReaction
     * const problemReaction = await prisma.problemReaction.upsert({
     *   create: {
     *     // ... data to create a ProblemReaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemReaction we want to update
     *   }
     * })
     */
    upsert<T extends ProblemReactionUpsertArgs>(args: SelectSubset<T, ProblemReactionUpsertArgs<ExtArgs>>): Prisma__ProblemReactionClient<$Result.GetResult<Prisma.$ProblemReactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProblemReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReactionCountArgs} args - Arguments to filter ProblemReactions to count.
     * @example
     * // Count the number of ProblemReactions
     * const count = await prisma.problemReaction.count({
     *   where: {
     *     // ... the filter for the ProblemReactions we want to count
     *   }
     * })
    **/
    count<T extends ProblemReactionCountArgs>(
      args?: Subset<T, ProblemReactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemReactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemReactionAggregateArgs>(args: Subset<T, ProblemReactionAggregateArgs>): Prisma.PrismaPromise<GetProblemReactionAggregateType<T>>

    /**
     * Group by ProblemReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemReactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemReactionGroupByArgs['orderBy'] }
        : { orderBy?: ProblemReactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemReactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProblemReaction model
   */
  readonly fields: ProblemReactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemReaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemReactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProblemReaction model
   */
  interface ProblemReactionFieldRefs {
    readonly id: FieldRef<"ProblemReaction", 'String'>
    readonly problemId: FieldRef<"ProblemReaction", 'String'>
    readonly userId: FieldRef<"ProblemReaction", 'String'>
    readonly isLike: FieldRef<"ProblemReaction", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ProblemReaction findUnique
   */
  export type ProblemReactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * Filter, which ProblemReaction to fetch.
     */
    where: ProblemReactionWhereUniqueInput
  }

  /**
   * ProblemReaction findUniqueOrThrow
   */
  export type ProblemReactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * Filter, which ProblemReaction to fetch.
     */
    where: ProblemReactionWhereUniqueInput
  }

  /**
   * ProblemReaction findFirst
   */
  export type ProblemReactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * Filter, which ProblemReaction to fetch.
     */
    where?: ProblemReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemReactions to fetch.
     */
    orderBy?: ProblemReactionOrderByWithRelationInput | ProblemReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemReactions.
     */
    cursor?: ProblemReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemReactions.
     */
    distinct?: ProblemReactionScalarFieldEnum | ProblemReactionScalarFieldEnum[]
  }

  /**
   * ProblemReaction findFirstOrThrow
   */
  export type ProblemReactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * Filter, which ProblemReaction to fetch.
     */
    where?: ProblemReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemReactions to fetch.
     */
    orderBy?: ProblemReactionOrderByWithRelationInput | ProblemReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemReactions.
     */
    cursor?: ProblemReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemReactions.
     */
    distinct?: ProblemReactionScalarFieldEnum | ProblemReactionScalarFieldEnum[]
  }

  /**
   * ProblemReaction findMany
   */
  export type ProblemReactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * Filter, which ProblemReactions to fetch.
     */
    where?: ProblemReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemReactions to fetch.
     */
    orderBy?: ProblemReactionOrderByWithRelationInput | ProblemReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemReactions.
     */
    cursor?: ProblemReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemReactions.
     */
    skip?: number
    distinct?: ProblemReactionScalarFieldEnum | ProblemReactionScalarFieldEnum[]
  }

  /**
   * ProblemReaction create
   */
  export type ProblemReactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * The data needed to create a ProblemReaction.
     */
    data: XOR<ProblemReactionCreateInput, ProblemReactionUncheckedCreateInput>
  }

  /**
   * ProblemReaction createMany
   */
  export type ProblemReactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProblemReactions.
     */
    data: ProblemReactionCreateManyInput | ProblemReactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProblemReaction createManyAndReturn
   */
  export type ProblemReactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * The data used to create many ProblemReactions.
     */
    data: ProblemReactionCreateManyInput | ProblemReactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProblemReaction update
   */
  export type ProblemReactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * The data needed to update a ProblemReaction.
     */
    data: XOR<ProblemReactionUpdateInput, ProblemReactionUncheckedUpdateInput>
    /**
     * Choose, which ProblemReaction to update.
     */
    where: ProblemReactionWhereUniqueInput
  }

  /**
   * ProblemReaction updateMany
   */
  export type ProblemReactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProblemReactions.
     */
    data: XOR<ProblemReactionUpdateManyMutationInput, ProblemReactionUncheckedUpdateManyInput>
    /**
     * Filter which ProblemReactions to update
     */
    where?: ProblemReactionWhereInput
    /**
     * Limit how many ProblemReactions to update.
     */
    limit?: number
  }

  /**
   * ProblemReaction updateManyAndReturn
   */
  export type ProblemReactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * The data used to update ProblemReactions.
     */
    data: XOR<ProblemReactionUpdateManyMutationInput, ProblemReactionUncheckedUpdateManyInput>
    /**
     * Filter which ProblemReactions to update
     */
    where?: ProblemReactionWhereInput
    /**
     * Limit how many ProblemReactions to update.
     */
    limit?: number
  }

  /**
   * ProblemReaction upsert
   */
  export type ProblemReactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * The filter to search for the ProblemReaction to update in case it exists.
     */
    where: ProblemReactionWhereUniqueInput
    /**
     * In case the ProblemReaction found by the `where` argument doesn't exist, create a new ProblemReaction with this data.
     */
    create: XOR<ProblemReactionCreateInput, ProblemReactionUncheckedCreateInput>
    /**
     * In case the ProblemReaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemReactionUpdateInput, ProblemReactionUncheckedUpdateInput>
  }

  /**
   * ProblemReaction delete
   */
  export type ProblemReactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
    /**
     * Filter which ProblemReaction to delete.
     */
    where: ProblemReactionWhereUniqueInput
  }

  /**
   * ProblemReaction deleteMany
   */
  export type ProblemReactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemReactions to delete
     */
    where?: ProblemReactionWhereInput
    /**
     * Limit how many ProblemReactions to delete.
     */
    limit?: number
  }

  /**
   * ProblemReaction without action
   */
  export type ProblemReactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReaction
     */
    select?: ProblemReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReaction
     */
    omit?: ProblemReactionOmit<ExtArgs> | null
  }


  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    problemId: string | null
    sourceCode: string | null
    language: string | null
    stdin: string | null
    stdout: string | null
    stderr: string | null
    compileOutput: string | null
    status: string | null
    memory: string | null
    time: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubmissionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    problemId: string | null
    sourceCode: string | null
    language: string | null
    stdin: string | null
    stdout: string | null
    stderr: string | null
    compileOutput: string | null
    status: string | null
    memory: string | null
    time: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubmissionCountAggregateOutputType = {
    id: number
    userId: number
    problemId: number
    sourceCode: number
    language: number
    stdin: number
    stdout: number
    stderr: number
    compileOutput: number
    status: number
    memory: number
    time: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubmissionMinAggregateInputType = {
    id?: true
    userId?: true
    problemId?: true
    sourceCode?: true
    language?: true
    stdin?: true
    stdout?: true
    stderr?: true
    compileOutput?: true
    status?: true
    memory?: true
    time?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubmissionMaxAggregateInputType = {
    id?: true
    userId?: true
    problemId?: true
    sourceCode?: true
    language?: true
    stdin?: true
    stdout?: true
    stderr?: true
    compileOutput?: true
    status?: true
    memory?: true
    time?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubmissionCountAggregateInputType = {
    id?: true
    userId?: true
    problemId?: true
    sourceCode?: true
    language?: true
    stdin?: true
    stdout?: true
    stderr?: true
    compileOutput?: true
    status?: true
    memory?: true
    time?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    id: string
    userId: string
    problemId: string
    sourceCode: string
    language: string
    stdin: string | null
    stdout: string | null
    stderr: string | null
    compileOutput: string | null
    status: string
    memory: string | null
    time: string | null
    createdAt: Date
    updatedAt: Date
    _count: SubmissionCountAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    problemId?: boolean
    sourceCode?: boolean
    language?: boolean
    stdin?: boolean
    stdout?: boolean
    stderr?: boolean
    compileOutput?: boolean
    status?: boolean
    memory?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    testCases?: boolean | Submission$testCasesArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    problemId?: boolean
    sourceCode?: boolean
    language?: boolean
    stdin?: boolean
    stdout?: boolean
    stderr?: boolean
    compileOutput?: boolean
    status?: boolean
    memory?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    problemId?: boolean
    sourceCode?: boolean
    language?: boolean
    stdin?: boolean
    stdout?: boolean
    stderr?: boolean
    compileOutput?: boolean
    status?: boolean
    memory?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    id?: boolean
    userId?: boolean
    problemId?: boolean
    sourceCode?: boolean
    language?: boolean
    stdin?: boolean
    stdout?: boolean
    stderr?: boolean
    compileOutput?: boolean
    status?: boolean
    memory?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "problemId" | "sourceCode" | "language" | "stdin" | "stdout" | "stderr" | "compileOutput" | "status" | "memory" | "time" | "createdAt" | "updatedAt", ExtArgs["result"]["submission"]>
  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    testCases?: boolean | Submission$testCasesArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }

  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      problem: Prisma.$ProblemPayload<ExtArgs>
      testCases: Prisma.$TestCaseResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      problemId: string
      sourceCode: string
      language: string
      stdin: string | null
      stdout: string | null
      stderr: string | null
      compileOutput: string | null
      status: string
      memory: string | null
      time: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionFindUniqueArgs>(args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionFindFirstArgs>(args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionWithIdOnly = await prisma.submission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionFindManyArgs>(args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends SubmissionCreateArgs>(args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCreateManyArgs>(args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissions and returns the data saved in the database.
     * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends SubmissionDeleteArgs>(args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionUpdateArgs>(args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionDeleteManyArgs>(args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionUpdateManyArgs>(args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions and returns the data updated in the database.
     * @param {SubmissionUpdateManyAndReturnArgs} args - Arguments to update many Submissions.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionUpsertArgs>(args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    problem<T extends ProblemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDefaultArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    testCases<T extends Submission$testCasesArgs<ExtArgs> = {}>(args?: Subset<T, Submission$testCasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submission model
   */
  interface SubmissionFieldRefs {
    readonly id: FieldRef<"Submission", 'String'>
    readonly userId: FieldRef<"Submission", 'String'>
    readonly problemId: FieldRef<"Submission", 'String'>
    readonly sourceCode: FieldRef<"Submission", 'String'>
    readonly language: FieldRef<"Submission", 'String'>
    readonly stdin: FieldRef<"Submission", 'String'>
    readonly stdout: FieldRef<"Submission", 'String'>
    readonly stderr: FieldRef<"Submission", 'String'>
    readonly compileOutput: FieldRef<"Submission", 'String'>
    readonly status: FieldRef<"Submission", 'String'>
    readonly memory: FieldRef<"Submission", 'String'>
    readonly time: FieldRef<"Submission", 'String'>
    readonly createdAt: FieldRef<"Submission", 'DateTime'>
    readonly updatedAt: FieldRef<"Submission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }

  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Submission createManyAndReturn
   */
  export type SubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
  }

  /**
   * Submission updateManyAndReturn
   */
  export type SubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }

  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to delete.
     */
    limit?: number
  }

  /**
   * Submission.testCases
   */
  export type Submission$testCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    where?: TestCaseResultWhereInput
    orderBy?: TestCaseResultOrderByWithRelationInput | TestCaseResultOrderByWithRelationInput[]
    cursor?: TestCaseResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestCaseResultScalarFieldEnum | TestCaseResultScalarFieldEnum[]
  }

  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
  }


  /**
   * Model TestCaseResult
   */

  export type AggregateTestCaseResult = {
    _count: TestCaseResultCountAggregateOutputType | null
    _avg: TestCaseResultAvgAggregateOutputType | null
    _sum: TestCaseResultSumAggregateOutputType | null
    _min: TestCaseResultMinAggregateOutputType | null
    _max: TestCaseResultMaxAggregateOutputType | null
  }

  export type TestCaseResultAvgAggregateOutputType = {
    testCase: number | null
  }

  export type TestCaseResultSumAggregateOutputType = {
    testCase: number | null
  }

  export type TestCaseResultMinAggregateOutputType = {
    id: string | null
    submissionId: string | null
    testCase: number | null
    passed: boolean | null
    stdout: string | null
    expected: string | null
    stderr: string | null
    compileOutput: string | null
    status: string | null
    memory: string | null
    time: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCaseResultMaxAggregateOutputType = {
    id: string | null
    submissionId: string | null
    testCase: number | null
    passed: boolean | null
    stdout: string | null
    expected: string | null
    stderr: string | null
    compileOutput: string | null
    status: string | null
    memory: string | null
    time: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TestCaseResultCountAggregateOutputType = {
    id: number
    submissionId: number
    testCase: number
    passed: number
    stdout: number
    expected: number
    stderr: number
    compileOutput: number
    status: number
    memory: number
    time: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TestCaseResultAvgAggregateInputType = {
    testCase?: true
  }

  export type TestCaseResultSumAggregateInputType = {
    testCase?: true
  }

  export type TestCaseResultMinAggregateInputType = {
    id?: true
    submissionId?: true
    testCase?: true
    passed?: true
    stdout?: true
    expected?: true
    stderr?: true
    compileOutput?: true
    status?: true
    memory?: true
    time?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCaseResultMaxAggregateInputType = {
    id?: true
    submissionId?: true
    testCase?: true
    passed?: true
    stdout?: true
    expected?: true
    stderr?: true
    compileOutput?: true
    status?: true
    memory?: true
    time?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TestCaseResultCountAggregateInputType = {
    id?: true
    submissionId?: true
    testCase?: true
    passed?: true
    stdout?: true
    expected?: true
    stderr?: true
    compileOutput?: true
    status?: true
    memory?: true
    time?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TestCaseResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCaseResult to aggregate.
     */
    where?: TestCaseResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseResults to fetch.
     */
    orderBy?: TestCaseResultOrderByWithRelationInput | TestCaseResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestCaseResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TestCaseResults
    **/
    _count?: true | TestCaseResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestCaseResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestCaseResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestCaseResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestCaseResultMaxAggregateInputType
  }

  export type GetTestCaseResultAggregateType<T extends TestCaseResultAggregateArgs> = {
        [P in keyof T & keyof AggregateTestCaseResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestCaseResult[P]>
      : GetScalarType<T[P], AggregateTestCaseResult[P]>
  }




  export type TestCaseResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestCaseResultWhereInput
    orderBy?: TestCaseResultOrderByWithAggregationInput | TestCaseResultOrderByWithAggregationInput[]
    by: TestCaseResultScalarFieldEnum[] | TestCaseResultScalarFieldEnum
    having?: TestCaseResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCaseResultCountAggregateInputType | true
    _avg?: TestCaseResultAvgAggregateInputType
    _sum?: TestCaseResultSumAggregateInputType
    _min?: TestCaseResultMinAggregateInputType
    _max?: TestCaseResultMaxAggregateInputType
  }

  export type TestCaseResultGroupByOutputType = {
    id: string
    submissionId: string
    testCase: number
    passed: boolean
    stdout: string | null
    expected: string
    stderr: string | null
    compileOutput: string | null
    status: string
    memory: string | null
    time: string | null
    createdAt: Date
    updatedAt: Date
    _count: TestCaseResultCountAggregateOutputType | null
    _avg: TestCaseResultAvgAggregateOutputType | null
    _sum: TestCaseResultSumAggregateOutputType | null
    _min: TestCaseResultMinAggregateOutputType | null
    _max: TestCaseResultMaxAggregateOutputType | null
  }

  type GetTestCaseResultGroupByPayload<T extends TestCaseResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestCaseResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestCaseResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestCaseResultGroupByOutputType[P]>
            : GetScalarType<T[P], TestCaseResultGroupByOutputType[P]>
        }
      >
    >


  export type TestCaseResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    submissionId?: boolean
    testCase?: boolean
    passed?: boolean
    stdout?: boolean
    expected?: boolean
    stderr?: boolean
    compileOutput?: boolean
    status?: boolean
    memory?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCaseResult"]>

  export type TestCaseResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    submissionId?: boolean
    testCase?: boolean
    passed?: boolean
    stdout?: boolean
    expected?: boolean
    stderr?: boolean
    compileOutput?: boolean
    status?: boolean
    memory?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCaseResult"]>

  export type TestCaseResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    submissionId?: boolean
    testCase?: boolean
    passed?: boolean
    stdout?: boolean
    expected?: boolean
    stderr?: boolean
    compileOutput?: boolean
    status?: boolean
    memory?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testCaseResult"]>

  export type TestCaseResultSelectScalar = {
    id?: boolean
    submissionId?: boolean
    testCase?: boolean
    passed?: boolean
    stdout?: boolean
    expected?: boolean
    stderr?: boolean
    compileOutput?: boolean
    status?: boolean
    memory?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TestCaseResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "submissionId" | "testCase" | "passed" | "stdout" | "expected" | "stderr" | "compileOutput" | "status" | "memory" | "time" | "createdAt" | "updatedAt", ExtArgs["result"]["testCaseResult"]>
  export type TestCaseResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }
  export type TestCaseResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }
  export type TestCaseResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }

  export type $TestCaseResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TestCaseResult"
    objects: {
      submission: Prisma.$SubmissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      submissionId: string
      testCase: number
      passed: boolean
      stdout: string | null
      expected: string
      stderr: string | null
      compileOutput: string | null
      status: string
      memory: string | null
      time: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["testCaseResult"]>
    composites: {}
  }

  type TestCaseResultGetPayload<S extends boolean | null | undefined | TestCaseResultDefaultArgs> = $Result.GetResult<Prisma.$TestCaseResultPayload, S>

  type TestCaseResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestCaseResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestCaseResultCountAggregateInputType | true
    }

  export interface TestCaseResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TestCaseResult'], meta: { name: 'TestCaseResult' } }
    /**
     * Find zero or one TestCaseResult that matches the filter.
     * @param {TestCaseResultFindUniqueArgs} args - Arguments to find a TestCaseResult
     * @example
     * // Get one TestCaseResult
     * const testCaseResult = await prisma.testCaseResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestCaseResultFindUniqueArgs>(args: SelectSubset<T, TestCaseResultFindUniqueArgs<ExtArgs>>): Prisma__TestCaseResultClient<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TestCaseResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestCaseResultFindUniqueOrThrowArgs} args - Arguments to find a TestCaseResult
     * @example
     * // Get one TestCaseResult
     * const testCaseResult = await prisma.testCaseResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestCaseResultFindUniqueOrThrowArgs>(args: SelectSubset<T, TestCaseResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestCaseResultClient<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestCaseResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultFindFirstArgs} args - Arguments to find a TestCaseResult
     * @example
     * // Get one TestCaseResult
     * const testCaseResult = await prisma.testCaseResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestCaseResultFindFirstArgs>(args?: SelectSubset<T, TestCaseResultFindFirstArgs<ExtArgs>>): Prisma__TestCaseResultClient<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TestCaseResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultFindFirstOrThrowArgs} args - Arguments to find a TestCaseResult
     * @example
     * // Get one TestCaseResult
     * const testCaseResult = await prisma.testCaseResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestCaseResultFindFirstOrThrowArgs>(args?: SelectSubset<T, TestCaseResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestCaseResultClient<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TestCaseResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestCaseResults
     * const testCaseResults = await prisma.testCaseResult.findMany()
     * 
     * // Get first 10 TestCaseResults
     * const testCaseResults = await prisma.testCaseResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testCaseResultWithIdOnly = await prisma.testCaseResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestCaseResultFindManyArgs>(args?: SelectSubset<T, TestCaseResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TestCaseResult.
     * @param {TestCaseResultCreateArgs} args - Arguments to create a TestCaseResult.
     * @example
     * // Create one TestCaseResult
     * const TestCaseResult = await prisma.testCaseResult.create({
     *   data: {
     *     // ... data to create a TestCaseResult
     *   }
     * })
     * 
     */
    create<T extends TestCaseResultCreateArgs>(args: SelectSubset<T, TestCaseResultCreateArgs<ExtArgs>>): Prisma__TestCaseResultClient<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TestCaseResults.
     * @param {TestCaseResultCreateManyArgs} args - Arguments to create many TestCaseResults.
     * @example
     * // Create many TestCaseResults
     * const testCaseResult = await prisma.testCaseResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestCaseResultCreateManyArgs>(args?: SelectSubset<T, TestCaseResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TestCaseResults and returns the data saved in the database.
     * @param {TestCaseResultCreateManyAndReturnArgs} args - Arguments to create many TestCaseResults.
     * @example
     * // Create many TestCaseResults
     * const testCaseResult = await prisma.testCaseResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TestCaseResults and only return the `id`
     * const testCaseResultWithIdOnly = await prisma.testCaseResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestCaseResultCreateManyAndReturnArgs>(args?: SelectSubset<T, TestCaseResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TestCaseResult.
     * @param {TestCaseResultDeleteArgs} args - Arguments to delete one TestCaseResult.
     * @example
     * // Delete one TestCaseResult
     * const TestCaseResult = await prisma.testCaseResult.delete({
     *   where: {
     *     // ... filter to delete one TestCaseResult
     *   }
     * })
     * 
     */
    delete<T extends TestCaseResultDeleteArgs>(args: SelectSubset<T, TestCaseResultDeleteArgs<ExtArgs>>): Prisma__TestCaseResultClient<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TestCaseResult.
     * @param {TestCaseResultUpdateArgs} args - Arguments to update one TestCaseResult.
     * @example
     * // Update one TestCaseResult
     * const testCaseResult = await prisma.testCaseResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestCaseResultUpdateArgs>(args: SelectSubset<T, TestCaseResultUpdateArgs<ExtArgs>>): Prisma__TestCaseResultClient<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TestCaseResults.
     * @param {TestCaseResultDeleteManyArgs} args - Arguments to filter TestCaseResults to delete.
     * @example
     * // Delete a few TestCaseResults
     * const { count } = await prisma.testCaseResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestCaseResultDeleteManyArgs>(args?: SelectSubset<T, TestCaseResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestCaseResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestCaseResults
     * const testCaseResult = await prisma.testCaseResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestCaseResultUpdateManyArgs>(args: SelectSubset<T, TestCaseResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestCaseResults and returns the data updated in the database.
     * @param {TestCaseResultUpdateManyAndReturnArgs} args - Arguments to update many TestCaseResults.
     * @example
     * // Update many TestCaseResults
     * const testCaseResult = await prisma.testCaseResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TestCaseResults and only return the `id`
     * const testCaseResultWithIdOnly = await prisma.testCaseResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TestCaseResultUpdateManyAndReturnArgs>(args: SelectSubset<T, TestCaseResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TestCaseResult.
     * @param {TestCaseResultUpsertArgs} args - Arguments to update or create a TestCaseResult.
     * @example
     * // Update or create a TestCaseResult
     * const testCaseResult = await prisma.testCaseResult.upsert({
     *   create: {
     *     // ... data to create a TestCaseResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestCaseResult we want to update
     *   }
     * })
     */
    upsert<T extends TestCaseResultUpsertArgs>(args: SelectSubset<T, TestCaseResultUpsertArgs<ExtArgs>>): Prisma__TestCaseResultClient<$Result.GetResult<Prisma.$TestCaseResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TestCaseResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultCountArgs} args - Arguments to filter TestCaseResults to count.
     * @example
     * // Count the number of TestCaseResults
     * const count = await prisma.testCaseResult.count({
     *   where: {
     *     // ... the filter for the TestCaseResults we want to count
     *   }
     * })
    **/
    count<T extends TestCaseResultCountArgs>(
      args?: Subset<T, TestCaseResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCaseResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestCaseResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestCaseResultAggregateArgs>(args: Subset<T, TestCaseResultAggregateArgs>): Prisma.PrismaPromise<GetTestCaseResultAggregateType<T>>

    /**
     * Group by TestCaseResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCaseResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestCaseResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestCaseResultGroupByArgs['orderBy'] }
        : { orderBy?: TestCaseResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestCaseResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestCaseResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TestCaseResult model
   */
  readonly fields: TestCaseResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TestCaseResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestCaseResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submission<T extends SubmissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubmissionDefaultArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TestCaseResult model
   */
  interface TestCaseResultFieldRefs {
    readonly id: FieldRef<"TestCaseResult", 'String'>
    readonly submissionId: FieldRef<"TestCaseResult", 'String'>
    readonly testCase: FieldRef<"TestCaseResult", 'Int'>
    readonly passed: FieldRef<"TestCaseResult", 'Boolean'>
    readonly stdout: FieldRef<"TestCaseResult", 'String'>
    readonly expected: FieldRef<"TestCaseResult", 'String'>
    readonly stderr: FieldRef<"TestCaseResult", 'String'>
    readonly compileOutput: FieldRef<"TestCaseResult", 'String'>
    readonly status: FieldRef<"TestCaseResult", 'String'>
    readonly memory: FieldRef<"TestCaseResult", 'String'>
    readonly time: FieldRef<"TestCaseResult", 'String'>
    readonly createdAt: FieldRef<"TestCaseResult", 'DateTime'>
    readonly updatedAt: FieldRef<"TestCaseResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TestCaseResult findUnique
   */
  export type TestCaseResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResult to fetch.
     */
    where: TestCaseResultWhereUniqueInput
  }

  /**
   * TestCaseResult findUniqueOrThrow
   */
  export type TestCaseResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResult to fetch.
     */
    where: TestCaseResultWhereUniqueInput
  }

  /**
   * TestCaseResult findFirst
   */
  export type TestCaseResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResult to fetch.
     */
    where?: TestCaseResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseResults to fetch.
     */
    orderBy?: TestCaseResultOrderByWithRelationInput | TestCaseResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCaseResults.
     */
    cursor?: TestCaseResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCaseResults.
     */
    distinct?: TestCaseResultScalarFieldEnum | TestCaseResultScalarFieldEnum[]
  }

  /**
   * TestCaseResult findFirstOrThrow
   */
  export type TestCaseResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResult to fetch.
     */
    where?: TestCaseResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseResults to fetch.
     */
    orderBy?: TestCaseResultOrderByWithRelationInput | TestCaseResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TestCaseResults.
     */
    cursor?: TestCaseResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TestCaseResults.
     */
    distinct?: TestCaseResultScalarFieldEnum | TestCaseResultScalarFieldEnum[]
  }

  /**
   * TestCaseResult findMany
   */
  export type TestCaseResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    /**
     * Filter, which TestCaseResults to fetch.
     */
    where?: TestCaseResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TestCaseResults to fetch.
     */
    orderBy?: TestCaseResultOrderByWithRelationInput | TestCaseResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TestCaseResults.
     */
    cursor?: TestCaseResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TestCaseResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TestCaseResults.
     */
    skip?: number
    distinct?: TestCaseResultScalarFieldEnum | TestCaseResultScalarFieldEnum[]
  }

  /**
   * TestCaseResult create
   */
  export type TestCaseResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    /**
     * The data needed to create a TestCaseResult.
     */
    data: XOR<TestCaseResultCreateInput, TestCaseResultUncheckedCreateInput>
  }

  /**
   * TestCaseResult createMany
   */
  export type TestCaseResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TestCaseResults.
     */
    data: TestCaseResultCreateManyInput | TestCaseResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TestCaseResult createManyAndReturn
   */
  export type TestCaseResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * The data used to create many TestCaseResults.
     */
    data: TestCaseResultCreateManyInput | TestCaseResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TestCaseResult update
   */
  export type TestCaseResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    /**
     * The data needed to update a TestCaseResult.
     */
    data: XOR<TestCaseResultUpdateInput, TestCaseResultUncheckedUpdateInput>
    /**
     * Choose, which TestCaseResult to update.
     */
    where: TestCaseResultWhereUniqueInput
  }

  /**
   * TestCaseResult updateMany
   */
  export type TestCaseResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TestCaseResults.
     */
    data: XOR<TestCaseResultUpdateManyMutationInput, TestCaseResultUncheckedUpdateManyInput>
    /**
     * Filter which TestCaseResults to update
     */
    where?: TestCaseResultWhereInput
    /**
     * Limit how many TestCaseResults to update.
     */
    limit?: number
  }

  /**
   * TestCaseResult updateManyAndReturn
   */
  export type TestCaseResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * The data used to update TestCaseResults.
     */
    data: XOR<TestCaseResultUpdateManyMutationInput, TestCaseResultUncheckedUpdateManyInput>
    /**
     * Filter which TestCaseResults to update
     */
    where?: TestCaseResultWhereInput
    /**
     * Limit how many TestCaseResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TestCaseResult upsert
   */
  export type TestCaseResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    /**
     * The filter to search for the TestCaseResult to update in case it exists.
     */
    where: TestCaseResultWhereUniqueInput
    /**
     * In case the TestCaseResult found by the `where` argument doesn't exist, create a new TestCaseResult with this data.
     */
    create: XOR<TestCaseResultCreateInput, TestCaseResultUncheckedCreateInput>
    /**
     * In case the TestCaseResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestCaseResultUpdateInput, TestCaseResultUncheckedUpdateInput>
  }

  /**
   * TestCaseResult delete
   */
  export type TestCaseResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
    /**
     * Filter which TestCaseResult to delete.
     */
    where: TestCaseResultWhereUniqueInput
  }

  /**
   * TestCaseResult deleteMany
   */
  export type TestCaseResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TestCaseResults to delete
     */
    where?: TestCaseResultWhereInput
    /**
     * Limit how many TestCaseResults to delete.
     */
    limit?: number
  }

  /**
   * TestCaseResult without action
   */
  export type TestCaseResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCaseResult
     */
    select?: TestCaseResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TestCaseResult
     */
    omit?: TestCaseResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestCaseResultInclude<ExtArgs> | null
  }


  /**
   * Model ProblemSolved
   */

  export type AggregateProblemSolved = {
    _count: ProblemSolvedCountAggregateOutputType | null
    _min: ProblemSolvedMinAggregateOutputType | null
    _max: ProblemSolvedMaxAggregateOutputType | null
  }

  export type ProblemSolvedMinAggregateOutputType = {
    id: string | null
    userId: string | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemSolvedMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemSolvedCountAggregateOutputType = {
    id: number
    userId: number
    problemId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemSolvedMinAggregateInputType = {
    id?: true
    userId?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemSolvedMaxAggregateInputType = {
    id?: true
    userId?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemSolvedCountAggregateInputType = {
    id?: true
    userId?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemSolvedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemSolved to aggregate.
     */
    where?: ProblemSolvedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemSolveds to fetch.
     */
    orderBy?: ProblemSolvedOrderByWithRelationInput | ProblemSolvedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemSolvedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemSolveds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemSolveds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemSolveds
    **/
    _count?: true | ProblemSolvedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemSolvedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemSolvedMaxAggregateInputType
  }

  export type GetProblemSolvedAggregateType<T extends ProblemSolvedAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemSolved]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemSolved[P]>
      : GetScalarType<T[P], AggregateProblemSolved[P]>
  }




  export type ProblemSolvedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemSolvedWhereInput
    orderBy?: ProblemSolvedOrderByWithAggregationInput | ProblemSolvedOrderByWithAggregationInput[]
    by: ProblemSolvedScalarFieldEnum[] | ProblemSolvedScalarFieldEnum
    having?: ProblemSolvedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemSolvedCountAggregateInputType | true
    _min?: ProblemSolvedMinAggregateInputType
    _max?: ProblemSolvedMaxAggregateInputType
  }

  export type ProblemSolvedGroupByOutputType = {
    id: string
    userId: string
    problemId: string
    createdAt: Date
    updatedAt: Date
    _count: ProblemSolvedCountAggregateOutputType | null
    _min: ProblemSolvedMinAggregateOutputType | null
    _max: ProblemSolvedMaxAggregateOutputType | null
  }

  type GetProblemSolvedGroupByPayload<T extends ProblemSolvedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemSolvedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemSolvedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemSolvedGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemSolvedGroupByOutputType[P]>
        }
      >
    >


  export type ProblemSolvedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemSolved"]>

  export type ProblemSolvedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemSolved"]>

  export type ProblemSolvedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemSolved"]>

  export type ProblemSolvedSelectScalar = {
    id?: boolean
    userId?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemSolvedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "problemId" | "createdAt" | "updatedAt", ExtArgs["result"]["problemSolved"]>
  export type ProblemSolvedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }
  export type ProblemSolvedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }
  export type ProblemSolvedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }

  export type $ProblemSolvedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProblemSolved"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      problem: Prisma.$ProblemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      problemId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["problemSolved"]>
    composites: {}
  }

  type ProblemSolvedGetPayload<S extends boolean | null | undefined | ProblemSolvedDefaultArgs> = $Result.GetResult<Prisma.$ProblemSolvedPayload, S>

  type ProblemSolvedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemSolvedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemSolvedCountAggregateInputType | true
    }

  export interface ProblemSolvedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemSolved'], meta: { name: 'ProblemSolved' } }
    /**
     * Find zero or one ProblemSolved that matches the filter.
     * @param {ProblemSolvedFindUniqueArgs} args - Arguments to find a ProblemSolved
     * @example
     * // Get one ProblemSolved
     * const problemSolved = await prisma.problemSolved.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemSolvedFindUniqueArgs>(args: SelectSubset<T, ProblemSolvedFindUniqueArgs<ExtArgs>>): Prisma__ProblemSolvedClient<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProblemSolved that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemSolvedFindUniqueOrThrowArgs} args - Arguments to find a ProblemSolved
     * @example
     * // Get one ProblemSolved
     * const problemSolved = await prisma.problemSolved.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemSolvedFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemSolvedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemSolvedClient<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemSolved that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemSolvedFindFirstArgs} args - Arguments to find a ProblemSolved
     * @example
     * // Get one ProblemSolved
     * const problemSolved = await prisma.problemSolved.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemSolvedFindFirstArgs>(args?: SelectSubset<T, ProblemSolvedFindFirstArgs<ExtArgs>>): Prisma__ProblemSolvedClient<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemSolved that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemSolvedFindFirstOrThrowArgs} args - Arguments to find a ProblemSolved
     * @example
     * // Get one ProblemSolved
     * const problemSolved = await prisma.problemSolved.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemSolvedFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemSolvedFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemSolvedClient<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProblemSolveds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemSolvedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemSolveds
     * const problemSolveds = await prisma.problemSolved.findMany()
     * 
     * // Get first 10 ProblemSolveds
     * const problemSolveds = await prisma.problemSolved.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemSolvedWithIdOnly = await prisma.problemSolved.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemSolvedFindManyArgs>(args?: SelectSubset<T, ProblemSolvedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProblemSolved.
     * @param {ProblemSolvedCreateArgs} args - Arguments to create a ProblemSolved.
     * @example
     * // Create one ProblemSolved
     * const ProblemSolved = await prisma.problemSolved.create({
     *   data: {
     *     // ... data to create a ProblemSolved
     *   }
     * })
     * 
     */
    create<T extends ProblemSolvedCreateArgs>(args: SelectSubset<T, ProblemSolvedCreateArgs<ExtArgs>>): Prisma__ProblemSolvedClient<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProblemSolveds.
     * @param {ProblemSolvedCreateManyArgs} args - Arguments to create many ProblemSolveds.
     * @example
     * // Create many ProblemSolveds
     * const problemSolved = await prisma.problemSolved.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemSolvedCreateManyArgs>(args?: SelectSubset<T, ProblemSolvedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProblemSolveds and returns the data saved in the database.
     * @param {ProblemSolvedCreateManyAndReturnArgs} args - Arguments to create many ProblemSolveds.
     * @example
     * // Create many ProblemSolveds
     * const problemSolved = await prisma.problemSolved.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProblemSolveds and only return the `id`
     * const problemSolvedWithIdOnly = await prisma.problemSolved.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemSolvedCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemSolvedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProblemSolved.
     * @param {ProblemSolvedDeleteArgs} args - Arguments to delete one ProblemSolved.
     * @example
     * // Delete one ProblemSolved
     * const ProblemSolved = await prisma.problemSolved.delete({
     *   where: {
     *     // ... filter to delete one ProblemSolved
     *   }
     * })
     * 
     */
    delete<T extends ProblemSolvedDeleteArgs>(args: SelectSubset<T, ProblemSolvedDeleteArgs<ExtArgs>>): Prisma__ProblemSolvedClient<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProblemSolved.
     * @param {ProblemSolvedUpdateArgs} args - Arguments to update one ProblemSolved.
     * @example
     * // Update one ProblemSolved
     * const problemSolved = await prisma.problemSolved.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemSolvedUpdateArgs>(args: SelectSubset<T, ProblemSolvedUpdateArgs<ExtArgs>>): Prisma__ProblemSolvedClient<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProblemSolveds.
     * @param {ProblemSolvedDeleteManyArgs} args - Arguments to filter ProblemSolveds to delete.
     * @example
     * // Delete a few ProblemSolveds
     * const { count } = await prisma.problemSolved.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemSolvedDeleteManyArgs>(args?: SelectSubset<T, ProblemSolvedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemSolveds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemSolvedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemSolveds
     * const problemSolved = await prisma.problemSolved.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemSolvedUpdateManyArgs>(args: SelectSubset<T, ProblemSolvedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemSolveds and returns the data updated in the database.
     * @param {ProblemSolvedUpdateManyAndReturnArgs} args - Arguments to update many ProblemSolveds.
     * @example
     * // Update many ProblemSolveds
     * const problemSolved = await prisma.problemSolved.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProblemSolveds and only return the `id`
     * const problemSolvedWithIdOnly = await prisma.problemSolved.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemSolvedUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemSolvedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProblemSolved.
     * @param {ProblemSolvedUpsertArgs} args - Arguments to update or create a ProblemSolved.
     * @example
     * // Update or create a ProblemSolved
     * const problemSolved = await prisma.problemSolved.upsert({
     *   create: {
     *     // ... data to create a ProblemSolved
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemSolved we want to update
     *   }
     * })
     */
    upsert<T extends ProblemSolvedUpsertArgs>(args: SelectSubset<T, ProblemSolvedUpsertArgs<ExtArgs>>): Prisma__ProblemSolvedClient<$Result.GetResult<Prisma.$ProblemSolvedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProblemSolveds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemSolvedCountArgs} args - Arguments to filter ProblemSolveds to count.
     * @example
     * // Count the number of ProblemSolveds
     * const count = await prisma.problemSolved.count({
     *   where: {
     *     // ... the filter for the ProblemSolveds we want to count
     *   }
     * })
    **/
    count<T extends ProblemSolvedCountArgs>(
      args?: Subset<T, ProblemSolvedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemSolvedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemSolved.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemSolvedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemSolvedAggregateArgs>(args: Subset<T, ProblemSolvedAggregateArgs>): Prisma.PrismaPromise<GetProblemSolvedAggregateType<T>>

    /**
     * Group by ProblemSolved.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemSolvedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemSolvedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemSolvedGroupByArgs['orderBy'] }
        : { orderBy?: ProblemSolvedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemSolvedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemSolvedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProblemSolved model
   */
  readonly fields: ProblemSolvedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemSolved.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemSolvedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    problem<T extends ProblemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDefaultArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProblemSolved model
   */
  interface ProblemSolvedFieldRefs {
    readonly id: FieldRef<"ProblemSolved", 'String'>
    readonly userId: FieldRef<"ProblemSolved", 'String'>
    readonly problemId: FieldRef<"ProblemSolved", 'String'>
    readonly createdAt: FieldRef<"ProblemSolved", 'DateTime'>
    readonly updatedAt: FieldRef<"ProblemSolved", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProblemSolved findUnique
   */
  export type ProblemSolvedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    /**
     * Filter, which ProblemSolved to fetch.
     */
    where: ProblemSolvedWhereUniqueInput
  }

  /**
   * ProblemSolved findUniqueOrThrow
   */
  export type ProblemSolvedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    /**
     * Filter, which ProblemSolved to fetch.
     */
    where: ProblemSolvedWhereUniqueInput
  }

  /**
   * ProblemSolved findFirst
   */
  export type ProblemSolvedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    /**
     * Filter, which ProblemSolved to fetch.
     */
    where?: ProblemSolvedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemSolveds to fetch.
     */
    orderBy?: ProblemSolvedOrderByWithRelationInput | ProblemSolvedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemSolveds.
     */
    cursor?: ProblemSolvedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemSolveds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemSolveds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemSolveds.
     */
    distinct?: ProblemSolvedScalarFieldEnum | ProblemSolvedScalarFieldEnum[]
  }

  /**
   * ProblemSolved findFirstOrThrow
   */
  export type ProblemSolvedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    /**
     * Filter, which ProblemSolved to fetch.
     */
    where?: ProblemSolvedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemSolveds to fetch.
     */
    orderBy?: ProblemSolvedOrderByWithRelationInput | ProblemSolvedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemSolveds.
     */
    cursor?: ProblemSolvedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemSolveds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemSolveds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemSolveds.
     */
    distinct?: ProblemSolvedScalarFieldEnum | ProblemSolvedScalarFieldEnum[]
  }

  /**
   * ProblemSolved findMany
   */
  export type ProblemSolvedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    /**
     * Filter, which ProblemSolveds to fetch.
     */
    where?: ProblemSolvedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemSolveds to fetch.
     */
    orderBy?: ProblemSolvedOrderByWithRelationInput | ProblemSolvedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemSolveds.
     */
    cursor?: ProblemSolvedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemSolveds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemSolveds.
     */
    skip?: number
    distinct?: ProblemSolvedScalarFieldEnum | ProblemSolvedScalarFieldEnum[]
  }

  /**
   * ProblemSolved create
   */
  export type ProblemSolvedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    /**
     * The data needed to create a ProblemSolved.
     */
    data: XOR<ProblemSolvedCreateInput, ProblemSolvedUncheckedCreateInput>
  }

  /**
   * ProblemSolved createMany
   */
  export type ProblemSolvedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProblemSolveds.
     */
    data: ProblemSolvedCreateManyInput | ProblemSolvedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProblemSolved createManyAndReturn
   */
  export type ProblemSolvedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * The data used to create many ProblemSolveds.
     */
    data: ProblemSolvedCreateManyInput | ProblemSolvedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemSolved update
   */
  export type ProblemSolvedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    /**
     * The data needed to update a ProblemSolved.
     */
    data: XOR<ProblemSolvedUpdateInput, ProblemSolvedUncheckedUpdateInput>
    /**
     * Choose, which ProblemSolved to update.
     */
    where: ProblemSolvedWhereUniqueInput
  }

  /**
   * ProblemSolved updateMany
   */
  export type ProblemSolvedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProblemSolveds.
     */
    data: XOR<ProblemSolvedUpdateManyMutationInput, ProblemSolvedUncheckedUpdateManyInput>
    /**
     * Filter which ProblemSolveds to update
     */
    where?: ProblemSolvedWhereInput
    /**
     * Limit how many ProblemSolveds to update.
     */
    limit?: number
  }

  /**
   * ProblemSolved updateManyAndReturn
   */
  export type ProblemSolvedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * The data used to update ProblemSolveds.
     */
    data: XOR<ProblemSolvedUpdateManyMutationInput, ProblemSolvedUncheckedUpdateManyInput>
    /**
     * Filter which ProblemSolveds to update
     */
    where?: ProblemSolvedWhereInput
    /**
     * Limit how many ProblemSolveds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemSolved upsert
   */
  export type ProblemSolvedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    /**
     * The filter to search for the ProblemSolved to update in case it exists.
     */
    where: ProblemSolvedWhereUniqueInput
    /**
     * In case the ProblemSolved found by the `where` argument doesn't exist, create a new ProblemSolved with this data.
     */
    create: XOR<ProblemSolvedCreateInput, ProblemSolvedUncheckedCreateInput>
    /**
     * In case the ProblemSolved was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemSolvedUpdateInput, ProblemSolvedUncheckedUpdateInput>
  }

  /**
   * ProblemSolved delete
   */
  export type ProblemSolvedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
    /**
     * Filter which ProblemSolved to delete.
     */
    where: ProblemSolvedWhereUniqueInput
  }

  /**
   * ProblemSolved deleteMany
   */
  export type ProblemSolvedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemSolveds to delete
     */
    where?: ProblemSolvedWhereInput
    /**
     * Limit how many ProblemSolveds to delete.
     */
    limit?: number
  }

  /**
   * ProblemSolved without action
   */
  export type ProblemSolvedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemSolved
     */
    select?: ProblemSolvedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemSolved
     */
    omit?: ProblemSolvedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemSolvedInclude<ExtArgs> | null
  }


  /**
   * Model Playlist
   */

  export type AggregatePlaylist = {
    _count: PlaylistCountAggregateOutputType | null
    _avg: PlaylistAvgAggregateOutputType | null
    _sum: PlaylistSumAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  export type PlaylistAvgAggregateOutputType = {
    price: number | null
  }

  export type PlaylistSumAggregateOutputType = {
    price: number | null
  }

  export type PlaylistMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    isPaid: boolean | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    isPaid: boolean | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistCountAggregateOutputType = {
    id: number
    name: number
    description: number
    userId: number
    isPaid: number
    price: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlaylistAvgAggregateInputType = {
    price?: true
  }

  export type PlaylistSumAggregateInputType = {
    price?: true
  }

  export type PlaylistMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    isPaid?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    isPaid?: true
    price?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    isPaid?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlaylistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Playlist to aggregate.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Playlists
    **/
    _count?: true | PlaylistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaylistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaylistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistMaxAggregateInputType
  }

  export type GetPlaylistAggregateType<T extends PlaylistAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylist[P]>
      : GetScalarType<T[P], AggregatePlaylist[P]>
  }




  export type PlaylistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistWhereInput
    orderBy?: PlaylistOrderByWithAggregationInput | PlaylistOrderByWithAggregationInput[]
    by: PlaylistScalarFieldEnum[] | PlaylistScalarFieldEnum
    having?: PlaylistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistCountAggregateInputType | true
    _avg?: PlaylistAvgAggregateInputType
    _sum?: PlaylistSumAggregateInputType
    _min?: PlaylistMinAggregateInputType
    _max?: PlaylistMaxAggregateInputType
  }

  export type PlaylistGroupByOutputType = {
    id: string
    name: string
    description: string | null
    userId: string
    isPaid: boolean
    price: number | null
    createdAt: Date
    updatedAt: Date
    _count: PlaylistCountAggregateOutputType | null
    _avg: PlaylistAvgAggregateOutputType | null
    _sum: PlaylistSumAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  type GetPlaylistGroupByPayload<T extends PlaylistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaylistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
        }
      >
    >


  export type PlaylistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    isPaid?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problems?: boolean | Playlist$problemsArgs<ExtArgs>
    purchases?: boolean | Playlist$purchasesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | PlaylistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlist"]>

  export type PlaylistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    isPaid?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlist"]>

  export type PlaylistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    isPaid?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlist"]>

  export type PlaylistSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    isPaid?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlaylistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "userId" | "isPaid" | "price" | "createdAt" | "updatedAt", ExtArgs["result"]["playlist"]>
  export type PlaylistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problems?: boolean | Playlist$problemsArgs<ExtArgs>
    purchases?: boolean | Playlist$purchasesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | PlaylistCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlaylistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PlaylistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PlaylistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Playlist"
    objects: {
      problems: Prisma.$ProblemInPlaylistPayload<ExtArgs>[]
      purchases: Prisma.$PlaylistPurchasePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      userId: string
      isPaid: boolean
      price: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["playlist"]>
    composites: {}
  }

  type PlaylistGetPayload<S extends boolean | null | undefined | PlaylistDefaultArgs> = $Result.GetResult<Prisma.$PlaylistPayload, S>

  type PlaylistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlaylistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlaylistCountAggregateInputType | true
    }

  export interface PlaylistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Playlist'], meta: { name: 'Playlist' } }
    /**
     * Find zero or one Playlist that matches the filter.
     * @param {PlaylistFindUniqueArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlaylistFindUniqueArgs>(args: SelectSubset<T, PlaylistFindUniqueArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Playlist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlaylistFindUniqueOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlaylistFindUniqueOrThrowArgs>(args: SelectSubset<T, PlaylistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Playlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlaylistFindFirstArgs>(args?: SelectSubset<T, PlaylistFindFirstArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Playlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlaylistFindFirstOrThrowArgs>(args?: SelectSubset<T, PlaylistFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Playlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Playlists
     * const playlists = await prisma.playlist.findMany()
     * 
     * // Get first 10 Playlists
     * const playlists = await prisma.playlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistWithIdOnly = await prisma.playlist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlaylistFindManyArgs>(args?: SelectSubset<T, PlaylistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Playlist.
     * @param {PlaylistCreateArgs} args - Arguments to create a Playlist.
     * @example
     * // Create one Playlist
     * const Playlist = await prisma.playlist.create({
     *   data: {
     *     // ... data to create a Playlist
     *   }
     * })
     * 
     */
    create<T extends PlaylistCreateArgs>(args: SelectSubset<T, PlaylistCreateArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Playlists.
     * @param {PlaylistCreateManyArgs} args - Arguments to create many Playlists.
     * @example
     * // Create many Playlists
     * const playlist = await prisma.playlist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlaylistCreateManyArgs>(args?: SelectSubset<T, PlaylistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Playlists and returns the data saved in the database.
     * @param {PlaylistCreateManyAndReturnArgs} args - Arguments to create many Playlists.
     * @example
     * // Create many Playlists
     * const playlist = await prisma.playlist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Playlists and only return the `id`
     * const playlistWithIdOnly = await prisma.playlist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlaylistCreateManyAndReturnArgs>(args?: SelectSubset<T, PlaylistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Playlist.
     * @param {PlaylistDeleteArgs} args - Arguments to delete one Playlist.
     * @example
     * // Delete one Playlist
     * const Playlist = await prisma.playlist.delete({
     *   where: {
     *     // ... filter to delete one Playlist
     *   }
     * })
     * 
     */
    delete<T extends PlaylistDeleteArgs>(args: SelectSubset<T, PlaylistDeleteArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Playlist.
     * @param {PlaylistUpdateArgs} args - Arguments to update one Playlist.
     * @example
     * // Update one Playlist
     * const playlist = await prisma.playlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlaylistUpdateArgs>(args: SelectSubset<T, PlaylistUpdateArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Playlists.
     * @param {PlaylistDeleteManyArgs} args - Arguments to filter Playlists to delete.
     * @example
     * // Delete a few Playlists
     * const { count } = await prisma.playlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlaylistDeleteManyArgs>(args?: SelectSubset<T, PlaylistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Playlists
     * const playlist = await prisma.playlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlaylistUpdateManyArgs>(args: SelectSubset<T, PlaylistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Playlists and returns the data updated in the database.
     * @param {PlaylistUpdateManyAndReturnArgs} args - Arguments to update many Playlists.
     * @example
     * // Update many Playlists
     * const playlist = await prisma.playlist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Playlists and only return the `id`
     * const playlistWithIdOnly = await prisma.playlist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlaylistUpdateManyAndReturnArgs>(args: SelectSubset<T, PlaylistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Playlist.
     * @param {PlaylistUpsertArgs} args - Arguments to update or create a Playlist.
     * @example
     * // Update or create a Playlist
     * const playlist = await prisma.playlist.upsert({
     *   create: {
     *     // ... data to create a Playlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Playlist we want to update
     *   }
     * })
     */
    upsert<T extends PlaylistUpsertArgs>(args: SelectSubset<T, PlaylistUpsertArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistCountArgs} args - Arguments to filter Playlists to count.
     * @example
     * // Count the number of Playlists
     * const count = await prisma.playlist.count({
     *   where: {
     *     // ... the filter for the Playlists we want to count
     *   }
     * })
    **/
    count<T extends PlaylistCountArgs>(
      args?: Subset<T, PlaylistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistAggregateArgs>(args: Subset<T, PlaylistAggregateArgs>): Prisma.PrismaPromise<GetPlaylistAggregateType<T>>

    /**
     * Group by Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaylistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaylistGroupByArgs['orderBy'] }
        : { orderBy?: PlaylistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaylistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Playlist model
   */
  readonly fields: PlaylistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Playlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaylistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problems<T extends Playlist$problemsArgs<ExtArgs> = {}>(args?: Subset<T, Playlist$problemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    purchases<T extends Playlist$purchasesArgs<ExtArgs> = {}>(args?: Subset<T, Playlist$purchasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Playlist model
   */
  interface PlaylistFieldRefs {
    readonly id: FieldRef<"Playlist", 'String'>
    readonly name: FieldRef<"Playlist", 'String'>
    readonly description: FieldRef<"Playlist", 'String'>
    readonly userId: FieldRef<"Playlist", 'String'>
    readonly isPaid: FieldRef<"Playlist", 'Boolean'>
    readonly price: FieldRef<"Playlist", 'Int'>
    readonly createdAt: FieldRef<"Playlist", 'DateTime'>
    readonly updatedAt: FieldRef<"Playlist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Playlist findUnique
   */
  export type PlaylistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }

  /**
   * Playlist findUniqueOrThrow
   */
  export type PlaylistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }

  /**
   * Playlist findFirst
   */
  export type PlaylistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }

  /**
   * Playlist findFirstOrThrow
   */
  export type PlaylistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }

  /**
   * Playlist findMany
   */
  export type PlaylistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlists to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }

  /**
   * Playlist create
   */
  export type PlaylistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The data needed to create a Playlist.
     */
    data: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
  }

  /**
   * Playlist createMany
   */
  export type PlaylistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Playlists.
     */
    data: PlaylistCreateManyInput | PlaylistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Playlist createManyAndReturn
   */
  export type PlaylistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * The data used to create many Playlists.
     */
    data: PlaylistCreateManyInput | PlaylistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Playlist update
   */
  export type PlaylistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The data needed to update a Playlist.
     */
    data: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
    /**
     * Choose, which Playlist to update.
     */
    where: PlaylistWhereUniqueInput
  }

  /**
   * Playlist updateMany
   */
  export type PlaylistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Playlists.
     */
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyInput>
    /**
     * Filter which Playlists to update
     */
    where?: PlaylistWhereInput
    /**
     * Limit how many Playlists to update.
     */
    limit?: number
  }

  /**
   * Playlist updateManyAndReturn
   */
  export type PlaylistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * The data used to update Playlists.
     */
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyInput>
    /**
     * Filter which Playlists to update
     */
    where?: PlaylistWhereInput
    /**
     * Limit how many Playlists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Playlist upsert
   */
  export type PlaylistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The filter to search for the Playlist to update in case it exists.
     */
    where: PlaylistWhereUniqueInput
    /**
     * In case the Playlist found by the `where` argument doesn't exist, create a new Playlist with this data.
     */
    create: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
    /**
     * In case the Playlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
  }

  /**
   * Playlist delete
   */
  export type PlaylistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter which Playlist to delete.
     */
    where: PlaylistWhereUniqueInput
  }

  /**
   * Playlist deleteMany
   */
  export type PlaylistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Playlists to delete
     */
    where?: PlaylistWhereInput
    /**
     * Limit how many Playlists to delete.
     */
    limit?: number
  }

  /**
   * Playlist.problems
   */
  export type Playlist$problemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    where?: ProblemInPlaylistWhereInput
    orderBy?: ProblemInPlaylistOrderByWithRelationInput | ProblemInPlaylistOrderByWithRelationInput[]
    cursor?: ProblemInPlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemInPlaylistScalarFieldEnum | ProblemInPlaylistScalarFieldEnum[]
  }

  /**
   * Playlist.purchases
   */
  export type Playlist$purchasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    where?: PlaylistPurchaseWhereInput
    orderBy?: PlaylistPurchaseOrderByWithRelationInput | PlaylistPurchaseOrderByWithRelationInput[]
    cursor?: PlaylistPurchaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistPurchaseScalarFieldEnum | PlaylistPurchaseScalarFieldEnum[]
  }

  /**
   * Playlist without action
   */
  export type PlaylistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Playlist
     */
    omit?: PlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
  }


  /**
   * Model PlaylistPurchase
   */

  export type AggregatePlaylistPurchase = {
    _count: PlaylistPurchaseCountAggregateOutputType | null
    _min: PlaylistPurchaseMinAggregateOutputType | null
    _max: PlaylistPurchaseMaxAggregateOutputType | null
  }

  export type PlaylistPurchaseMinAggregateOutputType = {
    id: string | null
    userId: string | null
    paymentId: string | null
    paymentOrderId: string | null
    paymentSignature: string | null
    playlistId: string | null
    purchaseDate: Date | null
  }

  export type PlaylistPurchaseMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    paymentId: string | null
    paymentOrderId: string | null
    paymentSignature: string | null
    playlistId: string | null
    purchaseDate: Date | null
  }

  export type PlaylistPurchaseCountAggregateOutputType = {
    id: number
    userId: number
    paymentId: number
    paymentOrderId: number
    paymentSignature: number
    playlistId: number
    purchaseDate: number
    _all: number
  }


  export type PlaylistPurchaseMinAggregateInputType = {
    id?: true
    userId?: true
    paymentId?: true
    paymentOrderId?: true
    paymentSignature?: true
    playlistId?: true
    purchaseDate?: true
  }

  export type PlaylistPurchaseMaxAggregateInputType = {
    id?: true
    userId?: true
    paymentId?: true
    paymentOrderId?: true
    paymentSignature?: true
    playlistId?: true
    purchaseDate?: true
  }

  export type PlaylistPurchaseCountAggregateInputType = {
    id?: true
    userId?: true
    paymentId?: true
    paymentOrderId?: true
    paymentSignature?: true
    playlistId?: true
    purchaseDate?: true
    _all?: true
  }

  export type PlaylistPurchaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlaylistPurchase to aggregate.
     */
    where?: PlaylistPurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistPurchases to fetch.
     */
    orderBy?: PlaylistPurchaseOrderByWithRelationInput | PlaylistPurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaylistPurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistPurchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistPurchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlaylistPurchases
    **/
    _count?: true | PlaylistPurchaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistPurchaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistPurchaseMaxAggregateInputType
  }

  export type GetPlaylistPurchaseAggregateType<T extends PlaylistPurchaseAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylistPurchase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylistPurchase[P]>
      : GetScalarType<T[P], AggregatePlaylistPurchase[P]>
  }




  export type PlaylistPurchaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistPurchaseWhereInput
    orderBy?: PlaylistPurchaseOrderByWithAggregationInput | PlaylistPurchaseOrderByWithAggregationInput[]
    by: PlaylistPurchaseScalarFieldEnum[] | PlaylistPurchaseScalarFieldEnum
    having?: PlaylistPurchaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistPurchaseCountAggregateInputType | true
    _min?: PlaylistPurchaseMinAggregateInputType
    _max?: PlaylistPurchaseMaxAggregateInputType
  }

  export type PlaylistPurchaseGroupByOutputType = {
    id: string
    userId: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    playlistId: string
    purchaseDate: Date
    _count: PlaylistPurchaseCountAggregateOutputType | null
    _min: PlaylistPurchaseMinAggregateOutputType | null
    _max: PlaylistPurchaseMaxAggregateOutputType | null
  }

  type GetPlaylistPurchaseGroupByPayload<T extends PlaylistPurchaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaylistPurchaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistPurchaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistPurchaseGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistPurchaseGroupByOutputType[P]>
        }
      >
    >


  export type PlaylistPurchaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    paymentId?: boolean
    paymentOrderId?: boolean
    paymentSignature?: boolean
    playlistId?: boolean
    purchaseDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlistPurchase"]>

  export type PlaylistPurchaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    paymentId?: boolean
    paymentOrderId?: boolean
    paymentSignature?: boolean
    playlistId?: boolean
    purchaseDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlistPurchase"]>

  export type PlaylistPurchaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    paymentId?: boolean
    paymentOrderId?: boolean
    paymentSignature?: boolean
    playlistId?: boolean
    purchaseDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlistPurchase"]>

  export type PlaylistPurchaseSelectScalar = {
    id?: boolean
    userId?: boolean
    paymentId?: boolean
    paymentOrderId?: boolean
    paymentSignature?: boolean
    playlistId?: boolean
    purchaseDate?: boolean
  }

  export type PlaylistPurchaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "paymentId" | "paymentOrderId" | "paymentSignature" | "playlistId" | "purchaseDate", ExtArgs["result"]["playlistPurchase"]>
  export type PlaylistPurchaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
  }
  export type PlaylistPurchaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
  }
  export type PlaylistPurchaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
  }

  export type $PlaylistPurchasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlaylistPurchase"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      playlist: Prisma.$PlaylistPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      paymentId: string
      paymentOrderId: string
      paymentSignature: string
      playlistId: string
      purchaseDate: Date
    }, ExtArgs["result"]["playlistPurchase"]>
    composites: {}
  }

  type PlaylistPurchaseGetPayload<S extends boolean | null | undefined | PlaylistPurchaseDefaultArgs> = $Result.GetResult<Prisma.$PlaylistPurchasePayload, S>

  type PlaylistPurchaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlaylistPurchaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlaylistPurchaseCountAggregateInputType | true
    }

  export interface PlaylistPurchaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlaylistPurchase'], meta: { name: 'PlaylistPurchase' } }
    /**
     * Find zero or one PlaylistPurchase that matches the filter.
     * @param {PlaylistPurchaseFindUniqueArgs} args - Arguments to find a PlaylistPurchase
     * @example
     * // Get one PlaylistPurchase
     * const playlistPurchase = await prisma.playlistPurchase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlaylistPurchaseFindUniqueArgs>(args: SelectSubset<T, PlaylistPurchaseFindUniqueArgs<ExtArgs>>): Prisma__PlaylistPurchaseClient<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlaylistPurchase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlaylistPurchaseFindUniqueOrThrowArgs} args - Arguments to find a PlaylistPurchase
     * @example
     * // Get one PlaylistPurchase
     * const playlistPurchase = await prisma.playlistPurchase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlaylistPurchaseFindUniqueOrThrowArgs>(args: SelectSubset<T, PlaylistPurchaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlaylistPurchaseClient<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlaylistPurchase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistPurchaseFindFirstArgs} args - Arguments to find a PlaylistPurchase
     * @example
     * // Get one PlaylistPurchase
     * const playlistPurchase = await prisma.playlistPurchase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlaylistPurchaseFindFirstArgs>(args?: SelectSubset<T, PlaylistPurchaseFindFirstArgs<ExtArgs>>): Prisma__PlaylistPurchaseClient<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlaylistPurchase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistPurchaseFindFirstOrThrowArgs} args - Arguments to find a PlaylistPurchase
     * @example
     * // Get one PlaylistPurchase
     * const playlistPurchase = await prisma.playlistPurchase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlaylistPurchaseFindFirstOrThrowArgs>(args?: SelectSubset<T, PlaylistPurchaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlaylistPurchaseClient<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlaylistPurchases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistPurchaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlaylistPurchases
     * const playlistPurchases = await prisma.playlistPurchase.findMany()
     * 
     * // Get first 10 PlaylistPurchases
     * const playlistPurchases = await prisma.playlistPurchase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistPurchaseWithIdOnly = await prisma.playlistPurchase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlaylistPurchaseFindManyArgs>(args?: SelectSubset<T, PlaylistPurchaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlaylistPurchase.
     * @param {PlaylistPurchaseCreateArgs} args - Arguments to create a PlaylistPurchase.
     * @example
     * // Create one PlaylistPurchase
     * const PlaylistPurchase = await prisma.playlistPurchase.create({
     *   data: {
     *     // ... data to create a PlaylistPurchase
     *   }
     * })
     * 
     */
    create<T extends PlaylistPurchaseCreateArgs>(args: SelectSubset<T, PlaylistPurchaseCreateArgs<ExtArgs>>): Prisma__PlaylistPurchaseClient<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlaylistPurchases.
     * @param {PlaylistPurchaseCreateManyArgs} args - Arguments to create many PlaylistPurchases.
     * @example
     * // Create many PlaylistPurchases
     * const playlistPurchase = await prisma.playlistPurchase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlaylistPurchaseCreateManyArgs>(args?: SelectSubset<T, PlaylistPurchaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlaylistPurchases and returns the data saved in the database.
     * @param {PlaylistPurchaseCreateManyAndReturnArgs} args - Arguments to create many PlaylistPurchases.
     * @example
     * // Create many PlaylistPurchases
     * const playlistPurchase = await prisma.playlistPurchase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlaylistPurchases and only return the `id`
     * const playlistPurchaseWithIdOnly = await prisma.playlistPurchase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlaylistPurchaseCreateManyAndReturnArgs>(args?: SelectSubset<T, PlaylistPurchaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlaylistPurchase.
     * @param {PlaylistPurchaseDeleteArgs} args - Arguments to delete one PlaylistPurchase.
     * @example
     * // Delete one PlaylistPurchase
     * const PlaylistPurchase = await prisma.playlistPurchase.delete({
     *   where: {
     *     // ... filter to delete one PlaylistPurchase
     *   }
     * })
     * 
     */
    delete<T extends PlaylistPurchaseDeleteArgs>(args: SelectSubset<T, PlaylistPurchaseDeleteArgs<ExtArgs>>): Prisma__PlaylistPurchaseClient<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlaylistPurchase.
     * @param {PlaylistPurchaseUpdateArgs} args - Arguments to update one PlaylistPurchase.
     * @example
     * // Update one PlaylistPurchase
     * const playlistPurchase = await prisma.playlistPurchase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlaylistPurchaseUpdateArgs>(args: SelectSubset<T, PlaylistPurchaseUpdateArgs<ExtArgs>>): Prisma__PlaylistPurchaseClient<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlaylistPurchases.
     * @param {PlaylistPurchaseDeleteManyArgs} args - Arguments to filter PlaylistPurchases to delete.
     * @example
     * // Delete a few PlaylistPurchases
     * const { count } = await prisma.playlistPurchase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlaylistPurchaseDeleteManyArgs>(args?: SelectSubset<T, PlaylistPurchaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlaylistPurchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistPurchaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlaylistPurchases
     * const playlistPurchase = await prisma.playlistPurchase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlaylistPurchaseUpdateManyArgs>(args: SelectSubset<T, PlaylistPurchaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlaylistPurchases and returns the data updated in the database.
     * @param {PlaylistPurchaseUpdateManyAndReturnArgs} args - Arguments to update many PlaylistPurchases.
     * @example
     * // Update many PlaylistPurchases
     * const playlistPurchase = await prisma.playlistPurchase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlaylistPurchases and only return the `id`
     * const playlistPurchaseWithIdOnly = await prisma.playlistPurchase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlaylistPurchaseUpdateManyAndReturnArgs>(args: SelectSubset<T, PlaylistPurchaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlaylistPurchase.
     * @param {PlaylistPurchaseUpsertArgs} args - Arguments to update or create a PlaylistPurchase.
     * @example
     * // Update or create a PlaylistPurchase
     * const playlistPurchase = await prisma.playlistPurchase.upsert({
     *   create: {
     *     // ... data to create a PlaylistPurchase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlaylistPurchase we want to update
     *   }
     * })
     */
    upsert<T extends PlaylistPurchaseUpsertArgs>(args: SelectSubset<T, PlaylistPurchaseUpsertArgs<ExtArgs>>): Prisma__PlaylistPurchaseClient<$Result.GetResult<Prisma.$PlaylistPurchasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlaylistPurchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistPurchaseCountArgs} args - Arguments to filter PlaylistPurchases to count.
     * @example
     * // Count the number of PlaylistPurchases
     * const count = await prisma.playlistPurchase.count({
     *   where: {
     *     // ... the filter for the PlaylistPurchases we want to count
     *   }
     * })
    **/
    count<T extends PlaylistPurchaseCountArgs>(
      args?: Subset<T, PlaylistPurchaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistPurchaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlaylistPurchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistPurchaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistPurchaseAggregateArgs>(args: Subset<T, PlaylistPurchaseAggregateArgs>): Prisma.PrismaPromise<GetPlaylistPurchaseAggregateType<T>>

    /**
     * Group by PlaylistPurchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistPurchaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaylistPurchaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaylistPurchaseGroupByArgs['orderBy'] }
        : { orderBy?: PlaylistPurchaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaylistPurchaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistPurchaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlaylistPurchase model
   */
  readonly fields: PlaylistPurchaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlaylistPurchase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaylistPurchaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    playlist<T extends PlaylistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaylistDefaultArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlaylistPurchase model
   */
  interface PlaylistPurchaseFieldRefs {
    readonly id: FieldRef<"PlaylistPurchase", 'String'>
    readonly userId: FieldRef<"PlaylistPurchase", 'String'>
    readonly paymentId: FieldRef<"PlaylistPurchase", 'String'>
    readonly paymentOrderId: FieldRef<"PlaylistPurchase", 'String'>
    readonly paymentSignature: FieldRef<"PlaylistPurchase", 'String'>
    readonly playlistId: FieldRef<"PlaylistPurchase", 'String'>
    readonly purchaseDate: FieldRef<"PlaylistPurchase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlaylistPurchase findUnique
   */
  export type PlaylistPurchaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistPurchase to fetch.
     */
    where: PlaylistPurchaseWhereUniqueInput
  }

  /**
   * PlaylistPurchase findUniqueOrThrow
   */
  export type PlaylistPurchaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistPurchase to fetch.
     */
    where: PlaylistPurchaseWhereUniqueInput
  }

  /**
   * PlaylistPurchase findFirst
   */
  export type PlaylistPurchaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistPurchase to fetch.
     */
    where?: PlaylistPurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistPurchases to fetch.
     */
    orderBy?: PlaylistPurchaseOrderByWithRelationInput | PlaylistPurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlaylistPurchases.
     */
    cursor?: PlaylistPurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistPurchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistPurchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlaylistPurchases.
     */
    distinct?: PlaylistPurchaseScalarFieldEnum | PlaylistPurchaseScalarFieldEnum[]
  }

  /**
   * PlaylistPurchase findFirstOrThrow
   */
  export type PlaylistPurchaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistPurchase to fetch.
     */
    where?: PlaylistPurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistPurchases to fetch.
     */
    orderBy?: PlaylistPurchaseOrderByWithRelationInput | PlaylistPurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlaylistPurchases.
     */
    cursor?: PlaylistPurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistPurchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistPurchases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlaylistPurchases.
     */
    distinct?: PlaylistPurchaseScalarFieldEnum | PlaylistPurchaseScalarFieldEnum[]
  }

  /**
   * PlaylistPurchase findMany
   */
  export type PlaylistPurchaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistPurchases to fetch.
     */
    where?: PlaylistPurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistPurchases to fetch.
     */
    orderBy?: PlaylistPurchaseOrderByWithRelationInput | PlaylistPurchaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlaylistPurchases.
     */
    cursor?: PlaylistPurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistPurchases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistPurchases.
     */
    skip?: number
    distinct?: PlaylistPurchaseScalarFieldEnum | PlaylistPurchaseScalarFieldEnum[]
  }

  /**
   * PlaylistPurchase create
   */
  export type PlaylistPurchaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    /**
     * The data needed to create a PlaylistPurchase.
     */
    data: XOR<PlaylistPurchaseCreateInput, PlaylistPurchaseUncheckedCreateInput>
  }

  /**
   * PlaylistPurchase createMany
   */
  export type PlaylistPurchaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlaylistPurchases.
     */
    data: PlaylistPurchaseCreateManyInput | PlaylistPurchaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlaylistPurchase createManyAndReturn
   */
  export type PlaylistPurchaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * The data used to create many PlaylistPurchases.
     */
    data: PlaylistPurchaseCreateManyInput | PlaylistPurchaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlaylistPurchase update
   */
  export type PlaylistPurchaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    /**
     * The data needed to update a PlaylistPurchase.
     */
    data: XOR<PlaylistPurchaseUpdateInput, PlaylistPurchaseUncheckedUpdateInput>
    /**
     * Choose, which PlaylistPurchase to update.
     */
    where: PlaylistPurchaseWhereUniqueInput
  }

  /**
   * PlaylistPurchase updateMany
   */
  export type PlaylistPurchaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlaylistPurchases.
     */
    data: XOR<PlaylistPurchaseUpdateManyMutationInput, PlaylistPurchaseUncheckedUpdateManyInput>
    /**
     * Filter which PlaylistPurchases to update
     */
    where?: PlaylistPurchaseWhereInput
    /**
     * Limit how many PlaylistPurchases to update.
     */
    limit?: number
  }

  /**
   * PlaylistPurchase updateManyAndReturn
   */
  export type PlaylistPurchaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * The data used to update PlaylistPurchases.
     */
    data: XOR<PlaylistPurchaseUpdateManyMutationInput, PlaylistPurchaseUncheckedUpdateManyInput>
    /**
     * Filter which PlaylistPurchases to update
     */
    where?: PlaylistPurchaseWhereInput
    /**
     * Limit how many PlaylistPurchases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlaylistPurchase upsert
   */
  export type PlaylistPurchaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    /**
     * The filter to search for the PlaylistPurchase to update in case it exists.
     */
    where: PlaylistPurchaseWhereUniqueInput
    /**
     * In case the PlaylistPurchase found by the `where` argument doesn't exist, create a new PlaylistPurchase with this data.
     */
    create: XOR<PlaylistPurchaseCreateInput, PlaylistPurchaseUncheckedCreateInput>
    /**
     * In case the PlaylistPurchase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaylistPurchaseUpdateInput, PlaylistPurchaseUncheckedUpdateInput>
  }

  /**
   * PlaylistPurchase delete
   */
  export type PlaylistPurchaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
    /**
     * Filter which PlaylistPurchase to delete.
     */
    where: PlaylistPurchaseWhereUniqueInput
  }

  /**
   * PlaylistPurchase deleteMany
   */
  export type PlaylistPurchaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlaylistPurchases to delete
     */
    where?: PlaylistPurchaseWhereInput
    /**
     * Limit how many PlaylistPurchases to delete.
     */
    limit?: number
  }

  /**
   * PlaylistPurchase without action
   */
  export type PlaylistPurchaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistPurchase
     */
    select?: PlaylistPurchaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlaylistPurchase
     */
    omit?: PlaylistPurchaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistPurchaseInclude<ExtArgs> | null
  }


  /**
   * Model ProblemInPlaylist
   */

  export type AggregateProblemInPlaylist = {
    _count: ProblemInPlaylistCountAggregateOutputType | null
    _min: ProblemInPlaylistMinAggregateOutputType | null
    _max: ProblemInPlaylistMaxAggregateOutputType | null
  }

  export type ProblemInPlaylistMinAggregateOutputType = {
    id: string | null
    playlistId: string | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemInPlaylistMaxAggregateOutputType = {
    id: string | null
    playlistId: string | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemInPlaylistCountAggregateOutputType = {
    id: number
    playlistId: number
    problemId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemInPlaylistMinAggregateInputType = {
    id?: true
    playlistId?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemInPlaylistMaxAggregateInputType = {
    id?: true
    playlistId?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemInPlaylistCountAggregateInputType = {
    id?: true
    playlistId?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemInPlaylistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemInPlaylist to aggregate.
     */
    where?: ProblemInPlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemInPlaylists to fetch.
     */
    orderBy?: ProblemInPlaylistOrderByWithRelationInput | ProblemInPlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemInPlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemInPlaylists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemInPlaylists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemInPlaylists
    **/
    _count?: true | ProblemInPlaylistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemInPlaylistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemInPlaylistMaxAggregateInputType
  }

  export type GetProblemInPlaylistAggregateType<T extends ProblemInPlaylistAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemInPlaylist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemInPlaylist[P]>
      : GetScalarType<T[P], AggregateProblemInPlaylist[P]>
  }




  export type ProblemInPlaylistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemInPlaylistWhereInput
    orderBy?: ProblemInPlaylistOrderByWithAggregationInput | ProblemInPlaylistOrderByWithAggregationInput[]
    by: ProblemInPlaylistScalarFieldEnum[] | ProblemInPlaylistScalarFieldEnum
    having?: ProblemInPlaylistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemInPlaylistCountAggregateInputType | true
    _min?: ProblemInPlaylistMinAggregateInputType
    _max?: ProblemInPlaylistMaxAggregateInputType
  }

  export type ProblemInPlaylistGroupByOutputType = {
    id: string
    playlistId: string
    problemId: string
    createdAt: Date
    updatedAt: Date
    _count: ProblemInPlaylistCountAggregateOutputType | null
    _min: ProblemInPlaylistMinAggregateOutputType | null
    _max: ProblemInPlaylistMaxAggregateOutputType | null
  }

  type GetProblemInPlaylistGroupByPayload<T extends ProblemInPlaylistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemInPlaylistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemInPlaylistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemInPlaylistGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemInPlaylistGroupByOutputType[P]>
        }
      >
    >


  export type ProblemInPlaylistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playlistId?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemInPlaylist"]>

  export type ProblemInPlaylistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playlistId?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemInPlaylist"]>

  export type ProblemInPlaylistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playlistId?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemInPlaylist"]>

  export type ProblemInPlaylistSelectScalar = {
    id?: boolean
    playlistId?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemInPlaylistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "playlistId" | "problemId" | "createdAt" | "updatedAt", ExtArgs["result"]["problemInPlaylist"]>
  export type ProblemInPlaylistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }
  export type ProblemInPlaylistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }
  export type ProblemInPlaylistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }

  export type $ProblemInPlaylistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProblemInPlaylist"
    objects: {
      playlist: Prisma.$PlaylistPayload<ExtArgs>
      problem: Prisma.$ProblemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      playlistId: string
      problemId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["problemInPlaylist"]>
    composites: {}
  }

  type ProblemInPlaylistGetPayload<S extends boolean | null | undefined | ProblemInPlaylistDefaultArgs> = $Result.GetResult<Prisma.$ProblemInPlaylistPayload, S>

  type ProblemInPlaylistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemInPlaylistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemInPlaylistCountAggregateInputType | true
    }

  export interface ProblemInPlaylistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemInPlaylist'], meta: { name: 'ProblemInPlaylist' } }
    /**
     * Find zero or one ProblemInPlaylist that matches the filter.
     * @param {ProblemInPlaylistFindUniqueArgs} args - Arguments to find a ProblemInPlaylist
     * @example
     * // Get one ProblemInPlaylist
     * const problemInPlaylist = await prisma.problemInPlaylist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemInPlaylistFindUniqueArgs>(args: SelectSubset<T, ProblemInPlaylistFindUniqueArgs<ExtArgs>>): Prisma__ProblemInPlaylistClient<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProblemInPlaylist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemInPlaylistFindUniqueOrThrowArgs} args - Arguments to find a ProblemInPlaylist
     * @example
     * // Get one ProblemInPlaylist
     * const problemInPlaylist = await prisma.problemInPlaylist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemInPlaylistFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemInPlaylistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemInPlaylistClient<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemInPlaylist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInPlaylistFindFirstArgs} args - Arguments to find a ProblemInPlaylist
     * @example
     * // Get one ProblemInPlaylist
     * const problemInPlaylist = await prisma.problemInPlaylist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemInPlaylistFindFirstArgs>(args?: SelectSubset<T, ProblemInPlaylistFindFirstArgs<ExtArgs>>): Prisma__ProblemInPlaylistClient<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemInPlaylist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInPlaylistFindFirstOrThrowArgs} args - Arguments to find a ProblemInPlaylist
     * @example
     * // Get one ProblemInPlaylist
     * const problemInPlaylist = await prisma.problemInPlaylist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemInPlaylistFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemInPlaylistFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemInPlaylistClient<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProblemInPlaylists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInPlaylistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemInPlaylists
     * const problemInPlaylists = await prisma.problemInPlaylist.findMany()
     * 
     * // Get first 10 ProblemInPlaylists
     * const problemInPlaylists = await prisma.problemInPlaylist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemInPlaylistWithIdOnly = await prisma.problemInPlaylist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemInPlaylistFindManyArgs>(args?: SelectSubset<T, ProblemInPlaylistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProblemInPlaylist.
     * @param {ProblemInPlaylistCreateArgs} args - Arguments to create a ProblemInPlaylist.
     * @example
     * // Create one ProblemInPlaylist
     * const ProblemInPlaylist = await prisma.problemInPlaylist.create({
     *   data: {
     *     // ... data to create a ProblemInPlaylist
     *   }
     * })
     * 
     */
    create<T extends ProblemInPlaylistCreateArgs>(args: SelectSubset<T, ProblemInPlaylistCreateArgs<ExtArgs>>): Prisma__ProblemInPlaylistClient<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProblemInPlaylists.
     * @param {ProblemInPlaylistCreateManyArgs} args - Arguments to create many ProblemInPlaylists.
     * @example
     * // Create many ProblemInPlaylists
     * const problemInPlaylist = await prisma.problemInPlaylist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemInPlaylistCreateManyArgs>(args?: SelectSubset<T, ProblemInPlaylistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProblemInPlaylists and returns the data saved in the database.
     * @param {ProblemInPlaylistCreateManyAndReturnArgs} args - Arguments to create many ProblemInPlaylists.
     * @example
     * // Create many ProblemInPlaylists
     * const problemInPlaylist = await prisma.problemInPlaylist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProblemInPlaylists and only return the `id`
     * const problemInPlaylistWithIdOnly = await prisma.problemInPlaylist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemInPlaylistCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemInPlaylistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProblemInPlaylist.
     * @param {ProblemInPlaylistDeleteArgs} args - Arguments to delete one ProblemInPlaylist.
     * @example
     * // Delete one ProblemInPlaylist
     * const ProblemInPlaylist = await prisma.problemInPlaylist.delete({
     *   where: {
     *     // ... filter to delete one ProblemInPlaylist
     *   }
     * })
     * 
     */
    delete<T extends ProblemInPlaylistDeleteArgs>(args: SelectSubset<T, ProblemInPlaylistDeleteArgs<ExtArgs>>): Prisma__ProblemInPlaylistClient<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProblemInPlaylist.
     * @param {ProblemInPlaylistUpdateArgs} args - Arguments to update one ProblemInPlaylist.
     * @example
     * // Update one ProblemInPlaylist
     * const problemInPlaylist = await prisma.problemInPlaylist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemInPlaylistUpdateArgs>(args: SelectSubset<T, ProblemInPlaylistUpdateArgs<ExtArgs>>): Prisma__ProblemInPlaylistClient<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProblemInPlaylists.
     * @param {ProblemInPlaylistDeleteManyArgs} args - Arguments to filter ProblemInPlaylists to delete.
     * @example
     * // Delete a few ProblemInPlaylists
     * const { count } = await prisma.problemInPlaylist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemInPlaylistDeleteManyArgs>(args?: SelectSubset<T, ProblemInPlaylistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemInPlaylists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInPlaylistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemInPlaylists
     * const problemInPlaylist = await prisma.problemInPlaylist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemInPlaylistUpdateManyArgs>(args: SelectSubset<T, ProblemInPlaylistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemInPlaylists and returns the data updated in the database.
     * @param {ProblemInPlaylistUpdateManyAndReturnArgs} args - Arguments to update many ProblemInPlaylists.
     * @example
     * // Update many ProblemInPlaylists
     * const problemInPlaylist = await prisma.problemInPlaylist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProblemInPlaylists and only return the `id`
     * const problemInPlaylistWithIdOnly = await prisma.problemInPlaylist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemInPlaylistUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemInPlaylistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProblemInPlaylist.
     * @param {ProblemInPlaylistUpsertArgs} args - Arguments to update or create a ProblemInPlaylist.
     * @example
     * // Update or create a ProblemInPlaylist
     * const problemInPlaylist = await prisma.problemInPlaylist.upsert({
     *   create: {
     *     // ... data to create a ProblemInPlaylist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemInPlaylist we want to update
     *   }
     * })
     */
    upsert<T extends ProblemInPlaylistUpsertArgs>(args: SelectSubset<T, ProblemInPlaylistUpsertArgs<ExtArgs>>): Prisma__ProblemInPlaylistClient<$Result.GetResult<Prisma.$ProblemInPlaylistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProblemInPlaylists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInPlaylistCountArgs} args - Arguments to filter ProblemInPlaylists to count.
     * @example
     * // Count the number of ProblemInPlaylists
     * const count = await prisma.problemInPlaylist.count({
     *   where: {
     *     // ... the filter for the ProblemInPlaylists we want to count
     *   }
     * })
    **/
    count<T extends ProblemInPlaylistCountArgs>(
      args?: Subset<T, ProblemInPlaylistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemInPlaylistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemInPlaylist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInPlaylistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemInPlaylistAggregateArgs>(args: Subset<T, ProblemInPlaylistAggregateArgs>): Prisma.PrismaPromise<GetProblemInPlaylistAggregateType<T>>

    /**
     * Group by ProblemInPlaylist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInPlaylistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemInPlaylistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemInPlaylistGroupByArgs['orderBy'] }
        : { orderBy?: ProblemInPlaylistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemInPlaylistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemInPlaylistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProblemInPlaylist model
   */
  readonly fields: ProblemInPlaylistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemInPlaylist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemInPlaylistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    playlist<T extends PlaylistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaylistDefaultArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    problem<T extends ProblemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDefaultArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProblemInPlaylist model
   */
  interface ProblemInPlaylistFieldRefs {
    readonly id: FieldRef<"ProblemInPlaylist", 'String'>
    readonly playlistId: FieldRef<"ProblemInPlaylist", 'String'>
    readonly problemId: FieldRef<"ProblemInPlaylist", 'String'>
    readonly createdAt: FieldRef<"ProblemInPlaylist", 'DateTime'>
    readonly updatedAt: FieldRef<"ProblemInPlaylist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProblemInPlaylist findUnique
   */
  export type ProblemInPlaylistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInPlaylist to fetch.
     */
    where: ProblemInPlaylistWhereUniqueInput
  }

  /**
   * ProblemInPlaylist findUniqueOrThrow
   */
  export type ProblemInPlaylistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInPlaylist to fetch.
     */
    where: ProblemInPlaylistWhereUniqueInput
  }

  /**
   * ProblemInPlaylist findFirst
   */
  export type ProblemInPlaylistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInPlaylist to fetch.
     */
    where?: ProblemInPlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemInPlaylists to fetch.
     */
    orderBy?: ProblemInPlaylistOrderByWithRelationInput | ProblemInPlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemInPlaylists.
     */
    cursor?: ProblemInPlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemInPlaylists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemInPlaylists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemInPlaylists.
     */
    distinct?: ProblemInPlaylistScalarFieldEnum | ProblemInPlaylistScalarFieldEnum[]
  }

  /**
   * ProblemInPlaylist findFirstOrThrow
   */
  export type ProblemInPlaylistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInPlaylist to fetch.
     */
    where?: ProblemInPlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemInPlaylists to fetch.
     */
    orderBy?: ProblemInPlaylistOrderByWithRelationInput | ProblemInPlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemInPlaylists.
     */
    cursor?: ProblemInPlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemInPlaylists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemInPlaylists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemInPlaylists.
     */
    distinct?: ProblemInPlaylistScalarFieldEnum | ProblemInPlaylistScalarFieldEnum[]
  }

  /**
   * ProblemInPlaylist findMany
   */
  export type ProblemInPlaylistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInPlaylists to fetch.
     */
    where?: ProblemInPlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemInPlaylists to fetch.
     */
    orderBy?: ProblemInPlaylistOrderByWithRelationInput | ProblemInPlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemInPlaylists.
     */
    cursor?: ProblemInPlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemInPlaylists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemInPlaylists.
     */
    skip?: number
    distinct?: ProblemInPlaylistScalarFieldEnum | ProblemInPlaylistScalarFieldEnum[]
  }

  /**
   * ProblemInPlaylist create
   */
  export type ProblemInPlaylistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    /**
     * The data needed to create a ProblemInPlaylist.
     */
    data: XOR<ProblemInPlaylistCreateInput, ProblemInPlaylistUncheckedCreateInput>
  }

  /**
   * ProblemInPlaylist createMany
   */
  export type ProblemInPlaylistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProblemInPlaylists.
     */
    data: ProblemInPlaylistCreateManyInput | ProblemInPlaylistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProblemInPlaylist createManyAndReturn
   */
  export type ProblemInPlaylistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * The data used to create many ProblemInPlaylists.
     */
    data: ProblemInPlaylistCreateManyInput | ProblemInPlaylistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemInPlaylist update
   */
  export type ProblemInPlaylistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    /**
     * The data needed to update a ProblemInPlaylist.
     */
    data: XOR<ProblemInPlaylistUpdateInput, ProblemInPlaylistUncheckedUpdateInput>
    /**
     * Choose, which ProblemInPlaylist to update.
     */
    where: ProblemInPlaylistWhereUniqueInput
  }

  /**
   * ProblemInPlaylist updateMany
   */
  export type ProblemInPlaylistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProblemInPlaylists.
     */
    data: XOR<ProblemInPlaylistUpdateManyMutationInput, ProblemInPlaylistUncheckedUpdateManyInput>
    /**
     * Filter which ProblemInPlaylists to update
     */
    where?: ProblemInPlaylistWhereInput
    /**
     * Limit how many ProblemInPlaylists to update.
     */
    limit?: number
  }

  /**
   * ProblemInPlaylist updateManyAndReturn
   */
  export type ProblemInPlaylistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * The data used to update ProblemInPlaylists.
     */
    data: XOR<ProblemInPlaylistUpdateManyMutationInput, ProblemInPlaylistUncheckedUpdateManyInput>
    /**
     * Filter which ProblemInPlaylists to update
     */
    where?: ProblemInPlaylistWhereInput
    /**
     * Limit how many ProblemInPlaylists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemInPlaylist upsert
   */
  export type ProblemInPlaylistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    /**
     * The filter to search for the ProblemInPlaylist to update in case it exists.
     */
    where: ProblemInPlaylistWhereUniqueInput
    /**
     * In case the ProblemInPlaylist found by the `where` argument doesn't exist, create a new ProblemInPlaylist with this data.
     */
    create: XOR<ProblemInPlaylistCreateInput, ProblemInPlaylistUncheckedCreateInput>
    /**
     * In case the ProblemInPlaylist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemInPlaylistUpdateInput, ProblemInPlaylistUncheckedUpdateInput>
  }

  /**
   * ProblemInPlaylist delete
   */
  export type ProblemInPlaylistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
    /**
     * Filter which ProblemInPlaylist to delete.
     */
    where: ProblemInPlaylistWhereUniqueInput
  }

  /**
   * ProblemInPlaylist deleteMany
   */
  export type ProblemInPlaylistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemInPlaylists to delete
     */
    where?: ProblemInPlaylistWhereInput
    /**
     * Limit how many ProblemInPlaylists to delete.
     */
    limit?: number
  }

  /**
   * ProblemInPlaylist without action
   */
  export type ProblemInPlaylistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInPlaylist
     */
    select?: ProblemInPlaylistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInPlaylist
     */
    omit?: ProblemInPlaylistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInPlaylistInclude<ExtArgs> | null
  }


  /**
   * Model Badge
   */

  export type AggregateBadge = {
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  export type BadgeMinAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BadgeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    icon: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BadgeCountAggregateOutputType = {
    id: number
    name: number
    icon: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BadgeMinAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BadgeMaxAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BadgeCountAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badge to aggregate.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Badges
    **/
    _count?: true | BadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BadgeMaxAggregateInputType
  }

  export type GetBadgeAggregateType<T extends BadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBadge[P]>
      : GetScalarType<T[P], AggregateBadge[P]>
  }




  export type BadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeWhereInput
    orderBy?: BadgeOrderByWithAggregationInput | BadgeOrderByWithAggregationInput[]
    by: BadgeScalarFieldEnum[] | BadgeScalarFieldEnum
    having?: BadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BadgeCountAggregateInputType | true
    _min?: BadgeMinAggregateInputType
    _max?: BadgeMaxAggregateInputType
  }

  export type BadgeGroupByOutputType = {
    id: string
    name: string
    icon: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: BadgeCountAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  type GetBadgeGroupByPayload<T extends BadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BadgeGroupByOutputType[P]>
            : GetScalarType<T[P], BadgeGroupByOutputType[P]>
        }
      >
    >


  export type BadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectScalar = {
    id?: boolean
    name?: boolean
    icon?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BadgeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "icon" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["badge"]>

  export type $BadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Badge"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      icon: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["badge"]>
    composites: {}
  }

  type BadgeGetPayload<S extends boolean | null | undefined | BadgeDefaultArgs> = $Result.GetResult<Prisma.$BadgePayload, S>

  type BadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BadgeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BadgeCountAggregateInputType | true
    }

  export interface BadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Badge'], meta: { name: 'Badge' } }
    /**
     * Find zero or one Badge that matches the filter.
     * @param {BadgeFindUniqueArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BadgeFindUniqueArgs>(args: SelectSubset<T, BadgeFindUniqueArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Badge that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BadgeFindUniqueOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, BadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Badge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BadgeFindFirstArgs>(args?: SelectSubset<T, BadgeFindFirstArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Badge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, BadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Badges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Badges
     * const badges = await prisma.badge.findMany()
     * 
     * // Get first 10 Badges
     * const badges = await prisma.badge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const badgeWithIdOnly = await prisma.badge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BadgeFindManyArgs>(args?: SelectSubset<T, BadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Badge.
     * @param {BadgeCreateArgs} args - Arguments to create a Badge.
     * @example
     * // Create one Badge
     * const Badge = await prisma.badge.create({
     *   data: {
     *     // ... data to create a Badge
     *   }
     * })
     * 
     */
    create<T extends BadgeCreateArgs>(args: SelectSubset<T, BadgeCreateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Badges.
     * @param {BadgeCreateManyArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BadgeCreateManyArgs>(args?: SelectSubset<T, BadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Badges and returns the data saved in the database.
     * @param {BadgeCreateManyAndReturnArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, BadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Badge.
     * @param {BadgeDeleteArgs} args - Arguments to delete one Badge.
     * @example
     * // Delete one Badge
     * const Badge = await prisma.badge.delete({
     *   where: {
     *     // ... filter to delete one Badge
     *   }
     * })
     * 
     */
    delete<T extends BadgeDeleteArgs>(args: SelectSubset<T, BadgeDeleteArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Badge.
     * @param {BadgeUpdateArgs} args - Arguments to update one Badge.
     * @example
     * // Update one Badge
     * const badge = await prisma.badge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BadgeUpdateArgs>(args: SelectSubset<T, BadgeUpdateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Badges.
     * @param {BadgeDeleteManyArgs} args - Arguments to filter Badges to delete.
     * @example
     * // Delete a few Badges
     * const { count } = await prisma.badge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BadgeDeleteManyArgs>(args?: SelectSubset<T, BadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BadgeUpdateManyArgs>(args: SelectSubset<T, BadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges and returns the data updated in the database.
     * @param {BadgeUpdateManyAndReturnArgs} args - Arguments to update many Badges.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BadgeUpdateManyAndReturnArgs>(args: SelectSubset<T, BadgeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Badge.
     * @param {BadgeUpsertArgs} args - Arguments to update or create a Badge.
     * @example
     * // Update or create a Badge
     * const badge = await prisma.badge.upsert({
     *   create: {
     *     // ... data to create a Badge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Badge we want to update
     *   }
     * })
     */
    upsert<T extends BadgeUpsertArgs>(args: SelectSubset<T, BadgeUpsertArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeCountArgs} args - Arguments to filter Badges to count.
     * @example
     * // Count the number of Badges
     * const count = await prisma.badge.count({
     *   where: {
     *     // ... the filter for the Badges we want to count
     *   }
     * })
    **/
    count<T extends BadgeCountArgs>(
      args?: Subset<T, BadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BadgeAggregateArgs>(args: Subset<T, BadgeAggregateArgs>): Prisma.PrismaPromise<GetBadgeAggregateType<T>>

    /**
     * Group by Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BadgeGroupByArgs['orderBy'] }
        : { orderBy?: BadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Badge model
   */
  readonly fields: BadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Badge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Badge model
   */
  interface BadgeFieldRefs {
    readonly id: FieldRef<"Badge", 'String'>
    readonly name: FieldRef<"Badge", 'String'>
    readonly icon: FieldRef<"Badge", 'String'>
    readonly description: FieldRef<"Badge", 'String'>
    readonly createdAt: FieldRef<"Badge", 'DateTime'>
    readonly updatedAt: FieldRef<"Badge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Badge findUnique
   */
  export type BadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findUniqueOrThrow
   */
  export type BadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findFirst
   */
  export type BadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findFirstOrThrow
   */
  export type BadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findMany
   */
  export type BadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Filter, which Badges to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge create
   */
  export type BadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data needed to create a Badge.
     */
    data: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
  }

  /**
   * Badge createMany
   */
  export type BadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge createManyAndReturn
   */
  export type BadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge update
   */
  export type BadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data needed to update a Badge.
     */
    data: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
    /**
     * Choose, which Badge to update.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge updateMany
   */
  export type BadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to update.
     */
    limit?: number
  }

  /**
   * Badge updateManyAndReturn
   */
  export type BadgeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to update.
     */
    limit?: number
  }

  /**
   * Badge upsert
   */
  export type BadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * The filter to search for the Badge to update in case it exists.
     */
    where: BadgeWhereUniqueInput
    /**
     * In case the Badge found by the `where` argument doesn't exist, create a new Badge with this data.
     */
    create: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
    /**
     * In case the Badge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
  }

  /**
   * Badge delete
   */
  export type BadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
    /**
     * Filter which Badge to delete.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge deleteMany
   */
  export type BadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badges to delete
     */
    where?: BadgeWhereInput
    /**
     * Limit how many Badges to delete.
     */
    limit?: number
  }

  /**
   * Badge without action
   */
  export type BadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Badge
     */
    omit?: BadgeOmit<ExtArgs> | null
  }


  /**
   * Model ProblemReport
   */

  export type AggregateProblemReport = {
    _count: ProblemReportCountAggregateOutputType | null
    _min: ProblemReportMinAggregateOutputType | null
    _max: ProblemReportMaxAggregateOutputType | null
  }

  export type ProblemReportMinAggregateOutputType = {
    id: string | null
    problemId: string | null
    userId: string | null
    reason: $Enums.ReportReason | null
    description: string | null
    status: string | null
    createdAt: Date | null
  }

  export type ProblemReportMaxAggregateOutputType = {
    id: string | null
    problemId: string | null
    userId: string | null
    reason: $Enums.ReportReason | null
    description: string | null
    status: string | null
    createdAt: Date | null
  }

  export type ProblemReportCountAggregateOutputType = {
    id: number
    problemId: number
    userId: number
    reason: number
    description: number
    status: number
    createdAt: number
    _all: number
  }


  export type ProblemReportMinAggregateInputType = {
    id?: true
    problemId?: true
    userId?: true
    reason?: true
    description?: true
    status?: true
    createdAt?: true
  }

  export type ProblemReportMaxAggregateInputType = {
    id?: true
    problemId?: true
    userId?: true
    reason?: true
    description?: true
    status?: true
    createdAt?: true
  }

  export type ProblemReportCountAggregateInputType = {
    id?: true
    problemId?: true
    userId?: true
    reason?: true
    description?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type ProblemReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemReport to aggregate.
     */
    where?: ProblemReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemReports to fetch.
     */
    orderBy?: ProblemReportOrderByWithRelationInput | ProblemReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemReports
    **/
    _count?: true | ProblemReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemReportMaxAggregateInputType
  }

  export type GetProblemReportAggregateType<T extends ProblemReportAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemReport[P]>
      : GetScalarType<T[P], AggregateProblemReport[P]>
  }




  export type ProblemReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemReportWhereInput
    orderBy?: ProblemReportOrderByWithAggregationInput | ProblemReportOrderByWithAggregationInput[]
    by: ProblemReportScalarFieldEnum[] | ProblemReportScalarFieldEnum
    having?: ProblemReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemReportCountAggregateInputType | true
    _min?: ProblemReportMinAggregateInputType
    _max?: ProblemReportMaxAggregateInputType
  }

  export type ProblemReportGroupByOutputType = {
    id: string
    problemId: string
    userId: string
    reason: $Enums.ReportReason
    description: string | null
    status: string
    createdAt: Date
    _count: ProblemReportCountAggregateOutputType | null
    _min: ProblemReportMinAggregateOutputType | null
    _max: ProblemReportMaxAggregateOutputType | null
  }

  type GetProblemReportGroupByPayload<T extends ProblemReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemReportGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemReportGroupByOutputType[P]>
        }
      >
    >


  export type ProblemReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    userId?: boolean
    reason?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemReport"]>

  export type ProblemReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    userId?: boolean
    reason?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemReport"]>

  export type ProblemReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    userId?: boolean
    reason?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemReport"]>

  export type ProblemReportSelectScalar = {
    id?: boolean
    problemId?: boolean
    userId?: boolean
    reason?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type ProblemReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "problemId" | "userId" | "reason" | "description" | "status" | "createdAt", ExtArgs["result"]["problemReport"]>
  export type ProblemReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProblemReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProblemReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProblemReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProblemReport"
    objects: {
      problem: Prisma.$ProblemPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      problemId: string
      userId: string
      reason: $Enums.ReportReason
      description: string | null
      status: string
      createdAt: Date
    }, ExtArgs["result"]["problemReport"]>
    composites: {}
  }

  type ProblemReportGetPayload<S extends boolean | null | undefined | ProblemReportDefaultArgs> = $Result.GetResult<Prisma.$ProblemReportPayload, S>

  type ProblemReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemReportCountAggregateInputType | true
    }

  export interface ProblemReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemReport'], meta: { name: 'ProblemReport' } }
    /**
     * Find zero or one ProblemReport that matches the filter.
     * @param {ProblemReportFindUniqueArgs} args - Arguments to find a ProblemReport
     * @example
     * // Get one ProblemReport
     * const problemReport = await prisma.problemReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemReportFindUniqueArgs>(args: SelectSubset<T, ProblemReportFindUniqueArgs<ExtArgs>>): Prisma__ProblemReportClient<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProblemReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemReportFindUniqueOrThrowArgs} args - Arguments to find a ProblemReport
     * @example
     * // Get one ProblemReport
     * const problemReport = await prisma.problemReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemReportClient<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReportFindFirstArgs} args - Arguments to find a ProblemReport
     * @example
     * // Get one ProblemReport
     * const problemReport = await prisma.problemReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemReportFindFirstArgs>(args?: SelectSubset<T, ProblemReportFindFirstArgs<ExtArgs>>): Prisma__ProblemReportClient<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReportFindFirstOrThrowArgs} args - Arguments to find a ProblemReport
     * @example
     * // Get one ProblemReport
     * const problemReport = await prisma.problemReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemReportClient<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProblemReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemReports
     * const problemReports = await prisma.problemReport.findMany()
     * 
     * // Get first 10 ProblemReports
     * const problemReports = await prisma.problemReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemReportWithIdOnly = await prisma.problemReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemReportFindManyArgs>(args?: SelectSubset<T, ProblemReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProblemReport.
     * @param {ProblemReportCreateArgs} args - Arguments to create a ProblemReport.
     * @example
     * // Create one ProblemReport
     * const ProblemReport = await prisma.problemReport.create({
     *   data: {
     *     // ... data to create a ProblemReport
     *   }
     * })
     * 
     */
    create<T extends ProblemReportCreateArgs>(args: SelectSubset<T, ProblemReportCreateArgs<ExtArgs>>): Prisma__ProblemReportClient<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProblemReports.
     * @param {ProblemReportCreateManyArgs} args - Arguments to create many ProblemReports.
     * @example
     * // Create many ProblemReports
     * const problemReport = await prisma.problemReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemReportCreateManyArgs>(args?: SelectSubset<T, ProblemReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProblemReports and returns the data saved in the database.
     * @param {ProblemReportCreateManyAndReturnArgs} args - Arguments to create many ProblemReports.
     * @example
     * // Create many ProblemReports
     * const problemReport = await prisma.problemReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProblemReports and only return the `id`
     * const problemReportWithIdOnly = await prisma.problemReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProblemReport.
     * @param {ProblemReportDeleteArgs} args - Arguments to delete one ProblemReport.
     * @example
     * // Delete one ProblemReport
     * const ProblemReport = await prisma.problemReport.delete({
     *   where: {
     *     // ... filter to delete one ProblemReport
     *   }
     * })
     * 
     */
    delete<T extends ProblemReportDeleteArgs>(args: SelectSubset<T, ProblemReportDeleteArgs<ExtArgs>>): Prisma__ProblemReportClient<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProblemReport.
     * @param {ProblemReportUpdateArgs} args - Arguments to update one ProblemReport.
     * @example
     * // Update one ProblemReport
     * const problemReport = await prisma.problemReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemReportUpdateArgs>(args: SelectSubset<T, ProblemReportUpdateArgs<ExtArgs>>): Prisma__ProblemReportClient<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProblemReports.
     * @param {ProblemReportDeleteManyArgs} args - Arguments to filter ProblemReports to delete.
     * @example
     * // Delete a few ProblemReports
     * const { count } = await prisma.problemReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemReportDeleteManyArgs>(args?: SelectSubset<T, ProblemReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemReports
     * const problemReport = await prisma.problemReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemReportUpdateManyArgs>(args: SelectSubset<T, ProblemReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemReports and returns the data updated in the database.
     * @param {ProblemReportUpdateManyAndReturnArgs} args - Arguments to update many ProblemReports.
     * @example
     * // Update many ProblemReports
     * const problemReport = await prisma.problemReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProblemReports and only return the `id`
     * const problemReportWithIdOnly = await prisma.problemReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemReportUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProblemReport.
     * @param {ProblemReportUpsertArgs} args - Arguments to update or create a ProblemReport.
     * @example
     * // Update or create a ProblemReport
     * const problemReport = await prisma.problemReport.upsert({
     *   create: {
     *     // ... data to create a ProblemReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemReport we want to update
     *   }
     * })
     */
    upsert<T extends ProblemReportUpsertArgs>(args: SelectSubset<T, ProblemReportUpsertArgs<ExtArgs>>): Prisma__ProblemReportClient<$Result.GetResult<Prisma.$ProblemReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProblemReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReportCountArgs} args - Arguments to filter ProblemReports to count.
     * @example
     * // Count the number of ProblemReports
     * const count = await prisma.problemReport.count({
     *   where: {
     *     // ... the filter for the ProblemReports we want to count
     *   }
     * })
    **/
    count<T extends ProblemReportCountArgs>(
      args?: Subset<T, ProblemReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemReportAggregateArgs>(args: Subset<T, ProblemReportAggregateArgs>): Prisma.PrismaPromise<GetProblemReportAggregateType<T>>

    /**
     * Group by ProblemReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemReportGroupByArgs['orderBy'] }
        : { orderBy?: ProblemReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProblemReport model
   */
  readonly fields: ProblemReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problem<T extends ProblemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDefaultArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProblemReport model
   */
  interface ProblemReportFieldRefs {
    readonly id: FieldRef<"ProblemReport", 'String'>
    readonly problemId: FieldRef<"ProblemReport", 'String'>
    readonly userId: FieldRef<"ProblemReport", 'String'>
    readonly reason: FieldRef<"ProblemReport", 'ReportReason'>
    readonly description: FieldRef<"ProblemReport", 'String'>
    readonly status: FieldRef<"ProblemReport", 'String'>
    readonly createdAt: FieldRef<"ProblemReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProblemReport findUnique
   */
  export type ProblemReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    /**
     * Filter, which ProblemReport to fetch.
     */
    where: ProblemReportWhereUniqueInput
  }

  /**
   * ProblemReport findUniqueOrThrow
   */
  export type ProblemReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    /**
     * Filter, which ProblemReport to fetch.
     */
    where: ProblemReportWhereUniqueInput
  }

  /**
   * ProblemReport findFirst
   */
  export type ProblemReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    /**
     * Filter, which ProblemReport to fetch.
     */
    where?: ProblemReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemReports to fetch.
     */
    orderBy?: ProblemReportOrderByWithRelationInput | ProblemReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemReports.
     */
    cursor?: ProblemReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemReports.
     */
    distinct?: ProblemReportScalarFieldEnum | ProblemReportScalarFieldEnum[]
  }

  /**
   * ProblemReport findFirstOrThrow
   */
  export type ProblemReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    /**
     * Filter, which ProblemReport to fetch.
     */
    where?: ProblemReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemReports to fetch.
     */
    orderBy?: ProblemReportOrderByWithRelationInput | ProblemReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemReports.
     */
    cursor?: ProblemReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemReports.
     */
    distinct?: ProblemReportScalarFieldEnum | ProblemReportScalarFieldEnum[]
  }

  /**
   * ProblemReport findMany
   */
  export type ProblemReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    /**
     * Filter, which ProblemReports to fetch.
     */
    where?: ProblemReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemReports to fetch.
     */
    orderBy?: ProblemReportOrderByWithRelationInput | ProblemReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemReports.
     */
    cursor?: ProblemReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemReports.
     */
    skip?: number
    distinct?: ProblemReportScalarFieldEnum | ProblemReportScalarFieldEnum[]
  }

  /**
   * ProblemReport create
   */
  export type ProblemReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    /**
     * The data needed to create a ProblemReport.
     */
    data: XOR<ProblemReportCreateInput, ProblemReportUncheckedCreateInput>
  }

  /**
   * ProblemReport createMany
   */
  export type ProblemReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProblemReports.
     */
    data: ProblemReportCreateManyInput | ProblemReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProblemReport createManyAndReturn
   */
  export type ProblemReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * The data used to create many ProblemReports.
     */
    data: ProblemReportCreateManyInput | ProblemReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemReport update
   */
  export type ProblemReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    /**
     * The data needed to update a ProblemReport.
     */
    data: XOR<ProblemReportUpdateInput, ProblemReportUncheckedUpdateInput>
    /**
     * Choose, which ProblemReport to update.
     */
    where: ProblemReportWhereUniqueInput
  }

  /**
   * ProblemReport updateMany
   */
  export type ProblemReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProblemReports.
     */
    data: XOR<ProblemReportUpdateManyMutationInput, ProblemReportUncheckedUpdateManyInput>
    /**
     * Filter which ProblemReports to update
     */
    where?: ProblemReportWhereInput
    /**
     * Limit how many ProblemReports to update.
     */
    limit?: number
  }

  /**
   * ProblemReport updateManyAndReturn
   */
  export type ProblemReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * The data used to update ProblemReports.
     */
    data: XOR<ProblemReportUpdateManyMutationInput, ProblemReportUncheckedUpdateManyInput>
    /**
     * Filter which ProblemReports to update
     */
    where?: ProblemReportWhereInput
    /**
     * Limit how many ProblemReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemReport upsert
   */
  export type ProblemReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    /**
     * The filter to search for the ProblemReport to update in case it exists.
     */
    where: ProblemReportWhereUniqueInput
    /**
     * In case the ProblemReport found by the `where` argument doesn't exist, create a new ProblemReport with this data.
     */
    create: XOR<ProblemReportCreateInput, ProblemReportUncheckedCreateInput>
    /**
     * In case the ProblemReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemReportUpdateInput, ProblemReportUncheckedUpdateInput>
  }

  /**
   * ProblemReport delete
   */
  export type ProblemReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
    /**
     * Filter which ProblemReport to delete.
     */
    where: ProblemReportWhereUniqueInput
  }

  /**
   * ProblemReport deleteMany
   */
  export type ProblemReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemReports to delete
     */
    where?: ProblemReportWhereInput
    /**
     * Limit how many ProblemReports to delete.
     */
    limit?: number
  }

  /**
   * ProblemReport without action
   */
  export type ProblemReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemReport
     */
    select?: ProblemReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemReport
     */
    omit?: ProblemReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemReportInclude<ExtArgs> | null
  }


  /**
   * Model ProblemDiscussion
   */

  export type AggregateProblemDiscussion = {
    _count: ProblemDiscussionCountAggregateOutputType | null
    _min: ProblemDiscussionMinAggregateOutputType | null
    _max: ProblemDiscussionMaxAggregateOutputType | null
  }

  export type ProblemDiscussionMinAggregateOutputType = {
    id: string | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemDiscussionMaxAggregateOutputType = {
    id: string | null
    problemId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemDiscussionCountAggregateOutputType = {
    id: number
    problemId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemDiscussionMinAggregateInputType = {
    id?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemDiscussionMaxAggregateInputType = {
    id?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemDiscussionCountAggregateInputType = {
    id?: true
    problemId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemDiscussionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemDiscussion to aggregate.
     */
    where?: ProblemDiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemDiscussions to fetch.
     */
    orderBy?: ProblemDiscussionOrderByWithRelationInput | ProblemDiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemDiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemDiscussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemDiscussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemDiscussions
    **/
    _count?: true | ProblemDiscussionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemDiscussionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemDiscussionMaxAggregateInputType
  }

  export type GetProblemDiscussionAggregateType<T extends ProblemDiscussionAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemDiscussion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemDiscussion[P]>
      : GetScalarType<T[P], AggregateProblemDiscussion[P]>
  }




  export type ProblemDiscussionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemDiscussionWhereInput
    orderBy?: ProblemDiscussionOrderByWithAggregationInput | ProblemDiscussionOrderByWithAggregationInput[]
    by: ProblemDiscussionScalarFieldEnum[] | ProblemDiscussionScalarFieldEnum
    having?: ProblemDiscussionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemDiscussionCountAggregateInputType | true
    _min?: ProblemDiscussionMinAggregateInputType
    _max?: ProblemDiscussionMaxAggregateInputType
  }

  export type ProblemDiscussionGroupByOutputType = {
    id: string
    problemId: string
    createdAt: Date
    updatedAt: Date
    _count: ProblemDiscussionCountAggregateOutputType | null
    _min: ProblemDiscussionMinAggregateOutputType | null
    _max: ProblemDiscussionMaxAggregateOutputType | null
  }

  type GetProblemDiscussionGroupByPayload<T extends ProblemDiscussionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemDiscussionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemDiscussionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemDiscussionGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemDiscussionGroupByOutputType[P]>
        }
      >
    >


  export type ProblemDiscussionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    messages?: boolean | ProblemDiscussion$messagesArgs<ExtArgs>
    _count?: boolean | ProblemDiscussionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemDiscussion"]>

  export type ProblemDiscussionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemDiscussion"]>

  export type ProblemDiscussionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemDiscussion"]>

  export type ProblemDiscussionSelectScalar = {
    id?: boolean
    problemId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemDiscussionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "problemId" | "createdAt" | "updatedAt", ExtArgs["result"]["problemDiscussion"]>
  export type ProblemDiscussionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    messages?: boolean | ProblemDiscussion$messagesArgs<ExtArgs>
    _count?: boolean | ProblemDiscussionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProblemDiscussionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }
  export type ProblemDiscussionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
  }

  export type $ProblemDiscussionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProblemDiscussion"
    objects: {
      problem: Prisma.$ProblemPayload<ExtArgs>
      messages: Prisma.$DiscussionMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      problemId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["problemDiscussion"]>
    composites: {}
  }

  type ProblemDiscussionGetPayload<S extends boolean | null | undefined | ProblemDiscussionDefaultArgs> = $Result.GetResult<Prisma.$ProblemDiscussionPayload, S>

  type ProblemDiscussionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemDiscussionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemDiscussionCountAggregateInputType | true
    }

  export interface ProblemDiscussionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemDiscussion'], meta: { name: 'ProblemDiscussion' } }
    /**
     * Find zero or one ProblemDiscussion that matches the filter.
     * @param {ProblemDiscussionFindUniqueArgs} args - Arguments to find a ProblemDiscussion
     * @example
     * // Get one ProblemDiscussion
     * const problemDiscussion = await prisma.problemDiscussion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemDiscussionFindUniqueArgs>(args: SelectSubset<T, ProblemDiscussionFindUniqueArgs<ExtArgs>>): Prisma__ProblemDiscussionClient<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProblemDiscussion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemDiscussionFindUniqueOrThrowArgs} args - Arguments to find a ProblemDiscussion
     * @example
     * // Get one ProblemDiscussion
     * const problemDiscussion = await prisma.problemDiscussion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemDiscussionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemDiscussionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemDiscussionClient<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemDiscussion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemDiscussionFindFirstArgs} args - Arguments to find a ProblemDiscussion
     * @example
     * // Get one ProblemDiscussion
     * const problemDiscussion = await prisma.problemDiscussion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemDiscussionFindFirstArgs>(args?: SelectSubset<T, ProblemDiscussionFindFirstArgs<ExtArgs>>): Prisma__ProblemDiscussionClient<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemDiscussion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemDiscussionFindFirstOrThrowArgs} args - Arguments to find a ProblemDiscussion
     * @example
     * // Get one ProblemDiscussion
     * const problemDiscussion = await prisma.problemDiscussion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemDiscussionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemDiscussionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemDiscussionClient<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProblemDiscussions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemDiscussionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemDiscussions
     * const problemDiscussions = await prisma.problemDiscussion.findMany()
     * 
     * // Get first 10 ProblemDiscussions
     * const problemDiscussions = await prisma.problemDiscussion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemDiscussionWithIdOnly = await prisma.problemDiscussion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemDiscussionFindManyArgs>(args?: SelectSubset<T, ProblemDiscussionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProblemDiscussion.
     * @param {ProblemDiscussionCreateArgs} args - Arguments to create a ProblemDiscussion.
     * @example
     * // Create one ProblemDiscussion
     * const ProblemDiscussion = await prisma.problemDiscussion.create({
     *   data: {
     *     // ... data to create a ProblemDiscussion
     *   }
     * })
     * 
     */
    create<T extends ProblemDiscussionCreateArgs>(args: SelectSubset<T, ProblemDiscussionCreateArgs<ExtArgs>>): Prisma__ProblemDiscussionClient<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProblemDiscussions.
     * @param {ProblemDiscussionCreateManyArgs} args - Arguments to create many ProblemDiscussions.
     * @example
     * // Create many ProblemDiscussions
     * const problemDiscussion = await prisma.problemDiscussion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemDiscussionCreateManyArgs>(args?: SelectSubset<T, ProblemDiscussionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProblemDiscussions and returns the data saved in the database.
     * @param {ProblemDiscussionCreateManyAndReturnArgs} args - Arguments to create many ProblemDiscussions.
     * @example
     * // Create many ProblemDiscussions
     * const problemDiscussion = await prisma.problemDiscussion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProblemDiscussions and only return the `id`
     * const problemDiscussionWithIdOnly = await prisma.problemDiscussion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemDiscussionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemDiscussionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProblemDiscussion.
     * @param {ProblemDiscussionDeleteArgs} args - Arguments to delete one ProblemDiscussion.
     * @example
     * // Delete one ProblemDiscussion
     * const ProblemDiscussion = await prisma.problemDiscussion.delete({
     *   where: {
     *     // ... filter to delete one ProblemDiscussion
     *   }
     * })
     * 
     */
    delete<T extends ProblemDiscussionDeleteArgs>(args: SelectSubset<T, ProblemDiscussionDeleteArgs<ExtArgs>>): Prisma__ProblemDiscussionClient<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProblemDiscussion.
     * @param {ProblemDiscussionUpdateArgs} args - Arguments to update one ProblemDiscussion.
     * @example
     * // Update one ProblemDiscussion
     * const problemDiscussion = await prisma.problemDiscussion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemDiscussionUpdateArgs>(args: SelectSubset<T, ProblemDiscussionUpdateArgs<ExtArgs>>): Prisma__ProblemDiscussionClient<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProblemDiscussions.
     * @param {ProblemDiscussionDeleteManyArgs} args - Arguments to filter ProblemDiscussions to delete.
     * @example
     * // Delete a few ProblemDiscussions
     * const { count } = await prisma.problemDiscussion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemDiscussionDeleteManyArgs>(args?: SelectSubset<T, ProblemDiscussionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemDiscussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemDiscussionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemDiscussions
     * const problemDiscussion = await prisma.problemDiscussion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemDiscussionUpdateManyArgs>(args: SelectSubset<T, ProblemDiscussionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemDiscussions and returns the data updated in the database.
     * @param {ProblemDiscussionUpdateManyAndReturnArgs} args - Arguments to update many ProblemDiscussions.
     * @example
     * // Update many ProblemDiscussions
     * const problemDiscussion = await prisma.problemDiscussion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProblemDiscussions and only return the `id`
     * const problemDiscussionWithIdOnly = await prisma.problemDiscussion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemDiscussionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemDiscussionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProblemDiscussion.
     * @param {ProblemDiscussionUpsertArgs} args - Arguments to update or create a ProblemDiscussion.
     * @example
     * // Update or create a ProblemDiscussion
     * const problemDiscussion = await prisma.problemDiscussion.upsert({
     *   create: {
     *     // ... data to create a ProblemDiscussion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemDiscussion we want to update
     *   }
     * })
     */
    upsert<T extends ProblemDiscussionUpsertArgs>(args: SelectSubset<T, ProblemDiscussionUpsertArgs<ExtArgs>>): Prisma__ProblemDiscussionClient<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProblemDiscussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemDiscussionCountArgs} args - Arguments to filter ProblemDiscussions to count.
     * @example
     * // Count the number of ProblemDiscussions
     * const count = await prisma.problemDiscussion.count({
     *   where: {
     *     // ... the filter for the ProblemDiscussions we want to count
     *   }
     * })
    **/
    count<T extends ProblemDiscussionCountArgs>(
      args?: Subset<T, ProblemDiscussionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemDiscussionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemDiscussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemDiscussionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemDiscussionAggregateArgs>(args: Subset<T, ProblemDiscussionAggregateArgs>): Prisma.PrismaPromise<GetProblemDiscussionAggregateType<T>>

    /**
     * Group by ProblemDiscussion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemDiscussionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemDiscussionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemDiscussionGroupByArgs['orderBy'] }
        : { orderBy?: ProblemDiscussionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemDiscussionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemDiscussionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProblemDiscussion model
   */
  readonly fields: ProblemDiscussionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemDiscussion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemDiscussionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problem<T extends ProblemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDefaultArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    messages<T extends ProblemDiscussion$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDiscussion$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProblemDiscussion model
   */
  interface ProblemDiscussionFieldRefs {
    readonly id: FieldRef<"ProblemDiscussion", 'String'>
    readonly problemId: FieldRef<"ProblemDiscussion", 'String'>
    readonly createdAt: FieldRef<"ProblemDiscussion", 'DateTime'>
    readonly updatedAt: FieldRef<"ProblemDiscussion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProblemDiscussion findUnique
   */
  export type ProblemDiscussionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    /**
     * Filter, which ProblemDiscussion to fetch.
     */
    where: ProblemDiscussionWhereUniqueInput
  }

  /**
   * ProblemDiscussion findUniqueOrThrow
   */
  export type ProblemDiscussionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    /**
     * Filter, which ProblemDiscussion to fetch.
     */
    where: ProblemDiscussionWhereUniqueInput
  }

  /**
   * ProblemDiscussion findFirst
   */
  export type ProblemDiscussionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    /**
     * Filter, which ProblemDiscussion to fetch.
     */
    where?: ProblemDiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemDiscussions to fetch.
     */
    orderBy?: ProblemDiscussionOrderByWithRelationInput | ProblemDiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemDiscussions.
     */
    cursor?: ProblemDiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemDiscussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemDiscussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemDiscussions.
     */
    distinct?: ProblemDiscussionScalarFieldEnum | ProblemDiscussionScalarFieldEnum[]
  }

  /**
   * ProblemDiscussion findFirstOrThrow
   */
  export type ProblemDiscussionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    /**
     * Filter, which ProblemDiscussion to fetch.
     */
    where?: ProblemDiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemDiscussions to fetch.
     */
    orderBy?: ProblemDiscussionOrderByWithRelationInput | ProblemDiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemDiscussions.
     */
    cursor?: ProblemDiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemDiscussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemDiscussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemDiscussions.
     */
    distinct?: ProblemDiscussionScalarFieldEnum | ProblemDiscussionScalarFieldEnum[]
  }

  /**
   * ProblemDiscussion findMany
   */
  export type ProblemDiscussionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    /**
     * Filter, which ProblemDiscussions to fetch.
     */
    where?: ProblemDiscussionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemDiscussions to fetch.
     */
    orderBy?: ProblemDiscussionOrderByWithRelationInput | ProblemDiscussionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemDiscussions.
     */
    cursor?: ProblemDiscussionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemDiscussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemDiscussions.
     */
    skip?: number
    distinct?: ProblemDiscussionScalarFieldEnum | ProblemDiscussionScalarFieldEnum[]
  }

  /**
   * ProblemDiscussion create
   */
  export type ProblemDiscussionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProblemDiscussion.
     */
    data: XOR<ProblemDiscussionCreateInput, ProblemDiscussionUncheckedCreateInput>
  }

  /**
   * ProblemDiscussion createMany
   */
  export type ProblemDiscussionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProblemDiscussions.
     */
    data: ProblemDiscussionCreateManyInput | ProblemDiscussionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProblemDiscussion createManyAndReturn
   */
  export type ProblemDiscussionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * The data used to create many ProblemDiscussions.
     */
    data: ProblemDiscussionCreateManyInput | ProblemDiscussionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemDiscussion update
   */
  export type ProblemDiscussionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProblemDiscussion.
     */
    data: XOR<ProblemDiscussionUpdateInput, ProblemDiscussionUncheckedUpdateInput>
    /**
     * Choose, which ProblemDiscussion to update.
     */
    where: ProblemDiscussionWhereUniqueInput
  }

  /**
   * ProblemDiscussion updateMany
   */
  export type ProblemDiscussionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProblemDiscussions.
     */
    data: XOR<ProblemDiscussionUpdateManyMutationInput, ProblemDiscussionUncheckedUpdateManyInput>
    /**
     * Filter which ProblemDiscussions to update
     */
    where?: ProblemDiscussionWhereInput
    /**
     * Limit how many ProblemDiscussions to update.
     */
    limit?: number
  }

  /**
   * ProblemDiscussion updateManyAndReturn
   */
  export type ProblemDiscussionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * The data used to update ProblemDiscussions.
     */
    data: XOR<ProblemDiscussionUpdateManyMutationInput, ProblemDiscussionUncheckedUpdateManyInput>
    /**
     * Filter which ProblemDiscussions to update
     */
    where?: ProblemDiscussionWhereInput
    /**
     * Limit how many ProblemDiscussions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemDiscussion upsert
   */
  export type ProblemDiscussionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProblemDiscussion to update in case it exists.
     */
    where: ProblemDiscussionWhereUniqueInput
    /**
     * In case the ProblemDiscussion found by the `where` argument doesn't exist, create a new ProblemDiscussion with this data.
     */
    create: XOR<ProblemDiscussionCreateInput, ProblemDiscussionUncheckedCreateInput>
    /**
     * In case the ProblemDiscussion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemDiscussionUpdateInput, ProblemDiscussionUncheckedUpdateInput>
  }

  /**
   * ProblemDiscussion delete
   */
  export type ProblemDiscussionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
    /**
     * Filter which ProblemDiscussion to delete.
     */
    where: ProblemDiscussionWhereUniqueInput
  }

  /**
   * ProblemDiscussion deleteMany
   */
  export type ProblemDiscussionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemDiscussions to delete
     */
    where?: ProblemDiscussionWhereInput
    /**
     * Limit how many ProblemDiscussions to delete.
     */
    limit?: number
  }

  /**
   * ProblemDiscussion.messages
   */
  export type ProblemDiscussion$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    where?: DiscussionMessageWhereInput
    orderBy?: DiscussionMessageOrderByWithRelationInput | DiscussionMessageOrderByWithRelationInput[]
    cursor?: DiscussionMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionMessageScalarFieldEnum | DiscussionMessageScalarFieldEnum[]
  }

  /**
   * ProblemDiscussion without action
   */
  export type ProblemDiscussionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemDiscussion
     */
    select?: ProblemDiscussionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemDiscussion
     */
    omit?: ProblemDiscussionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemDiscussionInclude<ExtArgs> | null
  }


  /**
   * Model DiscussionMessage
   */

  export type AggregateDiscussionMessage = {
    _count: DiscussionMessageCountAggregateOutputType | null
    _min: DiscussionMessageMinAggregateOutputType | null
    _max: DiscussionMessageMaxAggregateOutputType | null
  }

  export type DiscussionMessageMinAggregateOutputType = {
    id: string | null
    discussionId: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiscussionMessageMaxAggregateOutputType = {
    id: string | null
    discussionId: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiscussionMessageCountAggregateOutputType = {
    id: number
    discussionId: number
    userId: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DiscussionMessageMinAggregateInputType = {
    id?: true
    discussionId?: true
    userId?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiscussionMessageMaxAggregateInputType = {
    id?: true
    discussionId?: true
    userId?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiscussionMessageCountAggregateInputType = {
    id?: true
    discussionId?: true
    userId?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DiscussionMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionMessage to aggregate.
     */
    where?: DiscussionMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionMessages to fetch.
     */
    orderBy?: DiscussionMessageOrderByWithRelationInput | DiscussionMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscussionMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiscussionMessages
    **/
    _count?: true | DiscussionMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscussionMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscussionMessageMaxAggregateInputType
  }

  export type GetDiscussionMessageAggregateType<T extends DiscussionMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscussionMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussionMessage[P]>
      : GetScalarType<T[P], AggregateDiscussionMessage[P]>
  }




  export type DiscussionMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionMessageWhereInput
    orderBy?: DiscussionMessageOrderByWithAggregationInput | DiscussionMessageOrderByWithAggregationInput[]
    by: DiscussionMessageScalarFieldEnum[] | DiscussionMessageScalarFieldEnum
    having?: DiscussionMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscussionMessageCountAggregateInputType | true
    _min?: DiscussionMessageMinAggregateInputType
    _max?: DiscussionMessageMaxAggregateInputType
  }

  export type DiscussionMessageGroupByOutputType = {
    id: string
    discussionId: string
    userId: string
    content: string
    createdAt: Date
    updatedAt: Date
    _count: DiscussionMessageCountAggregateOutputType | null
    _min: DiscussionMessageMinAggregateOutputType | null
    _max: DiscussionMessageMaxAggregateOutputType | null
  }

  type GetDiscussionMessageGroupByPayload<T extends DiscussionMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscussionMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscussionMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscussionMessageGroupByOutputType[P]>
            : GetScalarType<T[P], DiscussionMessageGroupByOutputType[P]>
        }
      >
    >


  export type DiscussionMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discussionId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    discussion?: boolean | ProblemDiscussionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    replies?: boolean | DiscussionMessage$repliesArgs<ExtArgs>
    upvotes?: boolean | DiscussionMessage$upvotesArgs<ExtArgs>
    _count?: boolean | DiscussionMessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionMessage"]>

  export type DiscussionMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discussionId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    discussion?: boolean | ProblemDiscussionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionMessage"]>

  export type DiscussionMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    discussionId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    discussion?: boolean | ProblemDiscussionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionMessage"]>

  export type DiscussionMessageSelectScalar = {
    id?: boolean
    discussionId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DiscussionMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "discussionId" | "userId" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["discussionMessage"]>
  export type DiscussionMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | ProblemDiscussionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    replies?: boolean | DiscussionMessage$repliesArgs<ExtArgs>
    upvotes?: boolean | DiscussionMessage$upvotesArgs<ExtArgs>
    _count?: boolean | DiscussionMessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DiscussionMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | ProblemDiscussionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DiscussionMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | ProblemDiscussionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DiscussionMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiscussionMessage"
    objects: {
      discussion: Prisma.$ProblemDiscussionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      replies: Prisma.$DiscussionReplyPayload<ExtArgs>[]
      upvotes: Prisma.$DiscussionUpvotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      discussionId: string
      userId: string
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["discussionMessage"]>
    composites: {}
  }

  type DiscussionMessageGetPayload<S extends boolean | null | undefined | DiscussionMessageDefaultArgs> = $Result.GetResult<Prisma.$DiscussionMessagePayload, S>

  type DiscussionMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiscussionMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiscussionMessageCountAggregateInputType | true
    }

  export interface DiscussionMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiscussionMessage'], meta: { name: 'DiscussionMessage' } }
    /**
     * Find zero or one DiscussionMessage that matches the filter.
     * @param {DiscussionMessageFindUniqueArgs} args - Arguments to find a DiscussionMessage
     * @example
     * // Get one DiscussionMessage
     * const discussionMessage = await prisma.discussionMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscussionMessageFindUniqueArgs>(args: SelectSubset<T, DiscussionMessageFindUniqueArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DiscussionMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiscussionMessageFindUniqueOrThrowArgs} args - Arguments to find a DiscussionMessage
     * @example
     * // Get one DiscussionMessage
     * const discussionMessage = await prisma.discussionMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscussionMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscussionMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionMessageFindFirstArgs} args - Arguments to find a DiscussionMessage
     * @example
     * // Get one DiscussionMessage
     * const discussionMessage = await prisma.discussionMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscussionMessageFindFirstArgs>(args?: SelectSubset<T, DiscussionMessageFindFirstArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionMessageFindFirstOrThrowArgs} args - Arguments to find a DiscussionMessage
     * @example
     * // Get one DiscussionMessage
     * const discussionMessage = await prisma.discussionMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscussionMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscussionMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DiscussionMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiscussionMessages
     * const discussionMessages = await prisma.discussionMessage.findMany()
     * 
     * // Get first 10 DiscussionMessages
     * const discussionMessages = await prisma.discussionMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discussionMessageWithIdOnly = await prisma.discussionMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiscussionMessageFindManyArgs>(args?: SelectSubset<T, DiscussionMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DiscussionMessage.
     * @param {DiscussionMessageCreateArgs} args - Arguments to create a DiscussionMessage.
     * @example
     * // Create one DiscussionMessage
     * const DiscussionMessage = await prisma.discussionMessage.create({
     *   data: {
     *     // ... data to create a DiscussionMessage
     *   }
     * })
     * 
     */
    create<T extends DiscussionMessageCreateArgs>(args: SelectSubset<T, DiscussionMessageCreateArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DiscussionMessages.
     * @param {DiscussionMessageCreateManyArgs} args - Arguments to create many DiscussionMessages.
     * @example
     * // Create many DiscussionMessages
     * const discussionMessage = await prisma.discussionMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscussionMessageCreateManyArgs>(args?: SelectSubset<T, DiscussionMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DiscussionMessages and returns the data saved in the database.
     * @param {DiscussionMessageCreateManyAndReturnArgs} args - Arguments to create many DiscussionMessages.
     * @example
     * // Create many DiscussionMessages
     * const discussionMessage = await prisma.discussionMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DiscussionMessages and only return the `id`
     * const discussionMessageWithIdOnly = await prisma.discussionMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiscussionMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, DiscussionMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DiscussionMessage.
     * @param {DiscussionMessageDeleteArgs} args - Arguments to delete one DiscussionMessage.
     * @example
     * // Delete one DiscussionMessage
     * const DiscussionMessage = await prisma.discussionMessage.delete({
     *   where: {
     *     // ... filter to delete one DiscussionMessage
     *   }
     * })
     * 
     */
    delete<T extends DiscussionMessageDeleteArgs>(args: SelectSubset<T, DiscussionMessageDeleteArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DiscussionMessage.
     * @param {DiscussionMessageUpdateArgs} args - Arguments to update one DiscussionMessage.
     * @example
     * // Update one DiscussionMessage
     * const discussionMessage = await prisma.discussionMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscussionMessageUpdateArgs>(args: SelectSubset<T, DiscussionMessageUpdateArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DiscussionMessages.
     * @param {DiscussionMessageDeleteManyArgs} args - Arguments to filter DiscussionMessages to delete.
     * @example
     * // Delete a few DiscussionMessages
     * const { count } = await prisma.discussionMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscussionMessageDeleteManyArgs>(args?: SelectSubset<T, DiscussionMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiscussionMessages
     * const discussionMessage = await prisma.discussionMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscussionMessageUpdateManyArgs>(args: SelectSubset<T, DiscussionMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionMessages and returns the data updated in the database.
     * @param {DiscussionMessageUpdateManyAndReturnArgs} args - Arguments to update many DiscussionMessages.
     * @example
     * // Update many DiscussionMessages
     * const discussionMessage = await prisma.discussionMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DiscussionMessages and only return the `id`
     * const discussionMessageWithIdOnly = await prisma.discussionMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DiscussionMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, DiscussionMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DiscussionMessage.
     * @param {DiscussionMessageUpsertArgs} args - Arguments to update or create a DiscussionMessage.
     * @example
     * // Update or create a DiscussionMessage
     * const discussionMessage = await prisma.discussionMessage.upsert({
     *   create: {
     *     // ... data to create a DiscussionMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiscussionMessage we want to update
     *   }
     * })
     */
    upsert<T extends DiscussionMessageUpsertArgs>(args: SelectSubset<T, DiscussionMessageUpsertArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DiscussionMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionMessageCountArgs} args - Arguments to filter DiscussionMessages to count.
     * @example
     * // Count the number of DiscussionMessages
     * const count = await prisma.discussionMessage.count({
     *   where: {
     *     // ... the filter for the DiscussionMessages we want to count
     *   }
     * })
    **/
    count<T extends DiscussionMessageCountArgs>(
      args?: Subset<T, DiscussionMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiscussionMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionMessageAggregateArgs>(args: Subset<T, DiscussionMessageAggregateArgs>): Prisma.PrismaPromise<GetDiscussionMessageAggregateType<T>>

    /**
     * Group by DiscussionMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscussionMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscussionMessageGroupByArgs['orderBy'] }
        : { orderBy?: DiscussionMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscussionMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiscussionMessage model
   */
  readonly fields: DiscussionMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiscussionMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscussionMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discussion<T extends ProblemDiscussionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDiscussionDefaultArgs<ExtArgs>>): Prisma__ProblemDiscussionClient<$Result.GetResult<Prisma.$ProblemDiscussionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    replies<T extends DiscussionMessage$repliesArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionMessage$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    upvotes<T extends DiscussionMessage$upvotesArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionMessage$upvotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiscussionMessage model
   */
  interface DiscussionMessageFieldRefs {
    readonly id: FieldRef<"DiscussionMessage", 'String'>
    readonly discussionId: FieldRef<"DiscussionMessage", 'String'>
    readonly userId: FieldRef<"DiscussionMessage", 'String'>
    readonly content: FieldRef<"DiscussionMessage", 'String'>
    readonly createdAt: FieldRef<"DiscussionMessage", 'DateTime'>
    readonly updatedAt: FieldRef<"DiscussionMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DiscussionMessage findUnique
   */
  export type DiscussionMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionMessage to fetch.
     */
    where: DiscussionMessageWhereUniqueInput
  }

  /**
   * DiscussionMessage findUniqueOrThrow
   */
  export type DiscussionMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionMessage to fetch.
     */
    where: DiscussionMessageWhereUniqueInput
  }

  /**
   * DiscussionMessage findFirst
   */
  export type DiscussionMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionMessage to fetch.
     */
    where?: DiscussionMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionMessages to fetch.
     */
    orderBy?: DiscussionMessageOrderByWithRelationInput | DiscussionMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionMessages.
     */
    cursor?: DiscussionMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionMessages.
     */
    distinct?: DiscussionMessageScalarFieldEnum | DiscussionMessageScalarFieldEnum[]
  }

  /**
   * DiscussionMessage findFirstOrThrow
   */
  export type DiscussionMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionMessage to fetch.
     */
    where?: DiscussionMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionMessages to fetch.
     */
    orderBy?: DiscussionMessageOrderByWithRelationInput | DiscussionMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionMessages.
     */
    cursor?: DiscussionMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionMessages.
     */
    distinct?: DiscussionMessageScalarFieldEnum | DiscussionMessageScalarFieldEnum[]
  }

  /**
   * DiscussionMessage findMany
   */
  export type DiscussionMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionMessages to fetch.
     */
    where?: DiscussionMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionMessages to fetch.
     */
    orderBy?: DiscussionMessageOrderByWithRelationInput | DiscussionMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiscussionMessages.
     */
    cursor?: DiscussionMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionMessages.
     */
    skip?: number
    distinct?: DiscussionMessageScalarFieldEnum | DiscussionMessageScalarFieldEnum[]
  }

  /**
   * DiscussionMessage create
   */
  export type DiscussionMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a DiscussionMessage.
     */
    data: XOR<DiscussionMessageCreateInput, DiscussionMessageUncheckedCreateInput>
  }

  /**
   * DiscussionMessage createMany
   */
  export type DiscussionMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiscussionMessages.
     */
    data: DiscussionMessageCreateManyInput | DiscussionMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiscussionMessage createManyAndReturn
   */
  export type DiscussionMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * The data used to create many DiscussionMessages.
     */
    data: DiscussionMessageCreateManyInput | DiscussionMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionMessage update
   */
  export type DiscussionMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a DiscussionMessage.
     */
    data: XOR<DiscussionMessageUpdateInput, DiscussionMessageUncheckedUpdateInput>
    /**
     * Choose, which DiscussionMessage to update.
     */
    where: DiscussionMessageWhereUniqueInput
  }

  /**
   * DiscussionMessage updateMany
   */
  export type DiscussionMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiscussionMessages.
     */
    data: XOR<DiscussionMessageUpdateManyMutationInput, DiscussionMessageUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionMessages to update
     */
    where?: DiscussionMessageWhereInput
    /**
     * Limit how many DiscussionMessages to update.
     */
    limit?: number
  }

  /**
   * DiscussionMessage updateManyAndReturn
   */
  export type DiscussionMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * The data used to update DiscussionMessages.
     */
    data: XOR<DiscussionMessageUpdateManyMutationInput, DiscussionMessageUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionMessages to update
     */
    where?: DiscussionMessageWhereInput
    /**
     * Limit how many DiscussionMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionMessage upsert
   */
  export type DiscussionMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the DiscussionMessage to update in case it exists.
     */
    where: DiscussionMessageWhereUniqueInput
    /**
     * In case the DiscussionMessage found by the `where` argument doesn't exist, create a new DiscussionMessage with this data.
     */
    create: XOR<DiscussionMessageCreateInput, DiscussionMessageUncheckedCreateInput>
    /**
     * In case the DiscussionMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscussionMessageUpdateInput, DiscussionMessageUncheckedUpdateInput>
  }

  /**
   * DiscussionMessage delete
   */
  export type DiscussionMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
    /**
     * Filter which DiscussionMessage to delete.
     */
    where: DiscussionMessageWhereUniqueInput
  }

  /**
   * DiscussionMessage deleteMany
   */
  export type DiscussionMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionMessages to delete
     */
    where?: DiscussionMessageWhereInput
    /**
     * Limit how many DiscussionMessages to delete.
     */
    limit?: number
  }

  /**
   * DiscussionMessage.replies
   */
  export type DiscussionMessage$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    where?: DiscussionReplyWhereInput
    orderBy?: DiscussionReplyOrderByWithRelationInput | DiscussionReplyOrderByWithRelationInput[]
    cursor?: DiscussionReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionReplyScalarFieldEnum | DiscussionReplyScalarFieldEnum[]
  }

  /**
   * DiscussionMessage.upvotes
   */
  export type DiscussionMessage$upvotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    where?: DiscussionUpvoteWhereInput
    orderBy?: DiscussionUpvoteOrderByWithRelationInput | DiscussionUpvoteOrderByWithRelationInput[]
    cursor?: DiscussionUpvoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionUpvoteScalarFieldEnum | DiscussionUpvoteScalarFieldEnum[]
  }

  /**
   * DiscussionMessage without action
   */
  export type DiscussionMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionMessage
     */
    select?: DiscussionMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionMessage
     */
    omit?: DiscussionMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionMessageInclude<ExtArgs> | null
  }


  /**
   * Model DiscussionReply
   */

  export type AggregateDiscussionReply = {
    _count: DiscussionReplyCountAggregateOutputType | null
    _min: DiscussionReplyMinAggregateOutputType | null
    _max: DiscussionReplyMaxAggregateOutputType | null
  }

  export type DiscussionReplyMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiscussionReplyMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    userId: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiscussionReplyCountAggregateOutputType = {
    id: number
    messageId: number
    userId: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DiscussionReplyMinAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiscussionReplyMaxAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiscussionReplyCountAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DiscussionReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionReply to aggregate.
     */
    where?: DiscussionReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionReplies to fetch.
     */
    orderBy?: DiscussionReplyOrderByWithRelationInput | DiscussionReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscussionReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiscussionReplies
    **/
    _count?: true | DiscussionReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscussionReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscussionReplyMaxAggregateInputType
  }

  export type GetDiscussionReplyAggregateType<T extends DiscussionReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscussionReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussionReply[P]>
      : GetScalarType<T[P], AggregateDiscussionReply[P]>
  }




  export type DiscussionReplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionReplyWhereInput
    orderBy?: DiscussionReplyOrderByWithAggregationInput | DiscussionReplyOrderByWithAggregationInput[]
    by: DiscussionReplyScalarFieldEnum[] | DiscussionReplyScalarFieldEnum
    having?: DiscussionReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscussionReplyCountAggregateInputType | true
    _min?: DiscussionReplyMinAggregateInputType
    _max?: DiscussionReplyMaxAggregateInputType
  }

  export type DiscussionReplyGroupByOutputType = {
    id: string
    messageId: string
    userId: string
    content: string
    createdAt: Date
    updatedAt: Date
    _count: DiscussionReplyCountAggregateOutputType | null
    _min: DiscussionReplyMinAggregateOutputType | null
    _max: DiscussionReplyMaxAggregateOutputType | null
  }

  type GetDiscussionReplyGroupByPayload<T extends DiscussionReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscussionReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscussionReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscussionReplyGroupByOutputType[P]>
            : GetScalarType<T[P], DiscussionReplyGroupByOutputType[P]>
        }
      >
    >


  export type DiscussionReplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionReply"]>

  export type DiscussionReplySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionReply"]>

  export type DiscussionReplySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionReply"]>

  export type DiscussionReplySelectScalar = {
    id?: boolean
    messageId?: boolean
    userId?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DiscussionReplyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "messageId" | "userId" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["discussionReply"]>
  export type DiscussionReplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DiscussionReplyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DiscussionReplyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DiscussionReplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiscussionReply"
    objects: {
      message: Prisma.$DiscussionMessagePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      userId: string
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["discussionReply"]>
    composites: {}
  }

  type DiscussionReplyGetPayload<S extends boolean | null | undefined | DiscussionReplyDefaultArgs> = $Result.GetResult<Prisma.$DiscussionReplyPayload, S>

  type DiscussionReplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiscussionReplyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiscussionReplyCountAggregateInputType | true
    }

  export interface DiscussionReplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiscussionReply'], meta: { name: 'DiscussionReply' } }
    /**
     * Find zero or one DiscussionReply that matches the filter.
     * @param {DiscussionReplyFindUniqueArgs} args - Arguments to find a DiscussionReply
     * @example
     * // Get one DiscussionReply
     * const discussionReply = await prisma.discussionReply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscussionReplyFindUniqueArgs>(args: SelectSubset<T, DiscussionReplyFindUniqueArgs<ExtArgs>>): Prisma__DiscussionReplyClient<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DiscussionReply that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiscussionReplyFindUniqueOrThrowArgs} args - Arguments to find a DiscussionReply
     * @example
     * // Get one DiscussionReply
     * const discussionReply = await prisma.discussionReply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscussionReplyFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscussionReplyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscussionReplyClient<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionReply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionReplyFindFirstArgs} args - Arguments to find a DiscussionReply
     * @example
     * // Get one DiscussionReply
     * const discussionReply = await prisma.discussionReply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscussionReplyFindFirstArgs>(args?: SelectSubset<T, DiscussionReplyFindFirstArgs<ExtArgs>>): Prisma__DiscussionReplyClient<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionReply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionReplyFindFirstOrThrowArgs} args - Arguments to find a DiscussionReply
     * @example
     * // Get one DiscussionReply
     * const discussionReply = await prisma.discussionReply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscussionReplyFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscussionReplyFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscussionReplyClient<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DiscussionReplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionReplyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiscussionReplies
     * const discussionReplies = await prisma.discussionReply.findMany()
     * 
     * // Get first 10 DiscussionReplies
     * const discussionReplies = await prisma.discussionReply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discussionReplyWithIdOnly = await prisma.discussionReply.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiscussionReplyFindManyArgs>(args?: SelectSubset<T, DiscussionReplyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DiscussionReply.
     * @param {DiscussionReplyCreateArgs} args - Arguments to create a DiscussionReply.
     * @example
     * // Create one DiscussionReply
     * const DiscussionReply = await prisma.discussionReply.create({
     *   data: {
     *     // ... data to create a DiscussionReply
     *   }
     * })
     * 
     */
    create<T extends DiscussionReplyCreateArgs>(args: SelectSubset<T, DiscussionReplyCreateArgs<ExtArgs>>): Prisma__DiscussionReplyClient<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DiscussionReplies.
     * @param {DiscussionReplyCreateManyArgs} args - Arguments to create many DiscussionReplies.
     * @example
     * // Create many DiscussionReplies
     * const discussionReply = await prisma.discussionReply.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscussionReplyCreateManyArgs>(args?: SelectSubset<T, DiscussionReplyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DiscussionReplies and returns the data saved in the database.
     * @param {DiscussionReplyCreateManyAndReturnArgs} args - Arguments to create many DiscussionReplies.
     * @example
     * // Create many DiscussionReplies
     * const discussionReply = await prisma.discussionReply.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DiscussionReplies and only return the `id`
     * const discussionReplyWithIdOnly = await prisma.discussionReply.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiscussionReplyCreateManyAndReturnArgs>(args?: SelectSubset<T, DiscussionReplyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DiscussionReply.
     * @param {DiscussionReplyDeleteArgs} args - Arguments to delete one DiscussionReply.
     * @example
     * // Delete one DiscussionReply
     * const DiscussionReply = await prisma.discussionReply.delete({
     *   where: {
     *     // ... filter to delete one DiscussionReply
     *   }
     * })
     * 
     */
    delete<T extends DiscussionReplyDeleteArgs>(args: SelectSubset<T, DiscussionReplyDeleteArgs<ExtArgs>>): Prisma__DiscussionReplyClient<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DiscussionReply.
     * @param {DiscussionReplyUpdateArgs} args - Arguments to update one DiscussionReply.
     * @example
     * // Update one DiscussionReply
     * const discussionReply = await prisma.discussionReply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscussionReplyUpdateArgs>(args: SelectSubset<T, DiscussionReplyUpdateArgs<ExtArgs>>): Prisma__DiscussionReplyClient<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DiscussionReplies.
     * @param {DiscussionReplyDeleteManyArgs} args - Arguments to filter DiscussionReplies to delete.
     * @example
     * // Delete a few DiscussionReplies
     * const { count } = await prisma.discussionReply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscussionReplyDeleteManyArgs>(args?: SelectSubset<T, DiscussionReplyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiscussionReplies
     * const discussionReply = await prisma.discussionReply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscussionReplyUpdateManyArgs>(args: SelectSubset<T, DiscussionReplyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionReplies and returns the data updated in the database.
     * @param {DiscussionReplyUpdateManyAndReturnArgs} args - Arguments to update many DiscussionReplies.
     * @example
     * // Update many DiscussionReplies
     * const discussionReply = await prisma.discussionReply.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DiscussionReplies and only return the `id`
     * const discussionReplyWithIdOnly = await prisma.discussionReply.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DiscussionReplyUpdateManyAndReturnArgs>(args: SelectSubset<T, DiscussionReplyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DiscussionReply.
     * @param {DiscussionReplyUpsertArgs} args - Arguments to update or create a DiscussionReply.
     * @example
     * // Update or create a DiscussionReply
     * const discussionReply = await prisma.discussionReply.upsert({
     *   create: {
     *     // ... data to create a DiscussionReply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiscussionReply we want to update
     *   }
     * })
     */
    upsert<T extends DiscussionReplyUpsertArgs>(args: SelectSubset<T, DiscussionReplyUpsertArgs<ExtArgs>>): Prisma__DiscussionReplyClient<$Result.GetResult<Prisma.$DiscussionReplyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DiscussionReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionReplyCountArgs} args - Arguments to filter DiscussionReplies to count.
     * @example
     * // Count the number of DiscussionReplies
     * const count = await prisma.discussionReply.count({
     *   where: {
     *     // ... the filter for the DiscussionReplies we want to count
     *   }
     * })
    **/
    count<T extends DiscussionReplyCountArgs>(
      args?: Subset<T, DiscussionReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiscussionReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionReplyAggregateArgs>(args: Subset<T, DiscussionReplyAggregateArgs>): Prisma.PrismaPromise<GetDiscussionReplyAggregateType<T>>

    /**
     * Group by DiscussionReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscussionReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscussionReplyGroupByArgs['orderBy'] }
        : { orderBy?: DiscussionReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscussionReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiscussionReply model
   */
  readonly fields: DiscussionReplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiscussionReply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscussionReplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends DiscussionMessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionMessageDefaultArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiscussionReply model
   */
  interface DiscussionReplyFieldRefs {
    readonly id: FieldRef<"DiscussionReply", 'String'>
    readonly messageId: FieldRef<"DiscussionReply", 'String'>
    readonly userId: FieldRef<"DiscussionReply", 'String'>
    readonly content: FieldRef<"DiscussionReply", 'String'>
    readonly createdAt: FieldRef<"DiscussionReply", 'DateTime'>
    readonly updatedAt: FieldRef<"DiscussionReply", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DiscussionReply findUnique
   */
  export type DiscussionReplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionReply to fetch.
     */
    where: DiscussionReplyWhereUniqueInput
  }

  /**
   * DiscussionReply findUniqueOrThrow
   */
  export type DiscussionReplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionReply to fetch.
     */
    where: DiscussionReplyWhereUniqueInput
  }

  /**
   * DiscussionReply findFirst
   */
  export type DiscussionReplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionReply to fetch.
     */
    where?: DiscussionReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionReplies to fetch.
     */
    orderBy?: DiscussionReplyOrderByWithRelationInput | DiscussionReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionReplies.
     */
    cursor?: DiscussionReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionReplies.
     */
    distinct?: DiscussionReplyScalarFieldEnum | DiscussionReplyScalarFieldEnum[]
  }

  /**
   * DiscussionReply findFirstOrThrow
   */
  export type DiscussionReplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionReply to fetch.
     */
    where?: DiscussionReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionReplies to fetch.
     */
    orderBy?: DiscussionReplyOrderByWithRelationInput | DiscussionReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionReplies.
     */
    cursor?: DiscussionReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionReplies.
     */
    distinct?: DiscussionReplyScalarFieldEnum | DiscussionReplyScalarFieldEnum[]
  }

  /**
   * DiscussionReply findMany
   */
  export type DiscussionReplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionReplies to fetch.
     */
    where?: DiscussionReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionReplies to fetch.
     */
    orderBy?: DiscussionReplyOrderByWithRelationInput | DiscussionReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiscussionReplies.
     */
    cursor?: DiscussionReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionReplies.
     */
    skip?: number
    distinct?: DiscussionReplyScalarFieldEnum | DiscussionReplyScalarFieldEnum[]
  }

  /**
   * DiscussionReply create
   */
  export type DiscussionReplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    /**
     * The data needed to create a DiscussionReply.
     */
    data: XOR<DiscussionReplyCreateInput, DiscussionReplyUncheckedCreateInput>
  }

  /**
   * DiscussionReply createMany
   */
  export type DiscussionReplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiscussionReplies.
     */
    data: DiscussionReplyCreateManyInput | DiscussionReplyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiscussionReply createManyAndReturn
   */
  export type DiscussionReplyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * The data used to create many DiscussionReplies.
     */
    data: DiscussionReplyCreateManyInput | DiscussionReplyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionReply update
   */
  export type DiscussionReplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    /**
     * The data needed to update a DiscussionReply.
     */
    data: XOR<DiscussionReplyUpdateInput, DiscussionReplyUncheckedUpdateInput>
    /**
     * Choose, which DiscussionReply to update.
     */
    where: DiscussionReplyWhereUniqueInput
  }

  /**
   * DiscussionReply updateMany
   */
  export type DiscussionReplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiscussionReplies.
     */
    data: XOR<DiscussionReplyUpdateManyMutationInput, DiscussionReplyUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionReplies to update
     */
    where?: DiscussionReplyWhereInput
    /**
     * Limit how many DiscussionReplies to update.
     */
    limit?: number
  }

  /**
   * DiscussionReply updateManyAndReturn
   */
  export type DiscussionReplyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * The data used to update DiscussionReplies.
     */
    data: XOR<DiscussionReplyUpdateManyMutationInput, DiscussionReplyUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionReplies to update
     */
    where?: DiscussionReplyWhereInput
    /**
     * Limit how many DiscussionReplies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionReply upsert
   */
  export type DiscussionReplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    /**
     * The filter to search for the DiscussionReply to update in case it exists.
     */
    where: DiscussionReplyWhereUniqueInput
    /**
     * In case the DiscussionReply found by the `where` argument doesn't exist, create a new DiscussionReply with this data.
     */
    create: XOR<DiscussionReplyCreateInput, DiscussionReplyUncheckedCreateInput>
    /**
     * In case the DiscussionReply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscussionReplyUpdateInput, DiscussionReplyUncheckedUpdateInput>
  }

  /**
   * DiscussionReply delete
   */
  export type DiscussionReplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
    /**
     * Filter which DiscussionReply to delete.
     */
    where: DiscussionReplyWhereUniqueInput
  }

  /**
   * DiscussionReply deleteMany
   */
  export type DiscussionReplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionReplies to delete
     */
    where?: DiscussionReplyWhereInput
    /**
     * Limit how many DiscussionReplies to delete.
     */
    limit?: number
  }

  /**
   * DiscussionReply without action
   */
  export type DiscussionReplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionReply
     */
    select?: DiscussionReplySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionReply
     */
    omit?: DiscussionReplyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionReplyInclude<ExtArgs> | null
  }


  /**
   * Model DiscussionUpvote
   */

  export type AggregateDiscussionUpvote = {
    _count: DiscussionUpvoteCountAggregateOutputType | null
    _min: DiscussionUpvoteMinAggregateOutputType | null
    _max: DiscussionUpvoteMaxAggregateOutputType | null
  }

  export type DiscussionUpvoteMinAggregateOutputType = {
    id: string | null
    userId: string | null
    messageId: string | null
  }

  export type DiscussionUpvoteMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    messageId: string | null
  }

  export type DiscussionUpvoteCountAggregateOutputType = {
    id: number
    userId: number
    messageId: number
    _all: number
  }


  export type DiscussionUpvoteMinAggregateInputType = {
    id?: true
    userId?: true
    messageId?: true
  }

  export type DiscussionUpvoteMaxAggregateInputType = {
    id?: true
    userId?: true
    messageId?: true
  }

  export type DiscussionUpvoteCountAggregateInputType = {
    id?: true
    userId?: true
    messageId?: true
    _all?: true
  }

  export type DiscussionUpvoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionUpvote to aggregate.
     */
    where?: DiscussionUpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionUpvotes to fetch.
     */
    orderBy?: DiscussionUpvoteOrderByWithRelationInput | DiscussionUpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscussionUpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionUpvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionUpvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiscussionUpvotes
    **/
    _count?: true | DiscussionUpvoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscussionUpvoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscussionUpvoteMaxAggregateInputType
  }

  export type GetDiscussionUpvoteAggregateType<T extends DiscussionUpvoteAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscussionUpvote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussionUpvote[P]>
      : GetScalarType<T[P], AggregateDiscussionUpvote[P]>
  }




  export type DiscussionUpvoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionUpvoteWhereInput
    orderBy?: DiscussionUpvoteOrderByWithAggregationInput | DiscussionUpvoteOrderByWithAggregationInput[]
    by: DiscussionUpvoteScalarFieldEnum[] | DiscussionUpvoteScalarFieldEnum
    having?: DiscussionUpvoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscussionUpvoteCountAggregateInputType | true
    _min?: DiscussionUpvoteMinAggregateInputType
    _max?: DiscussionUpvoteMaxAggregateInputType
  }

  export type DiscussionUpvoteGroupByOutputType = {
    id: string
    userId: string
    messageId: string
    _count: DiscussionUpvoteCountAggregateOutputType | null
    _min: DiscussionUpvoteMinAggregateOutputType | null
    _max: DiscussionUpvoteMaxAggregateOutputType | null
  }

  type GetDiscussionUpvoteGroupByPayload<T extends DiscussionUpvoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscussionUpvoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscussionUpvoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscussionUpvoteGroupByOutputType[P]>
            : GetScalarType<T[P], DiscussionUpvoteGroupByOutputType[P]>
        }
      >
    >


  export type DiscussionUpvoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    messageId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionUpvote"]>

  export type DiscussionUpvoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    messageId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionUpvote"]>

  export type DiscussionUpvoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    messageId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussionUpvote"]>

  export type DiscussionUpvoteSelectScalar = {
    id?: boolean
    userId?: boolean
    messageId?: boolean
  }

  export type DiscussionUpvoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "messageId", ExtArgs["result"]["discussionUpvote"]>
  export type DiscussionUpvoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
  }
  export type DiscussionUpvoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
  }
  export type DiscussionUpvoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    message?: boolean | DiscussionMessageDefaultArgs<ExtArgs>
  }

  export type $DiscussionUpvotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiscussionUpvote"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      message: Prisma.$DiscussionMessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      messageId: string
    }, ExtArgs["result"]["discussionUpvote"]>
    composites: {}
  }

  type DiscussionUpvoteGetPayload<S extends boolean | null | undefined | DiscussionUpvoteDefaultArgs> = $Result.GetResult<Prisma.$DiscussionUpvotePayload, S>

  type DiscussionUpvoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DiscussionUpvoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiscussionUpvoteCountAggregateInputType | true
    }

  export interface DiscussionUpvoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiscussionUpvote'], meta: { name: 'DiscussionUpvote' } }
    /**
     * Find zero or one DiscussionUpvote that matches the filter.
     * @param {DiscussionUpvoteFindUniqueArgs} args - Arguments to find a DiscussionUpvote
     * @example
     * // Get one DiscussionUpvote
     * const discussionUpvote = await prisma.discussionUpvote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscussionUpvoteFindUniqueArgs>(args: SelectSubset<T, DiscussionUpvoteFindUniqueArgs<ExtArgs>>): Prisma__DiscussionUpvoteClient<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DiscussionUpvote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DiscussionUpvoteFindUniqueOrThrowArgs} args - Arguments to find a DiscussionUpvote
     * @example
     * // Get one DiscussionUpvote
     * const discussionUpvote = await prisma.discussionUpvote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscussionUpvoteFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscussionUpvoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscussionUpvoteClient<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionUpvote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionUpvoteFindFirstArgs} args - Arguments to find a DiscussionUpvote
     * @example
     * // Get one DiscussionUpvote
     * const discussionUpvote = await prisma.discussionUpvote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscussionUpvoteFindFirstArgs>(args?: SelectSubset<T, DiscussionUpvoteFindFirstArgs<ExtArgs>>): Prisma__DiscussionUpvoteClient<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DiscussionUpvote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionUpvoteFindFirstOrThrowArgs} args - Arguments to find a DiscussionUpvote
     * @example
     * // Get one DiscussionUpvote
     * const discussionUpvote = await prisma.discussionUpvote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscussionUpvoteFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscussionUpvoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscussionUpvoteClient<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DiscussionUpvotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionUpvoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiscussionUpvotes
     * const discussionUpvotes = await prisma.discussionUpvote.findMany()
     * 
     * // Get first 10 DiscussionUpvotes
     * const discussionUpvotes = await prisma.discussionUpvote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const discussionUpvoteWithIdOnly = await prisma.discussionUpvote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiscussionUpvoteFindManyArgs>(args?: SelectSubset<T, DiscussionUpvoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DiscussionUpvote.
     * @param {DiscussionUpvoteCreateArgs} args - Arguments to create a DiscussionUpvote.
     * @example
     * // Create one DiscussionUpvote
     * const DiscussionUpvote = await prisma.discussionUpvote.create({
     *   data: {
     *     // ... data to create a DiscussionUpvote
     *   }
     * })
     * 
     */
    create<T extends DiscussionUpvoteCreateArgs>(args: SelectSubset<T, DiscussionUpvoteCreateArgs<ExtArgs>>): Prisma__DiscussionUpvoteClient<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DiscussionUpvotes.
     * @param {DiscussionUpvoteCreateManyArgs} args - Arguments to create many DiscussionUpvotes.
     * @example
     * // Create many DiscussionUpvotes
     * const discussionUpvote = await prisma.discussionUpvote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscussionUpvoteCreateManyArgs>(args?: SelectSubset<T, DiscussionUpvoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DiscussionUpvotes and returns the data saved in the database.
     * @param {DiscussionUpvoteCreateManyAndReturnArgs} args - Arguments to create many DiscussionUpvotes.
     * @example
     * // Create many DiscussionUpvotes
     * const discussionUpvote = await prisma.discussionUpvote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DiscussionUpvotes and only return the `id`
     * const discussionUpvoteWithIdOnly = await prisma.discussionUpvote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiscussionUpvoteCreateManyAndReturnArgs>(args?: SelectSubset<T, DiscussionUpvoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DiscussionUpvote.
     * @param {DiscussionUpvoteDeleteArgs} args - Arguments to delete one DiscussionUpvote.
     * @example
     * // Delete one DiscussionUpvote
     * const DiscussionUpvote = await prisma.discussionUpvote.delete({
     *   where: {
     *     // ... filter to delete one DiscussionUpvote
     *   }
     * })
     * 
     */
    delete<T extends DiscussionUpvoteDeleteArgs>(args: SelectSubset<T, DiscussionUpvoteDeleteArgs<ExtArgs>>): Prisma__DiscussionUpvoteClient<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DiscussionUpvote.
     * @param {DiscussionUpvoteUpdateArgs} args - Arguments to update one DiscussionUpvote.
     * @example
     * // Update one DiscussionUpvote
     * const discussionUpvote = await prisma.discussionUpvote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscussionUpvoteUpdateArgs>(args: SelectSubset<T, DiscussionUpvoteUpdateArgs<ExtArgs>>): Prisma__DiscussionUpvoteClient<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DiscussionUpvotes.
     * @param {DiscussionUpvoteDeleteManyArgs} args - Arguments to filter DiscussionUpvotes to delete.
     * @example
     * // Delete a few DiscussionUpvotes
     * const { count } = await prisma.discussionUpvote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscussionUpvoteDeleteManyArgs>(args?: SelectSubset<T, DiscussionUpvoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionUpvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionUpvoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiscussionUpvotes
     * const discussionUpvote = await prisma.discussionUpvote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscussionUpvoteUpdateManyArgs>(args: SelectSubset<T, DiscussionUpvoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiscussionUpvotes and returns the data updated in the database.
     * @param {DiscussionUpvoteUpdateManyAndReturnArgs} args - Arguments to update many DiscussionUpvotes.
     * @example
     * // Update many DiscussionUpvotes
     * const discussionUpvote = await prisma.discussionUpvote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DiscussionUpvotes and only return the `id`
     * const discussionUpvoteWithIdOnly = await prisma.discussionUpvote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DiscussionUpvoteUpdateManyAndReturnArgs>(args: SelectSubset<T, DiscussionUpvoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DiscussionUpvote.
     * @param {DiscussionUpvoteUpsertArgs} args - Arguments to update or create a DiscussionUpvote.
     * @example
     * // Update or create a DiscussionUpvote
     * const discussionUpvote = await prisma.discussionUpvote.upsert({
     *   create: {
     *     // ... data to create a DiscussionUpvote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiscussionUpvote we want to update
     *   }
     * })
     */
    upsert<T extends DiscussionUpvoteUpsertArgs>(args: SelectSubset<T, DiscussionUpvoteUpsertArgs<ExtArgs>>): Prisma__DiscussionUpvoteClient<$Result.GetResult<Prisma.$DiscussionUpvotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DiscussionUpvotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionUpvoteCountArgs} args - Arguments to filter DiscussionUpvotes to count.
     * @example
     * // Count the number of DiscussionUpvotes
     * const count = await prisma.discussionUpvote.count({
     *   where: {
     *     // ... the filter for the DiscussionUpvotes we want to count
     *   }
     * })
    **/
    count<T extends DiscussionUpvoteCountArgs>(
      args?: Subset<T, DiscussionUpvoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionUpvoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiscussionUpvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionUpvoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionUpvoteAggregateArgs>(args: Subset<T, DiscussionUpvoteAggregateArgs>): Prisma.PrismaPromise<GetDiscussionUpvoteAggregateType<T>>

    /**
     * Group by DiscussionUpvote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionUpvoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscussionUpvoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscussionUpvoteGroupByArgs['orderBy'] }
        : { orderBy?: DiscussionUpvoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscussionUpvoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionUpvoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiscussionUpvote model
   */
  readonly fields: DiscussionUpvoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiscussionUpvote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscussionUpvoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    message<T extends DiscussionMessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionMessageDefaultArgs<ExtArgs>>): Prisma__DiscussionMessageClient<$Result.GetResult<Prisma.$DiscussionMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiscussionUpvote model
   */
  interface DiscussionUpvoteFieldRefs {
    readonly id: FieldRef<"DiscussionUpvote", 'String'>
    readonly userId: FieldRef<"DiscussionUpvote", 'String'>
    readonly messageId: FieldRef<"DiscussionUpvote", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DiscussionUpvote findUnique
   */
  export type DiscussionUpvoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionUpvote to fetch.
     */
    where: DiscussionUpvoteWhereUniqueInput
  }

  /**
   * DiscussionUpvote findUniqueOrThrow
   */
  export type DiscussionUpvoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionUpvote to fetch.
     */
    where: DiscussionUpvoteWhereUniqueInput
  }

  /**
   * DiscussionUpvote findFirst
   */
  export type DiscussionUpvoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionUpvote to fetch.
     */
    where?: DiscussionUpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionUpvotes to fetch.
     */
    orderBy?: DiscussionUpvoteOrderByWithRelationInput | DiscussionUpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionUpvotes.
     */
    cursor?: DiscussionUpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionUpvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionUpvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionUpvotes.
     */
    distinct?: DiscussionUpvoteScalarFieldEnum | DiscussionUpvoteScalarFieldEnum[]
  }

  /**
   * DiscussionUpvote findFirstOrThrow
   */
  export type DiscussionUpvoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionUpvote to fetch.
     */
    where?: DiscussionUpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionUpvotes to fetch.
     */
    orderBy?: DiscussionUpvoteOrderByWithRelationInput | DiscussionUpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiscussionUpvotes.
     */
    cursor?: DiscussionUpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionUpvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionUpvotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiscussionUpvotes.
     */
    distinct?: DiscussionUpvoteScalarFieldEnum | DiscussionUpvoteScalarFieldEnum[]
  }

  /**
   * DiscussionUpvote findMany
   */
  export type DiscussionUpvoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    /**
     * Filter, which DiscussionUpvotes to fetch.
     */
    where?: DiscussionUpvoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiscussionUpvotes to fetch.
     */
    orderBy?: DiscussionUpvoteOrderByWithRelationInput | DiscussionUpvoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiscussionUpvotes.
     */
    cursor?: DiscussionUpvoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiscussionUpvotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiscussionUpvotes.
     */
    skip?: number
    distinct?: DiscussionUpvoteScalarFieldEnum | DiscussionUpvoteScalarFieldEnum[]
  }

  /**
   * DiscussionUpvote create
   */
  export type DiscussionUpvoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    /**
     * The data needed to create a DiscussionUpvote.
     */
    data: XOR<DiscussionUpvoteCreateInput, DiscussionUpvoteUncheckedCreateInput>
  }

  /**
   * DiscussionUpvote createMany
   */
  export type DiscussionUpvoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiscussionUpvotes.
     */
    data: DiscussionUpvoteCreateManyInput | DiscussionUpvoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiscussionUpvote createManyAndReturn
   */
  export type DiscussionUpvoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * The data used to create many DiscussionUpvotes.
     */
    data: DiscussionUpvoteCreateManyInput | DiscussionUpvoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionUpvote update
   */
  export type DiscussionUpvoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    /**
     * The data needed to update a DiscussionUpvote.
     */
    data: XOR<DiscussionUpvoteUpdateInput, DiscussionUpvoteUncheckedUpdateInput>
    /**
     * Choose, which DiscussionUpvote to update.
     */
    where: DiscussionUpvoteWhereUniqueInput
  }

  /**
   * DiscussionUpvote updateMany
   */
  export type DiscussionUpvoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiscussionUpvotes.
     */
    data: XOR<DiscussionUpvoteUpdateManyMutationInput, DiscussionUpvoteUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionUpvotes to update
     */
    where?: DiscussionUpvoteWhereInput
    /**
     * Limit how many DiscussionUpvotes to update.
     */
    limit?: number
  }

  /**
   * DiscussionUpvote updateManyAndReturn
   */
  export type DiscussionUpvoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * The data used to update DiscussionUpvotes.
     */
    data: XOR<DiscussionUpvoteUpdateManyMutationInput, DiscussionUpvoteUncheckedUpdateManyInput>
    /**
     * Filter which DiscussionUpvotes to update
     */
    where?: DiscussionUpvoteWhereInput
    /**
     * Limit how many DiscussionUpvotes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DiscussionUpvote upsert
   */
  export type DiscussionUpvoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    /**
     * The filter to search for the DiscussionUpvote to update in case it exists.
     */
    where: DiscussionUpvoteWhereUniqueInput
    /**
     * In case the DiscussionUpvote found by the `where` argument doesn't exist, create a new DiscussionUpvote with this data.
     */
    create: XOR<DiscussionUpvoteCreateInput, DiscussionUpvoteUncheckedCreateInput>
    /**
     * In case the DiscussionUpvote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscussionUpvoteUpdateInput, DiscussionUpvoteUncheckedUpdateInput>
  }

  /**
   * DiscussionUpvote delete
   */
  export type DiscussionUpvoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
    /**
     * Filter which DiscussionUpvote to delete.
     */
    where: DiscussionUpvoteWhereUniqueInput
  }

  /**
   * DiscussionUpvote deleteMany
   */
  export type DiscussionUpvoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiscussionUpvotes to delete
     */
    where?: DiscussionUpvoteWhereInput
    /**
     * Limit how many DiscussionUpvotes to delete.
     */
    limit?: number
  }

  /**
   * DiscussionUpvote without action
   */
  export type DiscussionUpvoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionUpvote
     */
    select?: DiscussionUpvoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DiscussionUpvote
     */
    omit?: DiscussionUpvoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionUpvoteInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    content: string | null
    isRead: boolean | null
    referenceId: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    content: string | null
    isRead: boolean | null
    referenceId: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    content: number
    isRead: number
    referenceId: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    content?: true
    isRead?: true
    referenceId?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    content?: true
    isRead?: true
    referenceId?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    content?: true
    isRead?: true
    referenceId?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: $Enums.NotificationType
    content: string
    isRead: boolean
    referenceId: string | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    content?: boolean
    isRead?: boolean
    referenceId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    content?: boolean
    isRead?: boolean
    referenceId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    content?: boolean
    isRead?: boolean
    referenceId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    content?: boolean
    isRead?: boolean
    referenceId?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "content" | "isRead" | "referenceId" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: $Enums.NotificationType
      content: string
      isRead: boolean
      referenceId: string | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly content: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly referenceId: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model ProblemInvitation
   */

  export type AggregateProblemInvitation = {
    _count: ProblemInvitationCountAggregateOutputType | null
    _min: ProblemInvitationMinAggregateOutputType | null
    _max: ProblemInvitationMaxAggregateOutputType | null
  }

  export type ProblemInvitationMinAggregateOutputType = {
    id: string | null
    problemId: string | null
    senderId: string | null
    receiverId: string | null
    status: $Enums.InvitationStatus | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemInvitationMaxAggregateOutputType = {
    id: string | null
    problemId: string | null
    senderId: string | null
    receiverId: string | null
    status: $Enums.InvitationStatus | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemInvitationCountAggregateOutputType = {
    id: number
    problemId: number
    senderId: number
    receiverId: number
    status: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemInvitationMinAggregateInputType = {
    id?: true
    problemId?: true
    senderId?: true
    receiverId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemInvitationMaxAggregateInputType = {
    id?: true
    problemId?: true
    senderId?: true
    receiverId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemInvitationCountAggregateInputType = {
    id?: true
    problemId?: true
    senderId?: true
    receiverId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemInvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemInvitation to aggregate.
     */
    where?: ProblemInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemInvitations to fetch.
     */
    orderBy?: ProblemInvitationOrderByWithRelationInput | ProblemInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemInvitations
    **/
    _count?: true | ProblemInvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemInvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemInvitationMaxAggregateInputType
  }

  export type GetProblemInvitationAggregateType<T extends ProblemInvitationAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemInvitation[P]>
      : GetScalarType<T[P], AggregateProblemInvitation[P]>
  }




  export type ProblemInvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemInvitationWhereInput
    orderBy?: ProblemInvitationOrderByWithAggregationInput | ProblemInvitationOrderByWithAggregationInput[]
    by: ProblemInvitationScalarFieldEnum[] | ProblemInvitationScalarFieldEnum
    having?: ProblemInvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemInvitationCountAggregateInputType | true
    _min?: ProblemInvitationMinAggregateInputType
    _max?: ProblemInvitationMaxAggregateInputType
  }

  export type ProblemInvitationGroupByOutputType = {
    id: string
    problemId: string
    senderId: string
    receiverId: string
    status: $Enums.InvitationStatus
    message: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProblemInvitationCountAggregateOutputType | null
    _min: ProblemInvitationMinAggregateOutputType | null
    _max: ProblemInvitationMaxAggregateOutputType | null
  }

  type GetProblemInvitationGroupByPayload<T extends ProblemInvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemInvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemInvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemInvitationGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemInvitationGroupByOutputType[P]>
        }
      >
    >


  export type ProblemInvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    senderId?: boolean
    receiverId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemInvitation"]>

  export type ProblemInvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    senderId?: boolean
    receiverId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemInvitation"]>

  export type ProblemInvitationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    senderId?: boolean
    receiverId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemInvitation"]>

  export type ProblemInvitationSelectScalar = {
    id?: boolean
    problemId?: boolean
    senderId?: boolean
    receiverId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemInvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "problemId" | "senderId" | "receiverId" | "status" | "message" | "createdAt" | "updatedAt", ExtArgs["result"]["problemInvitation"]>
  export type ProblemInvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProblemInvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProblemInvitationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProblemInvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProblemInvitation"
    objects: {
      problem: Prisma.$ProblemPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      problemId: string
      senderId: string
      receiverId: string
      status: $Enums.InvitationStatus
      message: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["problemInvitation"]>
    composites: {}
  }

  type ProblemInvitationGetPayload<S extends boolean | null | undefined | ProblemInvitationDefaultArgs> = $Result.GetResult<Prisma.$ProblemInvitationPayload, S>

  type ProblemInvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemInvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemInvitationCountAggregateInputType | true
    }

  export interface ProblemInvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemInvitation'], meta: { name: 'ProblemInvitation' } }
    /**
     * Find zero or one ProblemInvitation that matches the filter.
     * @param {ProblemInvitationFindUniqueArgs} args - Arguments to find a ProblemInvitation
     * @example
     * // Get one ProblemInvitation
     * const problemInvitation = await prisma.problemInvitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemInvitationFindUniqueArgs>(args: SelectSubset<T, ProblemInvitationFindUniqueArgs<ExtArgs>>): Prisma__ProblemInvitationClient<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProblemInvitation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemInvitationFindUniqueOrThrowArgs} args - Arguments to find a ProblemInvitation
     * @example
     * // Get one ProblemInvitation
     * const problemInvitation = await prisma.problemInvitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemInvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemInvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemInvitationClient<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemInvitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInvitationFindFirstArgs} args - Arguments to find a ProblemInvitation
     * @example
     * // Get one ProblemInvitation
     * const problemInvitation = await prisma.problemInvitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemInvitationFindFirstArgs>(args?: SelectSubset<T, ProblemInvitationFindFirstArgs<ExtArgs>>): Prisma__ProblemInvitationClient<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemInvitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInvitationFindFirstOrThrowArgs} args - Arguments to find a ProblemInvitation
     * @example
     * // Get one ProblemInvitation
     * const problemInvitation = await prisma.problemInvitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemInvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemInvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemInvitationClient<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProblemInvitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemInvitations
     * const problemInvitations = await prisma.problemInvitation.findMany()
     * 
     * // Get first 10 ProblemInvitations
     * const problemInvitations = await prisma.problemInvitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemInvitationWithIdOnly = await prisma.problemInvitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemInvitationFindManyArgs>(args?: SelectSubset<T, ProblemInvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProblemInvitation.
     * @param {ProblemInvitationCreateArgs} args - Arguments to create a ProblemInvitation.
     * @example
     * // Create one ProblemInvitation
     * const ProblemInvitation = await prisma.problemInvitation.create({
     *   data: {
     *     // ... data to create a ProblemInvitation
     *   }
     * })
     * 
     */
    create<T extends ProblemInvitationCreateArgs>(args: SelectSubset<T, ProblemInvitationCreateArgs<ExtArgs>>): Prisma__ProblemInvitationClient<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProblemInvitations.
     * @param {ProblemInvitationCreateManyArgs} args - Arguments to create many ProblemInvitations.
     * @example
     * // Create many ProblemInvitations
     * const problemInvitation = await prisma.problemInvitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemInvitationCreateManyArgs>(args?: SelectSubset<T, ProblemInvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProblemInvitations and returns the data saved in the database.
     * @param {ProblemInvitationCreateManyAndReturnArgs} args - Arguments to create many ProblemInvitations.
     * @example
     * // Create many ProblemInvitations
     * const problemInvitation = await prisma.problemInvitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProblemInvitations and only return the `id`
     * const problemInvitationWithIdOnly = await prisma.problemInvitation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemInvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemInvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProblemInvitation.
     * @param {ProblemInvitationDeleteArgs} args - Arguments to delete one ProblemInvitation.
     * @example
     * // Delete one ProblemInvitation
     * const ProblemInvitation = await prisma.problemInvitation.delete({
     *   where: {
     *     // ... filter to delete one ProblemInvitation
     *   }
     * })
     * 
     */
    delete<T extends ProblemInvitationDeleteArgs>(args: SelectSubset<T, ProblemInvitationDeleteArgs<ExtArgs>>): Prisma__ProblemInvitationClient<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProblemInvitation.
     * @param {ProblemInvitationUpdateArgs} args - Arguments to update one ProblemInvitation.
     * @example
     * // Update one ProblemInvitation
     * const problemInvitation = await prisma.problemInvitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemInvitationUpdateArgs>(args: SelectSubset<T, ProblemInvitationUpdateArgs<ExtArgs>>): Prisma__ProblemInvitationClient<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProblemInvitations.
     * @param {ProblemInvitationDeleteManyArgs} args - Arguments to filter ProblemInvitations to delete.
     * @example
     * // Delete a few ProblemInvitations
     * const { count } = await prisma.problemInvitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemInvitationDeleteManyArgs>(args?: SelectSubset<T, ProblemInvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemInvitations
     * const problemInvitation = await prisma.problemInvitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemInvitationUpdateManyArgs>(args: SelectSubset<T, ProblemInvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemInvitations and returns the data updated in the database.
     * @param {ProblemInvitationUpdateManyAndReturnArgs} args - Arguments to update many ProblemInvitations.
     * @example
     * // Update many ProblemInvitations
     * const problemInvitation = await prisma.problemInvitation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProblemInvitations and only return the `id`
     * const problemInvitationWithIdOnly = await prisma.problemInvitation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemInvitationUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemInvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProblemInvitation.
     * @param {ProblemInvitationUpsertArgs} args - Arguments to update or create a ProblemInvitation.
     * @example
     * // Update or create a ProblemInvitation
     * const problemInvitation = await prisma.problemInvitation.upsert({
     *   create: {
     *     // ... data to create a ProblemInvitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemInvitation we want to update
     *   }
     * })
     */
    upsert<T extends ProblemInvitationUpsertArgs>(args: SelectSubset<T, ProblemInvitationUpsertArgs<ExtArgs>>): Prisma__ProblemInvitationClient<$Result.GetResult<Prisma.$ProblemInvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProblemInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInvitationCountArgs} args - Arguments to filter ProblemInvitations to count.
     * @example
     * // Count the number of ProblemInvitations
     * const count = await prisma.problemInvitation.count({
     *   where: {
     *     // ... the filter for the ProblemInvitations we want to count
     *   }
     * })
    **/
    count<T extends ProblemInvitationCountArgs>(
      args?: Subset<T, ProblemInvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemInvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemInvitationAggregateArgs>(args: Subset<T, ProblemInvitationAggregateArgs>): Prisma.PrismaPromise<GetProblemInvitationAggregateType<T>>

    /**
     * Group by ProblemInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemInvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemInvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemInvitationGroupByArgs['orderBy'] }
        : { orderBy?: ProblemInvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemInvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProblemInvitation model
   */
  readonly fields: ProblemInvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemInvitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemInvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problem<T extends ProblemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDefaultArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProblemInvitation model
   */
  interface ProblemInvitationFieldRefs {
    readonly id: FieldRef<"ProblemInvitation", 'String'>
    readonly problemId: FieldRef<"ProblemInvitation", 'String'>
    readonly senderId: FieldRef<"ProblemInvitation", 'String'>
    readonly receiverId: FieldRef<"ProblemInvitation", 'String'>
    readonly status: FieldRef<"ProblemInvitation", 'InvitationStatus'>
    readonly message: FieldRef<"ProblemInvitation", 'String'>
    readonly createdAt: FieldRef<"ProblemInvitation", 'DateTime'>
    readonly updatedAt: FieldRef<"ProblemInvitation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProblemInvitation findUnique
   */
  export type ProblemInvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInvitation to fetch.
     */
    where: ProblemInvitationWhereUniqueInput
  }

  /**
   * ProblemInvitation findUniqueOrThrow
   */
  export type ProblemInvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInvitation to fetch.
     */
    where: ProblemInvitationWhereUniqueInput
  }

  /**
   * ProblemInvitation findFirst
   */
  export type ProblemInvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInvitation to fetch.
     */
    where?: ProblemInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemInvitations to fetch.
     */
    orderBy?: ProblemInvitationOrderByWithRelationInput | ProblemInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemInvitations.
     */
    cursor?: ProblemInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemInvitations.
     */
    distinct?: ProblemInvitationScalarFieldEnum | ProblemInvitationScalarFieldEnum[]
  }

  /**
   * ProblemInvitation findFirstOrThrow
   */
  export type ProblemInvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInvitation to fetch.
     */
    where?: ProblemInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemInvitations to fetch.
     */
    orderBy?: ProblemInvitationOrderByWithRelationInput | ProblemInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemInvitations.
     */
    cursor?: ProblemInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemInvitations.
     */
    distinct?: ProblemInvitationScalarFieldEnum | ProblemInvitationScalarFieldEnum[]
  }

  /**
   * ProblemInvitation findMany
   */
  export type ProblemInvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemInvitations to fetch.
     */
    where?: ProblemInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemInvitations to fetch.
     */
    orderBy?: ProblemInvitationOrderByWithRelationInput | ProblemInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemInvitations.
     */
    cursor?: ProblemInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemInvitations.
     */
    skip?: number
    distinct?: ProblemInvitationScalarFieldEnum | ProblemInvitationScalarFieldEnum[]
  }

  /**
   * ProblemInvitation create
   */
  export type ProblemInvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a ProblemInvitation.
     */
    data: XOR<ProblemInvitationCreateInput, ProblemInvitationUncheckedCreateInput>
  }

  /**
   * ProblemInvitation createMany
   */
  export type ProblemInvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProblemInvitations.
     */
    data: ProblemInvitationCreateManyInput | ProblemInvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProblemInvitation createManyAndReturn
   */
  export type ProblemInvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * The data used to create many ProblemInvitations.
     */
    data: ProblemInvitationCreateManyInput | ProblemInvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemInvitation update
   */
  export type ProblemInvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a ProblemInvitation.
     */
    data: XOR<ProblemInvitationUpdateInput, ProblemInvitationUncheckedUpdateInput>
    /**
     * Choose, which ProblemInvitation to update.
     */
    where: ProblemInvitationWhereUniqueInput
  }

  /**
   * ProblemInvitation updateMany
   */
  export type ProblemInvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProblemInvitations.
     */
    data: XOR<ProblemInvitationUpdateManyMutationInput, ProblemInvitationUncheckedUpdateManyInput>
    /**
     * Filter which ProblemInvitations to update
     */
    where?: ProblemInvitationWhereInput
    /**
     * Limit how many ProblemInvitations to update.
     */
    limit?: number
  }

  /**
   * ProblemInvitation updateManyAndReturn
   */
  export type ProblemInvitationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * The data used to update ProblemInvitations.
     */
    data: XOR<ProblemInvitationUpdateManyMutationInput, ProblemInvitationUncheckedUpdateManyInput>
    /**
     * Filter which ProblemInvitations to update
     */
    where?: ProblemInvitationWhereInput
    /**
     * Limit how many ProblemInvitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemInvitation upsert
   */
  export type ProblemInvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the ProblemInvitation to update in case it exists.
     */
    where: ProblemInvitationWhereUniqueInput
    /**
     * In case the ProblemInvitation found by the `where` argument doesn't exist, create a new ProblemInvitation with this data.
     */
    create: XOR<ProblemInvitationCreateInput, ProblemInvitationUncheckedCreateInput>
    /**
     * In case the ProblemInvitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemInvitationUpdateInput, ProblemInvitationUncheckedUpdateInput>
  }

  /**
   * ProblemInvitation delete
   */
  export type ProblemInvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
    /**
     * Filter which ProblemInvitation to delete.
     */
    where: ProblemInvitationWhereUniqueInput
  }

  /**
   * ProblemInvitation deleteMany
   */
  export type ProblemInvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemInvitations to delete
     */
    where?: ProblemInvitationWhereInput
    /**
     * Limit how many ProblemInvitations to delete.
     */
    limit?: number
  }

  /**
   * ProblemInvitation without action
   */
  export type ProblemInvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemInvitation
     */
    select?: ProblemInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemInvitation
     */
    omit?: ProblemInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInvitationInclude<ExtArgs> | null
  }


  /**
   * Model ProblemCollaboration
   */

  export type AggregateProblemCollaboration = {
    _count: ProblemCollaborationCountAggregateOutputType | null
    _avg: ProblemCollaborationAvgAggregateOutputType | null
    _sum: ProblemCollaborationSumAggregateOutputType | null
    _min: ProblemCollaborationMinAggregateOutputType | null
    _max: ProblemCollaborationMaxAggregateOutputType | null
  }

  export type ProblemCollaborationAvgAggregateOutputType = {
    maxParticipants: number | null
  }

  export type ProblemCollaborationSumAggregateOutputType = {
    maxParticipants: number | null
  }

  export type ProblemCollaborationMinAggregateOutputType = {
    id: string | null
    problemId: string | null
    initiatorId: string | null
    maxParticipants: number | null
    currentCode: string | null
    language: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemCollaborationMaxAggregateOutputType = {
    id: string | null
    problemId: string | null
    initiatorId: string | null
    maxParticipants: number | null
    currentCode: string | null
    language: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProblemCollaborationCountAggregateOutputType = {
    id: number
    problemId: number
    initiatorId: number
    maxParticipants: number
    currentCode: number
    language: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProblemCollaborationAvgAggregateInputType = {
    maxParticipants?: true
  }

  export type ProblemCollaborationSumAggregateInputType = {
    maxParticipants?: true
  }

  export type ProblemCollaborationMinAggregateInputType = {
    id?: true
    problemId?: true
    initiatorId?: true
    maxParticipants?: true
    currentCode?: true
    language?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemCollaborationMaxAggregateInputType = {
    id?: true
    problemId?: true
    initiatorId?: true
    maxParticipants?: true
    currentCode?: true
    language?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProblemCollaborationCountAggregateInputType = {
    id?: true
    problemId?: true
    initiatorId?: true
    maxParticipants?: true
    currentCode?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProblemCollaborationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemCollaboration to aggregate.
     */
    where?: ProblemCollaborationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemCollaborations to fetch.
     */
    orderBy?: ProblemCollaborationOrderByWithRelationInput | ProblemCollaborationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemCollaborationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemCollaborations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemCollaborations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProblemCollaborations
    **/
    _count?: true | ProblemCollaborationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProblemCollaborationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProblemCollaborationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemCollaborationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemCollaborationMaxAggregateInputType
  }

  export type GetProblemCollaborationAggregateType<T extends ProblemCollaborationAggregateArgs> = {
        [P in keyof T & keyof AggregateProblemCollaboration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblemCollaboration[P]>
      : GetScalarType<T[P], AggregateProblemCollaboration[P]>
  }




  export type ProblemCollaborationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemCollaborationWhereInput
    orderBy?: ProblemCollaborationOrderByWithAggregationInput | ProblemCollaborationOrderByWithAggregationInput[]
    by: ProblemCollaborationScalarFieldEnum[] | ProblemCollaborationScalarFieldEnum
    having?: ProblemCollaborationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemCollaborationCountAggregateInputType | true
    _avg?: ProblemCollaborationAvgAggregateInputType
    _sum?: ProblemCollaborationSumAggregateInputType
    _min?: ProblemCollaborationMinAggregateInputType
    _max?: ProblemCollaborationMaxAggregateInputType
  }

  export type ProblemCollaborationGroupByOutputType = {
    id: string
    problemId: string
    initiatorId: string
    maxParticipants: number
    currentCode: string
    language: string
    createdAt: Date
    updatedAt: Date
    _count: ProblemCollaborationCountAggregateOutputType | null
    _avg: ProblemCollaborationAvgAggregateOutputType | null
    _sum: ProblemCollaborationSumAggregateOutputType | null
    _min: ProblemCollaborationMinAggregateOutputType | null
    _max: ProblemCollaborationMaxAggregateOutputType | null
  }

  type GetProblemCollaborationGroupByPayload<T extends ProblemCollaborationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemCollaborationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemCollaborationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemCollaborationGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemCollaborationGroupByOutputType[P]>
        }
      >
    >


  export type ProblemCollaborationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    initiatorId?: boolean
    maxParticipants?: boolean
    currentCode?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | ProblemCollaboration$participantsArgs<ExtArgs>
    _count?: boolean | ProblemCollaborationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemCollaboration"]>

  export type ProblemCollaborationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    initiatorId?: boolean
    maxParticipants?: boolean
    currentCode?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    initiator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemCollaboration"]>

  export type ProblemCollaborationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    problemId?: boolean
    initiatorId?: boolean
    maxParticipants?: boolean
    currentCode?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    initiator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problemCollaboration"]>

  export type ProblemCollaborationSelectScalar = {
    id?: boolean
    problemId?: boolean
    initiatorId?: boolean
    maxParticipants?: boolean
    currentCode?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProblemCollaborationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "problemId" | "initiatorId" | "maxParticipants" | "currentCode" | "language" | "createdAt" | "updatedAt", ExtArgs["result"]["problemCollaboration"]>
  export type ProblemCollaborationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    initiator?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | ProblemCollaboration$participantsArgs<ExtArgs>
    _count?: boolean | ProblemCollaborationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProblemCollaborationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    initiator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProblemCollaborationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    initiator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProblemCollaborationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProblemCollaboration"
    objects: {
      problem: Prisma.$ProblemPayload<ExtArgs>
      initiator: Prisma.$UserPayload<ExtArgs>
      participants: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      problemId: string
      initiatorId: string
      maxParticipants: number
      currentCode: string
      language: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["problemCollaboration"]>
    composites: {}
  }

  type ProblemCollaborationGetPayload<S extends boolean | null | undefined | ProblemCollaborationDefaultArgs> = $Result.GetResult<Prisma.$ProblemCollaborationPayload, S>

  type ProblemCollaborationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemCollaborationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemCollaborationCountAggregateInputType | true
    }

  export interface ProblemCollaborationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProblemCollaboration'], meta: { name: 'ProblemCollaboration' } }
    /**
     * Find zero or one ProblemCollaboration that matches the filter.
     * @param {ProblemCollaborationFindUniqueArgs} args - Arguments to find a ProblemCollaboration
     * @example
     * // Get one ProblemCollaboration
     * const problemCollaboration = await prisma.problemCollaboration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemCollaborationFindUniqueArgs>(args: SelectSubset<T, ProblemCollaborationFindUniqueArgs<ExtArgs>>): Prisma__ProblemCollaborationClient<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProblemCollaboration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemCollaborationFindUniqueOrThrowArgs} args - Arguments to find a ProblemCollaboration
     * @example
     * // Get one ProblemCollaboration
     * const problemCollaboration = await prisma.problemCollaboration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemCollaborationFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemCollaborationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemCollaborationClient<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemCollaboration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCollaborationFindFirstArgs} args - Arguments to find a ProblemCollaboration
     * @example
     * // Get one ProblemCollaboration
     * const problemCollaboration = await prisma.problemCollaboration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemCollaborationFindFirstArgs>(args?: SelectSubset<T, ProblemCollaborationFindFirstArgs<ExtArgs>>): Prisma__ProblemCollaborationClient<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProblemCollaboration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCollaborationFindFirstOrThrowArgs} args - Arguments to find a ProblemCollaboration
     * @example
     * // Get one ProblemCollaboration
     * const problemCollaboration = await prisma.problemCollaboration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemCollaborationFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemCollaborationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemCollaborationClient<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProblemCollaborations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCollaborationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProblemCollaborations
     * const problemCollaborations = await prisma.problemCollaboration.findMany()
     * 
     * // Get first 10 ProblemCollaborations
     * const problemCollaborations = await prisma.problemCollaboration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemCollaborationWithIdOnly = await prisma.problemCollaboration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemCollaborationFindManyArgs>(args?: SelectSubset<T, ProblemCollaborationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProblemCollaboration.
     * @param {ProblemCollaborationCreateArgs} args - Arguments to create a ProblemCollaboration.
     * @example
     * // Create one ProblemCollaboration
     * const ProblemCollaboration = await prisma.problemCollaboration.create({
     *   data: {
     *     // ... data to create a ProblemCollaboration
     *   }
     * })
     * 
     */
    create<T extends ProblemCollaborationCreateArgs>(args: SelectSubset<T, ProblemCollaborationCreateArgs<ExtArgs>>): Prisma__ProblemCollaborationClient<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProblemCollaborations.
     * @param {ProblemCollaborationCreateManyArgs} args - Arguments to create many ProblemCollaborations.
     * @example
     * // Create many ProblemCollaborations
     * const problemCollaboration = await prisma.problemCollaboration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemCollaborationCreateManyArgs>(args?: SelectSubset<T, ProblemCollaborationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProblemCollaborations and returns the data saved in the database.
     * @param {ProblemCollaborationCreateManyAndReturnArgs} args - Arguments to create many ProblemCollaborations.
     * @example
     * // Create many ProblemCollaborations
     * const problemCollaboration = await prisma.problemCollaboration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProblemCollaborations and only return the `id`
     * const problemCollaborationWithIdOnly = await prisma.problemCollaboration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemCollaborationCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemCollaborationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProblemCollaboration.
     * @param {ProblemCollaborationDeleteArgs} args - Arguments to delete one ProblemCollaboration.
     * @example
     * // Delete one ProblemCollaboration
     * const ProblemCollaboration = await prisma.problemCollaboration.delete({
     *   where: {
     *     // ... filter to delete one ProblemCollaboration
     *   }
     * })
     * 
     */
    delete<T extends ProblemCollaborationDeleteArgs>(args: SelectSubset<T, ProblemCollaborationDeleteArgs<ExtArgs>>): Prisma__ProblemCollaborationClient<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProblemCollaboration.
     * @param {ProblemCollaborationUpdateArgs} args - Arguments to update one ProblemCollaboration.
     * @example
     * // Update one ProblemCollaboration
     * const problemCollaboration = await prisma.problemCollaboration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemCollaborationUpdateArgs>(args: SelectSubset<T, ProblemCollaborationUpdateArgs<ExtArgs>>): Prisma__ProblemCollaborationClient<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProblemCollaborations.
     * @param {ProblemCollaborationDeleteManyArgs} args - Arguments to filter ProblemCollaborations to delete.
     * @example
     * // Delete a few ProblemCollaborations
     * const { count } = await prisma.problemCollaboration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemCollaborationDeleteManyArgs>(args?: SelectSubset<T, ProblemCollaborationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemCollaborations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCollaborationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProblemCollaborations
     * const problemCollaboration = await prisma.problemCollaboration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemCollaborationUpdateManyArgs>(args: SelectSubset<T, ProblemCollaborationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProblemCollaborations and returns the data updated in the database.
     * @param {ProblemCollaborationUpdateManyAndReturnArgs} args - Arguments to update many ProblemCollaborations.
     * @example
     * // Update many ProblemCollaborations
     * const problemCollaboration = await prisma.problemCollaboration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProblemCollaborations and only return the `id`
     * const problemCollaborationWithIdOnly = await prisma.problemCollaboration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemCollaborationUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemCollaborationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProblemCollaboration.
     * @param {ProblemCollaborationUpsertArgs} args - Arguments to update or create a ProblemCollaboration.
     * @example
     * // Update or create a ProblemCollaboration
     * const problemCollaboration = await prisma.problemCollaboration.upsert({
     *   create: {
     *     // ... data to create a ProblemCollaboration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProblemCollaboration we want to update
     *   }
     * })
     */
    upsert<T extends ProblemCollaborationUpsertArgs>(args: SelectSubset<T, ProblemCollaborationUpsertArgs<ExtArgs>>): Prisma__ProblemCollaborationClient<$Result.GetResult<Prisma.$ProblemCollaborationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProblemCollaborations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCollaborationCountArgs} args - Arguments to filter ProblemCollaborations to count.
     * @example
     * // Count the number of ProblemCollaborations
     * const count = await prisma.problemCollaboration.count({
     *   where: {
     *     // ... the filter for the ProblemCollaborations we want to count
     *   }
     * })
    **/
    count<T extends ProblemCollaborationCountArgs>(
      args?: Subset<T, ProblemCollaborationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemCollaborationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProblemCollaboration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCollaborationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemCollaborationAggregateArgs>(args: Subset<T, ProblemCollaborationAggregateArgs>): Prisma.PrismaPromise<GetProblemCollaborationAggregateType<T>>

    /**
     * Group by ProblemCollaboration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCollaborationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemCollaborationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemCollaborationGroupByArgs['orderBy'] }
        : { orderBy?: ProblemCollaborationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemCollaborationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemCollaborationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProblemCollaboration model
   */
  readonly fields: ProblemCollaborationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProblemCollaboration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemCollaborationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problem<T extends ProblemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDefaultArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    initiator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    participants<T extends ProblemCollaboration$participantsArgs<ExtArgs> = {}>(args?: Subset<T, ProblemCollaboration$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProblemCollaboration model
   */
  interface ProblemCollaborationFieldRefs {
    readonly id: FieldRef<"ProblemCollaboration", 'String'>
    readonly problemId: FieldRef<"ProblemCollaboration", 'String'>
    readonly initiatorId: FieldRef<"ProblemCollaboration", 'String'>
    readonly maxParticipants: FieldRef<"ProblemCollaboration", 'Int'>
    readonly currentCode: FieldRef<"ProblemCollaboration", 'String'>
    readonly language: FieldRef<"ProblemCollaboration", 'String'>
    readonly createdAt: FieldRef<"ProblemCollaboration", 'DateTime'>
    readonly updatedAt: FieldRef<"ProblemCollaboration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProblemCollaboration findUnique
   */
  export type ProblemCollaborationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemCollaboration to fetch.
     */
    where: ProblemCollaborationWhereUniqueInput
  }

  /**
   * ProblemCollaboration findUniqueOrThrow
   */
  export type ProblemCollaborationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemCollaboration to fetch.
     */
    where: ProblemCollaborationWhereUniqueInput
  }

  /**
   * ProblemCollaboration findFirst
   */
  export type ProblemCollaborationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemCollaboration to fetch.
     */
    where?: ProblemCollaborationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemCollaborations to fetch.
     */
    orderBy?: ProblemCollaborationOrderByWithRelationInput | ProblemCollaborationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemCollaborations.
     */
    cursor?: ProblemCollaborationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemCollaborations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemCollaborations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemCollaborations.
     */
    distinct?: ProblemCollaborationScalarFieldEnum | ProblemCollaborationScalarFieldEnum[]
  }

  /**
   * ProblemCollaboration findFirstOrThrow
   */
  export type ProblemCollaborationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemCollaboration to fetch.
     */
    where?: ProblemCollaborationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemCollaborations to fetch.
     */
    orderBy?: ProblemCollaborationOrderByWithRelationInput | ProblemCollaborationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProblemCollaborations.
     */
    cursor?: ProblemCollaborationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemCollaborations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemCollaborations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProblemCollaborations.
     */
    distinct?: ProblemCollaborationScalarFieldEnum | ProblemCollaborationScalarFieldEnum[]
  }

  /**
   * ProblemCollaboration findMany
   */
  export type ProblemCollaborationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    /**
     * Filter, which ProblemCollaborations to fetch.
     */
    where?: ProblemCollaborationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProblemCollaborations to fetch.
     */
    orderBy?: ProblemCollaborationOrderByWithRelationInput | ProblemCollaborationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProblemCollaborations.
     */
    cursor?: ProblemCollaborationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProblemCollaborations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProblemCollaborations.
     */
    skip?: number
    distinct?: ProblemCollaborationScalarFieldEnum | ProblemCollaborationScalarFieldEnum[]
  }

  /**
   * ProblemCollaboration create
   */
  export type ProblemCollaborationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    /**
     * The data needed to create a ProblemCollaboration.
     */
    data: XOR<ProblemCollaborationCreateInput, ProblemCollaborationUncheckedCreateInput>
  }

  /**
   * ProblemCollaboration createMany
   */
  export type ProblemCollaborationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProblemCollaborations.
     */
    data: ProblemCollaborationCreateManyInput | ProblemCollaborationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProblemCollaboration createManyAndReturn
   */
  export type ProblemCollaborationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * The data used to create many ProblemCollaborations.
     */
    data: ProblemCollaborationCreateManyInput | ProblemCollaborationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemCollaboration update
   */
  export type ProblemCollaborationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    /**
     * The data needed to update a ProblemCollaboration.
     */
    data: XOR<ProblemCollaborationUpdateInput, ProblemCollaborationUncheckedUpdateInput>
    /**
     * Choose, which ProblemCollaboration to update.
     */
    where: ProblemCollaborationWhereUniqueInput
  }

  /**
   * ProblemCollaboration updateMany
   */
  export type ProblemCollaborationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProblemCollaborations.
     */
    data: XOR<ProblemCollaborationUpdateManyMutationInput, ProblemCollaborationUncheckedUpdateManyInput>
    /**
     * Filter which ProblemCollaborations to update
     */
    where?: ProblemCollaborationWhereInput
    /**
     * Limit how many ProblemCollaborations to update.
     */
    limit?: number
  }

  /**
   * ProblemCollaboration updateManyAndReturn
   */
  export type ProblemCollaborationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * The data used to update ProblemCollaborations.
     */
    data: XOR<ProblemCollaborationUpdateManyMutationInput, ProblemCollaborationUncheckedUpdateManyInput>
    /**
     * Filter which ProblemCollaborations to update
     */
    where?: ProblemCollaborationWhereInput
    /**
     * Limit how many ProblemCollaborations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProblemCollaboration upsert
   */
  export type ProblemCollaborationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    /**
     * The filter to search for the ProblemCollaboration to update in case it exists.
     */
    where: ProblemCollaborationWhereUniqueInput
    /**
     * In case the ProblemCollaboration found by the `where` argument doesn't exist, create a new ProblemCollaboration with this data.
     */
    create: XOR<ProblemCollaborationCreateInput, ProblemCollaborationUncheckedCreateInput>
    /**
     * In case the ProblemCollaboration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemCollaborationUpdateInput, ProblemCollaborationUncheckedUpdateInput>
  }

  /**
   * ProblemCollaboration delete
   */
  export type ProblemCollaborationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
    /**
     * Filter which ProblemCollaboration to delete.
     */
    where: ProblemCollaborationWhereUniqueInput
  }

  /**
   * ProblemCollaboration deleteMany
   */
  export type ProblemCollaborationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProblemCollaborations to delete
     */
    where?: ProblemCollaborationWhereInput
    /**
     * Limit how many ProblemCollaborations to delete.
     */
    limit?: number
  }

  /**
   * ProblemCollaboration.participants
   */
  export type ProblemCollaboration$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * ProblemCollaboration without action
   */
  export type ProblemCollaborationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCollaboration
     */
    select?: ProblemCollaborationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProblemCollaboration
     */
    omit?: ProblemCollaborationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemCollaborationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    bio: 'bio',
    linkedin: 'linkedin',
    portfolio: 'portfolio',
    email: 'email',
    image: 'image',
    role: 'role',
    password: 'password',
    forgotPasswordOtp: 'forgotPasswordOtp',
    forgotPasswordOtpExpiry: 'forgotPasswordOtpExpiry',
    provider: 'provider',
    currentStreak: 'currentStreak',
    longestStreak: 'longestStreak',
    lastSolvedDate: 'lastSolvedDate',
    followerCount: 'followerCount',
    followingCount: 'followingCount',
    badges: 'badges',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FollowScalarFieldEnum: {
    id: 'id',
    followerId: 'followerId',
    followingId: 'followingId',
    createdAt: 'createdAt'
  };

  export type FollowScalarFieldEnum = (typeof FollowScalarFieldEnum)[keyof typeof FollowScalarFieldEnum]


  export const ProblemScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    difficulty: 'difficulty',
    tags: 'tags',
    userId: 'userId',
    examples: 'examples',
    constraints: 'constraints',
    hints: 'hints',
    editorial: 'editorial',
    testcases: 'testcases',
    codeSnippets: 'codeSnippets',
    referenceSolutions: 'referenceSolutions',
    isPaid: 'isPaid',
    askedIn: 'askedIn',
    likes: 'likes',
    dislikes: 'dislikes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemScalarFieldEnum = (typeof ProblemScalarFieldEnum)[keyof typeof ProblemScalarFieldEnum]


  export const ProblemReactionScalarFieldEnum: {
    id: 'id',
    problemId: 'problemId',
    userId: 'userId',
    isLike: 'isLike'
  };

  export type ProblemReactionScalarFieldEnum = (typeof ProblemReactionScalarFieldEnum)[keyof typeof ProblemReactionScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    problemId: 'problemId',
    sourceCode: 'sourceCode',
    language: 'language',
    stdin: 'stdin',
    stdout: 'stdout',
    stderr: 'stderr',
    compileOutput: 'compileOutput',
    status: 'status',
    memory: 'memory',
    time: 'time',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const TestCaseResultScalarFieldEnum: {
    id: 'id',
    submissionId: 'submissionId',
    testCase: 'testCase',
    passed: 'passed',
    stdout: 'stdout',
    expected: 'expected',
    stderr: 'stderr',
    compileOutput: 'compileOutput',
    status: 'status',
    memory: 'memory',
    time: 'time',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TestCaseResultScalarFieldEnum = (typeof TestCaseResultScalarFieldEnum)[keyof typeof TestCaseResultScalarFieldEnum]


  export const ProblemSolvedScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    problemId: 'problemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemSolvedScalarFieldEnum = (typeof ProblemSolvedScalarFieldEnum)[keyof typeof ProblemSolvedScalarFieldEnum]


  export const PlaylistScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    userId: 'userId',
    isPaid: 'isPaid',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlaylistScalarFieldEnum = (typeof PlaylistScalarFieldEnum)[keyof typeof PlaylistScalarFieldEnum]


  export const PlaylistPurchaseScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    paymentId: 'paymentId',
    paymentOrderId: 'paymentOrderId',
    paymentSignature: 'paymentSignature',
    playlistId: 'playlistId',
    purchaseDate: 'purchaseDate'
  };

  export type PlaylistPurchaseScalarFieldEnum = (typeof PlaylistPurchaseScalarFieldEnum)[keyof typeof PlaylistPurchaseScalarFieldEnum]


  export const ProblemInPlaylistScalarFieldEnum: {
    id: 'id',
    playlistId: 'playlistId',
    problemId: 'problemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemInPlaylistScalarFieldEnum = (typeof ProblemInPlaylistScalarFieldEnum)[keyof typeof ProblemInPlaylistScalarFieldEnum]


  export const BadgeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BadgeScalarFieldEnum = (typeof BadgeScalarFieldEnum)[keyof typeof BadgeScalarFieldEnum]


  export const ProblemReportScalarFieldEnum: {
    id: 'id',
    problemId: 'problemId',
    userId: 'userId',
    reason: 'reason',
    description: 'description',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type ProblemReportScalarFieldEnum = (typeof ProblemReportScalarFieldEnum)[keyof typeof ProblemReportScalarFieldEnum]


  export const ProblemDiscussionScalarFieldEnum: {
    id: 'id',
    problemId: 'problemId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemDiscussionScalarFieldEnum = (typeof ProblemDiscussionScalarFieldEnum)[keyof typeof ProblemDiscussionScalarFieldEnum]


  export const DiscussionMessageScalarFieldEnum: {
    id: 'id',
    discussionId: 'discussionId',
    userId: 'userId',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DiscussionMessageScalarFieldEnum = (typeof DiscussionMessageScalarFieldEnum)[keyof typeof DiscussionMessageScalarFieldEnum]


  export const DiscussionReplyScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    userId: 'userId',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DiscussionReplyScalarFieldEnum = (typeof DiscussionReplyScalarFieldEnum)[keyof typeof DiscussionReplyScalarFieldEnum]


  export const DiscussionUpvoteScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    messageId: 'messageId'
  };

  export type DiscussionUpvoteScalarFieldEnum = (typeof DiscussionUpvoteScalarFieldEnum)[keyof typeof DiscussionUpvoteScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    content: 'content',
    isRead: 'isRead',
    referenceId: 'referenceId',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ProblemInvitationScalarFieldEnum: {
    id: 'id',
    problemId: 'problemId',
    senderId: 'senderId',
    receiverId: 'receiverId',
    status: 'status',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemInvitationScalarFieldEnum = (typeof ProblemInvitationScalarFieldEnum)[keyof typeof ProblemInvitationScalarFieldEnum]


  export const ProblemCollaborationScalarFieldEnum: {
    id: 'id',
    problemId: 'problemId',
    initiatorId: 'initiatorId',
    maxParticipants: 'maxParticipants',
    currentCode: 'currentCode',
    language: 'language',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProblemCollaborationScalarFieldEnum = (typeof ProblemCollaborationScalarFieldEnum)[keyof typeof ProblemCollaborationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Difficulty'
   */
  export type EnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty'>
    


  /**
   * Reference to a field of type 'Difficulty[]'
   */
  export type ListEnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ReportReason'
   */
  export type EnumReportReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportReason'>
    


  /**
   * Reference to a field of type 'ReportReason[]'
   */
  export type ListEnumReportReasonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportReason[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'InvitationStatus'
   */
  export type EnumInvitationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvitationStatus'>
    


  /**
   * Reference to a field of type 'InvitationStatus[]'
   */
  export type ListEnumInvitationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvitationStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    linkedin?: StringNullableFilter<"User"> | string | null
    portfolio?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    password?: StringFilter<"User"> | string
    forgotPasswordOtp?: StringNullableFilter<"User"> | string | null
    forgotPasswordOtpExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    provider?: StringNullableFilter<"User"> | string | null
    currentStreak?: IntFilter<"User"> | number
    longestStreak?: IntFilter<"User"> | number
    lastSolvedDate?: DateTimeNullableFilter<"User"> | Date | string | null
    followerCount?: IntFilter<"User"> | number
    followingCount?: IntFilter<"User"> | number
    badges?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    followers?: FollowListRelationFilter
    following?: FollowListRelationFilter
    problems?: ProblemListRelationFilter
    submission?: SubmissionListRelationFilter
    problemSolved?: ProblemSolvedListRelationFilter
    playlists?: PlaylistListRelationFilter
    submittedReports?: ProblemReportListRelationFilter
    discussionMessages?: DiscussionMessageListRelationFilter
    discussionReplies?: DiscussionReplyListRelationFilter
    discussionUpvotes?: DiscussionUpvoteListRelationFilter
    playlistPurchases?: PlaylistPurchaseListRelationFilter
    sentInvitations?: ProblemInvitationListRelationFilter
    receivedInvitations?: ProblemInvitationListRelationFilter
    participatingCollaborations?: ProblemCollaborationListRelationFilter
    notifications?: NotificationListRelationFilter
    initiatedCollaborations?: ProblemCollaborationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    bio?: SortOrderInput | SortOrder
    linkedin?: SortOrderInput | SortOrder
    portfolio?: SortOrderInput | SortOrder
    email?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    password?: SortOrder
    forgotPasswordOtp?: SortOrderInput | SortOrder
    forgotPasswordOtpExpiry?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastSolvedDate?: SortOrderInput | SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    badges?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    followers?: FollowOrderByRelationAggregateInput
    following?: FollowOrderByRelationAggregateInput
    problems?: ProblemOrderByRelationAggregateInput
    submission?: SubmissionOrderByRelationAggregateInput
    problemSolved?: ProblemSolvedOrderByRelationAggregateInput
    playlists?: PlaylistOrderByRelationAggregateInput
    submittedReports?: ProblemReportOrderByRelationAggregateInput
    discussionMessages?: DiscussionMessageOrderByRelationAggregateInput
    discussionReplies?: DiscussionReplyOrderByRelationAggregateInput
    discussionUpvotes?: DiscussionUpvoteOrderByRelationAggregateInput
    playlistPurchases?: PlaylistPurchaseOrderByRelationAggregateInput
    sentInvitations?: ProblemInvitationOrderByRelationAggregateInput
    receivedInvitations?: ProblemInvitationOrderByRelationAggregateInput
    participatingCollaborations?: ProblemCollaborationOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    initiatedCollaborations?: ProblemCollaborationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    linkedin?: StringNullableFilter<"User"> | string | null
    portfolio?: StringNullableFilter<"User"> | string | null
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    password?: StringFilter<"User"> | string
    forgotPasswordOtp?: StringNullableFilter<"User"> | string | null
    forgotPasswordOtpExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    provider?: StringNullableFilter<"User"> | string | null
    currentStreak?: IntFilter<"User"> | number
    longestStreak?: IntFilter<"User"> | number
    lastSolvedDate?: DateTimeNullableFilter<"User"> | Date | string | null
    followerCount?: IntFilter<"User"> | number
    followingCount?: IntFilter<"User"> | number
    badges?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    followers?: FollowListRelationFilter
    following?: FollowListRelationFilter
    problems?: ProblemListRelationFilter
    submission?: SubmissionListRelationFilter
    problemSolved?: ProblemSolvedListRelationFilter
    playlists?: PlaylistListRelationFilter
    submittedReports?: ProblemReportListRelationFilter
    discussionMessages?: DiscussionMessageListRelationFilter
    discussionReplies?: DiscussionReplyListRelationFilter
    discussionUpvotes?: DiscussionUpvoteListRelationFilter
    playlistPurchases?: PlaylistPurchaseListRelationFilter
    sentInvitations?: ProblemInvitationListRelationFilter
    receivedInvitations?: ProblemInvitationListRelationFilter
    participatingCollaborations?: ProblemCollaborationListRelationFilter
    notifications?: NotificationListRelationFilter
    initiatedCollaborations?: ProblemCollaborationListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    bio?: SortOrderInput | SortOrder
    linkedin?: SortOrderInput | SortOrder
    portfolio?: SortOrderInput | SortOrder
    email?: SortOrder
    image?: SortOrderInput | SortOrder
    role?: SortOrder
    password?: SortOrder
    forgotPasswordOtp?: SortOrderInput | SortOrder
    forgotPasswordOtpExpiry?: SortOrderInput | SortOrder
    provider?: SortOrderInput | SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastSolvedDate?: SortOrderInput | SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    badges?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    linkedin?: StringNullableWithAggregatesFilter<"User"> | string | null
    portfolio?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    password?: StringWithAggregatesFilter<"User"> | string
    forgotPasswordOtp?: StringNullableWithAggregatesFilter<"User"> | string | null
    forgotPasswordOtpExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    provider?: StringNullableWithAggregatesFilter<"User"> | string | null
    currentStreak?: IntWithAggregatesFilter<"User"> | number
    longestStreak?: IntWithAggregatesFilter<"User"> | number
    lastSolvedDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    followerCount?: IntWithAggregatesFilter<"User"> | number
    followingCount?: IntWithAggregatesFilter<"User"> | number
    badges?: JsonWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type FollowWhereInput = {
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    id?: StringFilter<"Follow"> | string
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
    following?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FollowOrderByWithRelationInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    follower?: UserOrderByWithRelationInput
    following?: UserOrderByWithRelationInput
  }

  export type FollowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    followerId_followingId?: FollowFollowerIdFollowingIdCompoundUniqueInput
    AND?: FollowWhereInput | FollowWhereInput[]
    OR?: FollowWhereInput[]
    NOT?: FollowWhereInput | FollowWhereInput[]
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
    follower?: XOR<UserScalarRelationFilter, UserWhereInput>
    following?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "followerId_followingId">

  export type FollowOrderByWithAggregationInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    _count?: FollowCountOrderByAggregateInput
    _max?: FollowMaxOrderByAggregateInput
    _min?: FollowMinOrderByAggregateInput
  }

  export type FollowScalarWhereWithAggregatesInput = {
    AND?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    OR?: FollowScalarWhereWithAggregatesInput[]
    NOT?: FollowScalarWhereWithAggregatesInput | FollowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Follow"> | string
    followerId?: StringWithAggregatesFilter<"Follow"> | string
    followingId?: StringWithAggregatesFilter<"Follow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Follow"> | Date | string
  }

  export type ProblemWhereInput = {
    AND?: ProblemWhereInput | ProblemWhereInput[]
    OR?: ProblemWhereInput[]
    NOT?: ProblemWhereInput | ProblemWhereInput[]
    id?: StringFilter<"Problem"> | string
    title?: StringFilter<"Problem"> | string
    description?: StringFilter<"Problem"> | string
    difficulty?: EnumDifficultyFilter<"Problem"> | $Enums.Difficulty
    tags?: StringNullableListFilter<"Problem">
    userId?: StringFilter<"Problem"> | string
    examples?: JsonFilter<"Problem">
    constraints?: StringFilter<"Problem"> | string
    hints?: StringNullableFilter<"Problem"> | string | null
    editorial?: StringNullableFilter<"Problem"> | string | null
    testcases?: JsonFilter<"Problem">
    codeSnippets?: JsonFilter<"Problem">
    referenceSolutions?: JsonFilter<"Problem">
    isPaid?: BoolFilter<"Problem"> | boolean
    askedIn?: StringNullableListFilter<"Problem">
    likes?: IntFilter<"Problem"> | number
    dislikes?: IntFilter<"Problem"> | number
    createdAt?: DateTimeFilter<"Problem"> | Date | string
    updatedAt?: DateTimeFilter<"Problem"> | Date | string
    invitations?: ProblemInvitationListRelationFilter
    collaborations?: ProblemCollaborationListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    submission?: SubmissionListRelationFilter
    solvedBy?: ProblemSolvedListRelationFilter
    problemsPlaylists?: ProblemInPlaylistListRelationFilter
    reports?: ProblemReportListRelationFilter
    discussions?: ProblemDiscussionListRelationFilter
  }

  export type ProblemOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    userId?: SortOrder
    examples?: SortOrder
    constraints?: SortOrder
    hints?: SortOrderInput | SortOrder
    editorial?: SortOrderInput | SortOrder
    testcases?: SortOrder
    codeSnippets?: SortOrder
    referenceSolutions?: SortOrder
    isPaid?: SortOrder
    askedIn?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    invitations?: ProblemInvitationOrderByRelationAggregateInput
    collaborations?: ProblemCollaborationOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    submission?: SubmissionOrderByRelationAggregateInput
    solvedBy?: ProblemSolvedOrderByRelationAggregateInput
    problemsPlaylists?: ProblemInPlaylistOrderByRelationAggregateInput
    reports?: ProblemReportOrderByRelationAggregateInput
    discussions?: ProblemDiscussionOrderByRelationAggregateInput
  }

  export type ProblemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProblemWhereInput | ProblemWhereInput[]
    OR?: ProblemWhereInput[]
    NOT?: ProblemWhereInput | ProblemWhereInput[]
    title?: StringFilter<"Problem"> | string
    description?: StringFilter<"Problem"> | string
    difficulty?: EnumDifficultyFilter<"Problem"> | $Enums.Difficulty
    tags?: StringNullableListFilter<"Problem">
    userId?: StringFilter<"Problem"> | string
    examples?: JsonFilter<"Problem">
    constraints?: StringFilter<"Problem"> | string
    hints?: StringNullableFilter<"Problem"> | string | null
    editorial?: StringNullableFilter<"Problem"> | string | null
    testcases?: JsonFilter<"Problem">
    codeSnippets?: JsonFilter<"Problem">
    referenceSolutions?: JsonFilter<"Problem">
    isPaid?: BoolFilter<"Problem"> | boolean
    askedIn?: StringNullableListFilter<"Problem">
    likes?: IntFilter<"Problem"> | number
    dislikes?: IntFilter<"Problem"> | number
    createdAt?: DateTimeFilter<"Problem"> | Date | string
    updatedAt?: DateTimeFilter<"Problem"> | Date | string
    invitations?: ProblemInvitationListRelationFilter
    collaborations?: ProblemCollaborationListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    submission?: SubmissionListRelationFilter
    solvedBy?: ProblemSolvedListRelationFilter
    problemsPlaylists?: ProblemInPlaylistListRelationFilter
    reports?: ProblemReportListRelationFilter
    discussions?: ProblemDiscussionListRelationFilter
  }, "id">

  export type ProblemOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    userId?: SortOrder
    examples?: SortOrder
    constraints?: SortOrder
    hints?: SortOrderInput | SortOrder
    editorial?: SortOrderInput | SortOrder
    testcases?: SortOrder
    codeSnippets?: SortOrder
    referenceSolutions?: SortOrder
    isPaid?: SortOrder
    askedIn?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemCountOrderByAggregateInput
    _avg?: ProblemAvgOrderByAggregateInput
    _max?: ProblemMaxOrderByAggregateInput
    _min?: ProblemMinOrderByAggregateInput
    _sum?: ProblemSumOrderByAggregateInput
  }

  export type ProblemScalarWhereWithAggregatesInput = {
    AND?: ProblemScalarWhereWithAggregatesInput | ProblemScalarWhereWithAggregatesInput[]
    OR?: ProblemScalarWhereWithAggregatesInput[]
    NOT?: ProblemScalarWhereWithAggregatesInput | ProblemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Problem"> | string
    title?: StringWithAggregatesFilter<"Problem"> | string
    description?: StringWithAggregatesFilter<"Problem"> | string
    difficulty?: EnumDifficultyWithAggregatesFilter<"Problem"> | $Enums.Difficulty
    tags?: StringNullableListFilter<"Problem">
    userId?: StringWithAggregatesFilter<"Problem"> | string
    examples?: JsonWithAggregatesFilter<"Problem">
    constraints?: StringWithAggregatesFilter<"Problem"> | string
    hints?: StringNullableWithAggregatesFilter<"Problem"> | string | null
    editorial?: StringNullableWithAggregatesFilter<"Problem"> | string | null
    testcases?: JsonWithAggregatesFilter<"Problem">
    codeSnippets?: JsonWithAggregatesFilter<"Problem">
    referenceSolutions?: JsonWithAggregatesFilter<"Problem">
    isPaid?: BoolWithAggregatesFilter<"Problem"> | boolean
    askedIn?: StringNullableListFilter<"Problem">
    likes?: IntWithAggregatesFilter<"Problem"> | number
    dislikes?: IntWithAggregatesFilter<"Problem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Problem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Problem"> | Date | string
  }

  export type ProblemReactionWhereInput = {
    AND?: ProblemReactionWhereInput | ProblemReactionWhereInput[]
    OR?: ProblemReactionWhereInput[]
    NOT?: ProblemReactionWhereInput | ProblemReactionWhereInput[]
    id?: StringFilter<"ProblemReaction"> | string
    problemId?: StringFilter<"ProblemReaction"> | string
    userId?: StringFilter<"ProblemReaction"> | string
    isLike?: BoolFilter<"ProblemReaction"> | boolean
  }

  export type ProblemReactionOrderByWithRelationInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    isLike?: SortOrder
  }

  export type ProblemReactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    problemId_userId?: ProblemReactionProblemIdUserIdCompoundUniqueInput
    AND?: ProblemReactionWhereInput | ProblemReactionWhereInput[]
    OR?: ProblemReactionWhereInput[]
    NOT?: ProblemReactionWhereInput | ProblemReactionWhereInput[]
    problemId?: StringFilter<"ProblemReaction"> | string
    userId?: StringFilter<"ProblemReaction"> | string
    isLike?: BoolFilter<"ProblemReaction"> | boolean
  }, "id" | "problemId_userId">

  export type ProblemReactionOrderByWithAggregationInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    isLike?: SortOrder
    _count?: ProblemReactionCountOrderByAggregateInput
    _max?: ProblemReactionMaxOrderByAggregateInput
    _min?: ProblemReactionMinOrderByAggregateInput
  }

  export type ProblemReactionScalarWhereWithAggregatesInput = {
    AND?: ProblemReactionScalarWhereWithAggregatesInput | ProblemReactionScalarWhereWithAggregatesInput[]
    OR?: ProblemReactionScalarWhereWithAggregatesInput[]
    NOT?: ProblemReactionScalarWhereWithAggregatesInput | ProblemReactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProblemReaction"> | string
    problemId?: StringWithAggregatesFilter<"ProblemReaction"> | string
    userId?: StringWithAggregatesFilter<"ProblemReaction"> | string
    isLike?: BoolWithAggregatesFilter<"ProblemReaction"> | boolean
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    id?: StringFilter<"Submission"> | string
    userId?: StringFilter<"Submission"> | string
    problemId?: StringFilter<"Submission"> | string
    sourceCode?: StringFilter<"Submission"> | string
    language?: StringFilter<"Submission"> | string
    stdin?: StringNullableFilter<"Submission"> | string | null
    stdout?: StringNullableFilter<"Submission"> | string | null
    stderr?: StringNullableFilter<"Submission"> | string | null
    compileOutput?: StringNullableFilter<"Submission"> | string | null
    status?: StringFilter<"Submission"> | string
    memory?: StringNullableFilter<"Submission"> | string | null
    time?: StringNullableFilter<"Submission"> | string | null
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    updatedAt?: DateTimeFilter<"Submission"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    testCases?: TestCaseResultListRelationFilter
  }

  export type SubmissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    sourceCode?: SortOrder
    language?: SortOrder
    stdin?: SortOrderInput | SortOrder
    stdout?: SortOrderInput | SortOrder
    stderr?: SortOrderInput | SortOrder
    compileOutput?: SortOrderInput | SortOrder
    status?: SortOrder
    memory?: SortOrderInput | SortOrder
    time?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    problem?: ProblemOrderByWithRelationInput
    testCases?: TestCaseResultOrderByRelationAggregateInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    userId?: StringFilter<"Submission"> | string
    problemId?: StringFilter<"Submission"> | string
    sourceCode?: StringFilter<"Submission"> | string
    language?: StringFilter<"Submission"> | string
    stdin?: StringNullableFilter<"Submission"> | string | null
    stdout?: StringNullableFilter<"Submission"> | string | null
    stderr?: StringNullableFilter<"Submission"> | string | null
    compileOutput?: StringNullableFilter<"Submission"> | string | null
    status?: StringFilter<"Submission"> | string
    memory?: StringNullableFilter<"Submission"> | string | null
    time?: StringNullableFilter<"Submission"> | string | null
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    updatedAt?: DateTimeFilter<"Submission"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    testCases?: TestCaseResultListRelationFilter
  }, "id">

  export type SubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    sourceCode?: SortOrder
    language?: SortOrder
    stdin?: SortOrderInput | SortOrder
    stdout?: SortOrderInput | SortOrder
    stderr?: SortOrderInput | SortOrder
    compileOutput?: SortOrderInput | SortOrder
    status?: SortOrder
    memory?: SortOrderInput | SortOrder
    time?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Submission"> | string
    userId?: StringWithAggregatesFilter<"Submission"> | string
    problemId?: StringWithAggregatesFilter<"Submission"> | string
    sourceCode?: StringWithAggregatesFilter<"Submission"> | string
    language?: StringWithAggregatesFilter<"Submission"> | string
    stdin?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    stdout?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    stderr?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    compileOutput?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    status?: StringWithAggregatesFilter<"Submission"> | string
    memory?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    time?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
  }

  export type TestCaseResultWhereInput = {
    AND?: TestCaseResultWhereInput | TestCaseResultWhereInput[]
    OR?: TestCaseResultWhereInput[]
    NOT?: TestCaseResultWhereInput | TestCaseResultWhereInput[]
    id?: StringFilter<"TestCaseResult"> | string
    submissionId?: StringFilter<"TestCaseResult"> | string
    testCase?: IntFilter<"TestCaseResult"> | number
    passed?: BoolFilter<"TestCaseResult"> | boolean
    stdout?: StringNullableFilter<"TestCaseResult"> | string | null
    expected?: StringFilter<"TestCaseResult"> | string
    stderr?: StringNullableFilter<"TestCaseResult"> | string | null
    compileOutput?: StringNullableFilter<"TestCaseResult"> | string | null
    status?: StringFilter<"TestCaseResult"> | string
    memory?: StringNullableFilter<"TestCaseResult"> | string | null
    time?: StringNullableFilter<"TestCaseResult"> | string | null
    createdAt?: DateTimeFilter<"TestCaseResult"> | Date | string
    updatedAt?: DateTimeFilter<"TestCaseResult"> | Date | string
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
  }

  export type TestCaseResultOrderByWithRelationInput = {
    id?: SortOrder
    submissionId?: SortOrder
    testCase?: SortOrder
    passed?: SortOrder
    stdout?: SortOrderInput | SortOrder
    expected?: SortOrder
    stderr?: SortOrderInput | SortOrder
    compileOutput?: SortOrderInput | SortOrder
    status?: SortOrder
    memory?: SortOrderInput | SortOrder
    time?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submission?: SubmissionOrderByWithRelationInput
  }

  export type TestCaseResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestCaseResultWhereInput | TestCaseResultWhereInput[]
    OR?: TestCaseResultWhereInput[]
    NOT?: TestCaseResultWhereInput | TestCaseResultWhereInput[]
    submissionId?: StringFilter<"TestCaseResult"> | string
    testCase?: IntFilter<"TestCaseResult"> | number
    passed?: BoolFilter<"TestCaseResult"> | boolean
    stdout?: StringNullableFilter<"TestCaseResult"> | string | null
    expected?: StringFilter<"TestCaseResult"> | string
    stderr?: StringNullableFilter<"TestCaseResult"> | string | null
    compileOutput?: StringNullableFilter<"TestCaseResult"> | string | null
    status?: StringFilter<"TestCaseResult"> | string
    memory?: StringNullableFilter<"TestCaseResult"> | string | null
    time?: StringNullableFilter<"TestCaseResult"> | string | null
    createdAt?: DateTimeFilter<"TestCaseResult"> | Date | string
    updatedAt?: DateTimeFilter<"TestCaseResult"> | Date | string
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
  }, "id">

  export type TestCaseResultOrderByWithAggregationInput = {
    id?: SortOrder
    submissionId?: SortOrder
    testCase?: SortOrder
    passed?: SortOrder
    stdout?: SortOrderInput | SortOrder
    expected?: SortOrder
    stderr?: SortOrderInput | SortOrder
    compileOutput?: SortOrderInput | SortOrder
    status?: SortOrder
    memory?: SortOrderInput | SortOrder
    time?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TestCaseResultCountOrderByAggregateInput
    _avg?: TestCaseResultAvgOrderByAggregateInput
    _max?: TestCaseResultMaxOrderByAggregateInput
    _min?: TestCaseResultMinOrderByAggregateInput
    _sum?: TestCaseResultSumOrderByAggregateInput
  }

  export type TestCaseResultScalarWhereWithAggregatesInput = {
    AND?: TestCaseResultScalarWhereWithAggregatesInput | TestCaseResultScalarWhereWithAggregatesInput[]
    OR?: TestCaseResultScalarWhereWithAggregatesInput[]
    NOT?: TestCaseResultScalarWhereWithAggregatesInput | TestCaseResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TestCaseResult"> | string
    submissionId?: StringWithAggregatesFilter<"TestCaseResult"> | string
    testCase?: IntWithAggregatesFilter<"TestCaseResult"> | number
    passed?: BoolWithAggregatesFilter<"TestCaseResult"> | boolean
    stdout?: StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
    expected?: StringWithAggregatesFilter<"TestCaseResult"> | string
    stderr?: StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
    compileOutput?: StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
    status?: StringWithAggregatesFilter<"TestCaseResult"> | string
    memory?: StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
    time?: StringNullableWithAggregatesFilter<"TestCaseResult"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TestCaseResult"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TestCaseResult"> | Date | string
  }

  export type ProblemSolvedWhereInput = {
    AND?: ProblemSolvedWhereInput | ProblemSolvedWhereInput[]
    OR?: ProblemSolvedWhereInput[]
    NOT?: ProblemSolvedWhereInput | ProblemSolvedWhereInput[]
    id?: StringFilter<"ProblemSolved"> | string
    userId?: StringFilter<"ProblemSolved"> | string
    problemId?: StringFilter<"ProblemSolved"> | string
    createdAt?: DateTimeFilter<"ProblemSolved"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemSolved"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
  }

  export type ProblemSolvedOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    problem?: ProblemOrderByWithRelationInput
  }

  export type ProblemSolvedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_problemId?: ProblemSolvedUserIdProblemIdCompoundUniqueInput
    AND?: ProblemSolvedWhereInput | ProblemSolvedWhereInput[]
    OR?: ProblemSolvedWhereInput[]
    NOT?: ProblemSolvedWhereInput | ProblemSolvedWhereInput[]
    userId?: StringFilter<"ProblemSolved"> | string
    problemId?: StringFilter<"ProblemSolved"> | string
    createdAt?: DateTimeFilter<"ProblemSolved"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemSolved"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
  }, "id" | "userId_problemId">

  export type ProblemSolvedOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemSolvedCountOrderByAggregateInput
    _max?: ProblemSolvedMaxOrderByAggregateInput
    _min?: ProblemSolvedMinOrderByAggregateInput
  }

  export type ProblemSolvedScalarWhereWithAggregatesInput = {
    AND?: ProblemSolvedScalarWhereWithAggregatesInput | ProblemSolvedScalarWhereWithAggregatesInput[]
    OR?: ProblemSolvedScalarWhereWithAggregatesInput[]
    NOT?: ProblemSolvedScalarWhereWithAggregatesInput | ProblemSolvedScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProblemSolved"> | string
    userId?: StringWithAggregatesFilter<"ProblemSolved"> | string
    problemId?: StringWithAggregatesFilter<"ProblemSolved"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProblemSolved"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProblemSolved"> | Date | string
  }

  export type PlaylistWhereInput = {
    AND?: PlaylistWhereInput | PlaylistWhereInput[]
    OR?: PlaylistWhereInput[]
    NOT?: PlaylistWhereInput | PlaylistWhereInput[]
    id?: StringFilter<"Playlist"> | string
    name?: StringFilter<"Playlist"> | string
    description?: StringNullableFilter<"Playlist"> | string | null
    userId?: StringFilter<"Playlist"> | string
    isPaid?: BoolFilter<"Playlist"> | boolean
    price?: IntNullableFilter<"Playlist"> | number | null
    createdAt?: DateTimeFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeFilter<"Playlist"> | Date | string
    problems?: ProblemInPlaylistListRelationFilter
    purchases?: PlaylistPurchaseListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PlaylistOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    isPaid?: SortOrder
    price?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    problems?: ProblemInPlaylistOrderByRelationAggregateInput
    purchases?: PlaylistPurchaseOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type PlaylistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_userId?: PlaylistNameUserIdCompoundUniqueInput
    AND?: PlaylistWhereInput | PlaylistWhereInput[]
    OR?: PlaylistWhereInput[]
    NOT?: PlaylistWhereInput | PlaylistWhereInput[]
    name?: StringFilter<"Playlist"> | string
    description?: StringNullableFilter<"Playlist"> | string | null
    userId?: StringFilter<"Playlist"> | string
    isPaid?: BoolFilter<"Playlist"> | boolean
    price?: IntNullableFilter<"Playlist"> | number | null
    createdAt?: DateTimeFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeFilter<"Playlist"> | Date | string
    problems?: ProblemInPlaylistListRelationFilter
    purchases?: PlaylistPurchaseListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "name_userId">

  export type PlaylistOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    isPaid?: SortOrder
    price?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlaylistCountOrderByAggregateInput
    _avg?: PlaylistAvgOrderByAggregateInput
    _max?: PlaylistMaxOrderByAggregateInput
    _min?: PlaylistMinOrderByAggregateInput
    _sum?: PlaylistSumOrderByAggregateInput
  }

  export type PlaylistScalarWhereWithAggregatesInput = {
    AND?: PlaylistScalarWhereWithAggregatesInput | PlaylistScalarWhereWithAggregatesInput[]
    OR?: PlaylistScalarWhereWithAggregatesInput[]
    NOT?: PlaylistScalarWhereWithAggregatesInput | PlaylistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Playlist"> | string
    name?: StringWithAggregatesFilter<"Playlist"> | string
    description?: StringNullableWithAggregatesFilter<"Playlist"> | string | null
    userId?: StringWithAggregatesFilter<"Playlist"> | string
    isPaid?: BoolWithAggregatesFilter<"Playlist"> | boolean
    price?: IntNullableWithAggregatesFilter<"Playlist"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Playlist"> | Date | string
  }

  export type PlaylistPurchaseWhereInput = {
    AND?: PlaylistPurchaseWhereInput | PlaylistPurchaseWhereInput[]
    OR?: PlaylistPurchaseWhereInput[]
    NOT?: PlaylistPurchaseWhereInput | PlaylistPurchaseWhereInput[]
    id?: StringFilter<"PlaylistPurchase"> | string
    userId?: StringFilter<"PlaylistPurchase"> | string
    paymentId?: StringFilter<"PlaylistPurchase"> | string
    paymentOrderId?: StringFilter<"PlaylistPurchase"> | string
    paymentSignature?: StringFilter<"PlaylistPurchase"> | string
    playlistId?: StringFilter<"PlaylistPurchase"> | string
    purchaseDate?: DateTimeFilter<"PlaylistPurchase"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    playlist?: XOR<PlaylistScalarRelationFilter, PlaylistWhereInput>
  }

  export type PlaylistPurchaseOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrder
    paymentOrderId?: SortOrder
    paymentSignature?: SortOrder
    playlistId?: SortOrder
    purchaseDate?: SortOrder
    user?: UserOrderByWithRelationInput
    playlist?: PlaylistOrderByWithRelationInput
  }

  export type PlaylistPurchaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_playlistId?: PlaylistPurchaseUserIdPlaylistIdCompoundUniqueInput
    AND?: PlaylistPurchaseWhereInput | PlaylistPurchaseWhereInput[]
    OR?: PlaylistPurchaseWhereInput[]
    NOT?: PlaylistPurchaseWhereInput | PlaylistPurchaseWhereInput[]
    userId?: StringFilter<"PlaylistPurchase"> | string
    paymentId?: StringFilter<"PlaylistPurchase"> | string
    paymentOrderId?: StringFilter<"PlaylistPurchase"> | string
    paymentSignature?: StringFilter<"PlaylistPurchase"> | string
    playlistId?: StringFilter<"PlaylistPurchase"> | string
    purchaseDate?: DateTimeFilter<"PlaylistPurchase"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    playlist?: XOR<PlaylistScalarRelationFilter, PlaylistWhereInput>
  }, "id" | "userId_playlistId">

  export type PlaylistPurchaseOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrder
    paymentOrderId?: SortOrder
    paymentSignature?: SortOrder
    playlistId?: SortOrder
    purchaseDate?: SortOrder
    _count?: PlaylistPurchaseCountOrderByAggregateInput
    _max?: PlaylistPurchaseMaxOrderByAggregateInput
    _min?: PlaylistPurchaseMinOrderByAggregateInput
  }

  export type PlaylistPurchaseScalarWhereWithAggregatesInput = {
    AND?: PlaylistPurchaseScalarWhereWithAggregatesInput | PlaylistPurchaseScalarWhereWithAggregatesInput[]
    OR?: PlaylistPurchaseScalarWhereWithAggregatesInput[]
    NOT?: PlaylistPurchaseScalarWhereWithAggregatesInput | PlaylistPurchaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlaylistPurchase"> | string
    userId?: StringWithAggregatesFilter<"PlaylistPurchase"> | string
    paymentId?: StringWithAggregatesFilter<"PlaylistPurchase"> | string
    paymentOrderId?: StringWithAggregatesFilter<"PlaylistPurchase"> | string
    paymentSignature?: StringWithAggregatesFilter<"PlaylistPurchase"> | string
    playlistId?: StringWithAggregatesFilter<"PlaylistPurchase"> | string
    purchaseDate?: DateTimeWithAggregatesFilter<"PlaylistPurchase"> | Date | string
  }

  export type ProblemInPlaylistWhereInput = {
    AND?: ProblemInPlaylistWhereInput | ProblemInPlaylistWhereInput[]
    OR?: ProblemInPlaylistWhereInput[]
    NOT?: ProblemInPlaylistWhereInput | ProblemInPlaylistWhereInput[]
    id?: StringFilter<"ProblemInPlaylist"> | string
    playlistId?: StringFilter<"ProblemInPlaylist"> | string
    problemId?: StringFilter<"ProblemInPlaylist"> | string
    createdAt?: DateTimeFilter<"ProblemInPlaylist"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemInPlaylist"> | Date | string
    playlist?: XOR<PlaylistScalarRelationFilter, PlaylistWhereInput>
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
  }

  export type ProblemInPlaylistOrderByWithRelationInput = {
    id?: SortOrder
    playlistId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    playlist?: PlaylistOrderByWithRelationInput
    problem?: ProblemOrderByWithRelationInput
  }

  export type ProblemInPlaylistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    playlistId_problemId?: ProblemInPlaylistPlaylistIdProblemIdCompoundUniqueInput
    AND?: ProblemInPlaylistWhereInput | ProblemInPlaylistWhereInput[]
    OR?: ProblemInPlaylistWhereInput[]
    NOT?: ProblemInPlaylistWhereInput | ProblemInPlaylistWhereInput[]
    playlistId?: StringFilter<"ProblemInPlaylist"> | string
    problemId?: StringFilter<"ProblemInPlaylist"> | string
    createdAt?: DateTimeFilter<"ProblemInPlaylist"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemInPlaylist"> | Date | string
    playlist?: XOR<PlaylistScalarRelationFilter, PlaylistWhereInput>
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
  }, "id" | "playlistId_problemId">

  export type ProblemInPlaylistOrderByWithAggregationInput = {
    id?: SortOrder
    playlistId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemInPlaylistCountOrderByAggregateInput
    _max?: ProblemInPlaylistMaxOrderByAggregateInput
    _min?: ProblemInPlaylistMinOrderByAggregateInput
  }

  export type ProblemInPlaylistScalarWhereWithAggregatesInput = {
    AND?: ProblemInPlaylistScalarWhereWithAggregatesInput | ProblemInPlaylistScalarWhereWithAggregatesInput[]
    OR?: ProblemInPlaylistScalarWhereWithAggregatesInput[]
    NOT?: ProblemInPlaylistScalarWhereWithAggregatesInput | ProblemInPlaylistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProblemInPlaylist"> | string
    playlistId?: StringWithAggregatesFilter<"ProblemInPlaylist"> | string
    problemId?: StringWithAggregatesFilter<"ProblemInPlaylist"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProblemInPlaylist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProblemInPlaylist"> | Date | string
  }

  export type BadgeWhereInput = {
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    id?: StringFilter<"Badge"> | string
    name?: StringFilter<"Badge"> | string
    icon?: StringFilter<"Badge"> | string
    description?: StringFilter<"Badge"> | string
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    updatedAt?: DateTimeFilter<"Badge"> | Date | string
  }

  export type BadgeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    icon?: StringFilter<"Badge"> | string
    description?: StringFilter<"Badge"> | string
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    updatedAt?: DateTimeFilter<"Badge"> | Date | string
  }, "id" | "name">

  export type BadgeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BadgeCountOrderByAggregateInput
    _max?: BadgeMaxOrderByAggregateInput
    _min?: BadgeMinOrderByAggregateInput
  }

  export type BadgeScalarWhereWithAggregatesInput = {
    AND?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    OR?: BadgeScalarWhereWithAggregatesInput[]
    NOT?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Badge"> | string
    name?: StringWithAggregatesFilter<"Badge"> | string
    icon?: StringWithAggregatesFilter<"Badge"> | string
    description?: StringWithAggregatesFilter<"Badge"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Badge"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Badge"> | Date | string
  }

  export type ProblemReportWhereInput = {
    AND?: ProblemReportWhereInput | ProblemReportWhereInput[]
    OR?: ProblemReportWhereInput[]
    NOT?: ProblemReportWhereInput | ProblemReportWhereInput[]
    id?: StringFilter<"ProblemReport"> | string
    problemId?: StringFilter<"ProblemReport"> | string
    userId?: StringFilter<"ProblemReport"> | string
    reason?: EnumReportReasonFilter<"ProblemReport"> | $Enums.ReportReason
    description?: StringNullableFilter<"ProblemReport"> | string | null
    status?: StringFilter<"ProblemReport"> | string
    createdAt?: DateTimeFilter<"ProblemReport"> | Date | string
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProblemReportOrderByWithRelationInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    problem?: ProblemOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ProblemReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProblemReportWhereInput | ProblemReportWhereInput[]
    OR?: ProblemReportWhereInput[]
    NOT?: ProblemReportWhereInput | ProblemReportWhereInput[]
    problemId?: StringFilter<"ProblemReport"> | string
    userId?: StringFilter<"ProblemReport"> | string
    reason?: EnumReportReasonFilter<"ProblemReport"> | $Enums.ReportReason
    description?: StringNullableFilter<"ProblemReport"> | string | null
    status?: StringFilter<"ProblemReport"> | string
    createdAt?: DateTimeFilter<"ProblemReport"> | Date | string
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ProblemReportOrderByWithAggregationInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: ProblemReportCountOrderByAggregateInput
    _max?: ProblemReportMaxOrderByAggregateInput
    _min?: ProblemReportMinOrderByAggregateInput
  }

  export type ProblemReportScalarWhereWithAggregatesInput = {
    AND?: ProblemReportScalarWhereWithAggregatesInput | ProblemReportScalarWhereWithAggregatesInput[]
    OR?: ProblemReportScalarWhereWithAggregatesInput[]
    NOT?: ProblemReportScalarWhereWithAggregatesInput | ProblemReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProblemReport"> | string
    problemId?: StringWithAggregatesFilter<"ProblemReport"> | string
    userId?: StringWithAggregatesFilter<"ProblemReport"> | string
    reason?: EnumReportReasonWithAggregatesFilter<"ProblemReport"> | $Enums.ReportReason
    description?: StringNullableWithAggregatesFilter<"ProblemReport"> | string | null
    status?: StringWithAggregatesFilter<"ProblemReport"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProblemReport"> | Date | string
  }

  export type ProblemDiscussionWhereInput = {
    AND?: ProblemDiscussionWhereInput | ProblemDiscussionWhereInput[]
    OR?: ProblemDiscussionWhereInput[]
    NOT?: ProblemDiscussionWhereInput | ProblemDiscussionWhereInput[]
    id?: StringFilter<"ProblemDiscussion"> | string
    problemId?: StringFilter<"ProblemDiscussion"> | string
    createdAt?: DateTimeFilter<"ProblemDiscussion"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemDiscussion"> | Date | string
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    messages?: DiscussionMessageListRelationFilter
  }

  export type ProblemDiscussionOrderByWithRelationInput = {
    id?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    problem?: ProblemOrderByWithRelationInput
    messages?: DiscussionMessageOrderByRelationAggregateInput
  }

  export type ProblemDiscussionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProblemDiscussionWhereInput | ProblemDiscussionWhereInput[]
    OR?: ProblemDiscussionWhereInput[]
    NOT?: ProblemDiscussionWhereInput | ProblemDiscussionWhereInput[]
    problemId?: StringFilter<"ProblemDiscussion"> | string
    createdAt?: DateTimeFilter<"ProblemDiscussion"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemDiscussion"> | Date | string
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    messages?: DiscussionMessageListRelationFilter
  }, "id">

  export type ProblemDiscussionOrderByWithAggregationInput = {
    id?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemDiscussionCountOrderByAggregateInput
    _max?: ProblemDiscussionMaxOrderByAggregateInput
    _min?: ProblemDiscussionMinOrderByAggregateInput
  }

  export type ProblemDiscussionScalarWhereWithAggregatesInput = {
    AND?: ProblemDiscussionScalarWhereWithAggregatesInput | ProblemDiscussionScalarWhereWithAggregatesInput[]
    OR?: ProblemDiscussionScalarWhereWithAggregatesInput[]
    NOT?: ProblemDiscussionScalarWhereWithAggregatesInput | ProblemDiscussionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProblemDiscussion"> | string
    problemId?: StringWithAggregatesFilter<"ProblemDiscussion"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProblemDiscussion"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProblemDiscussion"> | Date | string
  }

  export type DiscussionMessageWhereInput = {
    AND?: DiscussionMessageWhereInput | DiscussionMessageWhereInput[]
    OR?: DiscussionMessageWhereInput[]
    NOT?: DiscussionMessageWhereInput | DiscussionMessageWhereInput[]
    id?: StringFilter<"DiscussionMessage"> | string
    discussionId?: StringFilter<"DiscussionMessage"> | string
    userId?: StringFilter<"DiscussionMessage"> | string
    content?: StringFilter<"DiscussionMessage"> | string
    createdAt?: DateTimeFilter<"DiscussionMessage"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionMessage"> | Date | string
    discussion?: XOR<ProblemDiscussionScalarRelationFilter, ProblemDiscussionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    replies?: DiscussionReplyListRelationFilter
    upvotes?: DiscussionUpvoteListRelationFilter
  }

  export type DiscussionMessageOrderByWithRelationInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    discussion?: ProblemDiscussionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    replies?: DiscussionReplyOrderByRelationAggregateInput
    upvotes?: DiscussionUpvoteOrderByRelationAggregateInput
  }

  export type DiscussionMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DiscussionMessageWhereInput | DiscussionMessageWhereInput[]
    OR?: DiscussionMessageWhereInput[]
    NOT?: DiscussionMessageWhereInput | DiscussionMessageWhereInput[]
    discussionId?: StringFilter<"DiscussionMessage"> | string
    userId?: StringFilter<"DiscussionMessage"> | string
    content?: StringFilter<"DiscussionMessage"> | string
    createdAt?: DateTimeFilter<"DiscussionMessage"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionMessage"> | Date | string
    discussion?: XOR<ProblemDiscussionScalarRelationFilter, ProblemDiscussionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    replies?: DiscussionReplyListRelationFilter
    upvotes?: DiscussionUpvoteListRelationFilter
  }, "id">

  export type DiscussionMessageOrderByWithAggregationInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DiscussionMessageCountOrderByAggregateInput
    _max?: DiscussionMessageMaxOrderByAggregateInput
    _min?: DiscussionMessageMinOrderByAggregateInput
  }

  export type DiscussionMessageScalarWhereWithAggregatesInput = {
    AND?: DiscussionMessageScalarWhereWithAggregatesInput | DiscussionMessageScalarWhereWithAggregatesInput[]
    OR?: DiscussionMessageScalarWhereWithAggregatesInput[]
    NOT?: DiscussionMessageScalarWhereWithAggregatesInput | DiscussionMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DiscussionMessage"> | string
    discussionId?: StringWithAggregatesFilter<"DiscussionMessage"> | string
    userId?: StringWithAggregatesFilter<"DiscussionMessage"> | string
    content?: StringWithAggregatesFilter<"DiscussionMessage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DiscussionMessage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DiscussionMessage"> | Date | string
  }

  export type DiscussionReplyWhereInput = {
    AND?: DiscussionReplyWhereInput | DiscussionReplyWhereInput[]
    OR?: DiscussionReplyWhereInput[]
    NOT?: DiscussionReplyWhereInput | DiscussionReplyWhereInput[]
    id?: StringFilter<"DiscussionReply"> | string
    messageId?: StringFilter<"DiscussionReply"> | string
    userId?: StringFilter<"DiscussionReply"> | string
    content?: StringFilter<"DiscussionReply"> | string
    createdAt?: DateTimeFilter<"DiscussionReply"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionReply"> | Date | string
    message?: XOR<DiscussionMessageScalarRelationFilter, DiscussionMessageWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DiscussionReplyOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    message?: DiscussionMessageOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type DiscussionReplyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DiscussionReplyWhereInput | DiscussionReplyWhereInput[]
    OR?: DiscussionReplyWhereInput[]
    NOT?: DiscussionReplyWhereInput | DiscussionReplyWhereInput[]
    messageId?: StringFilter<"DiscussionReply"> | string
    userId?: StringFilter<"DiscussionReply"> | string
    content?: StringFilter<"DiscussionReply"> | string
    createdAt?: DateTimeFilter<"DiscussionReply"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionReply"> | Date | string
    message?: XOR<DiscussionMessageScalarRelationFilter, DiscussionMessageWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DiscussionReplyOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DiscussionReplyCountOrderByAggregateInput
    _max?: DiscussionReplyMaxOrderByAggregateInput
    _min?: DiscussionReplyMinOrderByAggregateInput
  }

  export type DiscussionReplyScalarWhereWithAggregatesInput = {
    AND?: DiscussionReplyScalarWhereWithAggregatesInput | DiscussionReplyScalarWhereWithAggregatesInput[]
    OR?: DiscussionReplyScalarWhereWithAggregatesInput[]
    NOT?: DiscussionReplyScalarWhereWithAggregatesInput | DiscussionReplyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DiscussionReply"> | string
    messageId?: StringWithAggregatesFilter<"DiscussionReply"> | string
    userId?: StringWithAggregatesFilter<"DiscussionReply"> | string
    content?: StringWithAggregatesFilter<"DiscussionReply"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DiscussionReply"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DiscussionReply"> | Date | string
  }

  export type DiscussionUpvoteWhereInput = {
    AND?: DiscussionUpvoteWhereInput | DiscussionUpvoteWhereInput[]
    OR?: DiscussionUpvoteWhereInput[]
    NOT?: DiscussionUpvoteWhereInput | DiscussionUpvoteWhereInput[]
    id?: StringFilter<"DiscussionUpvote"> | string
    userId?: StringFilter<"DiscussionUpvote"> | string
    messageId?: StringFilter<"DiscussionUpvote"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    message?: XOR<DiscussionMessageScalarRelationFilter, DiscussionMessageWhereInput>
  }

  export type DiscussionUpvoteOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    messageId?: SortOrder
    user?: UserOrderByWithRelationInput
    message?: DiscussionMessageOrderByWithRelationInput
  }

  export type DiscussionUpvoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_messageId?: DiscussionUpvoteUserIdMessageIdCompoundUniqueInput
    AND?: DiscussionUpvoteWhereInput | DiscussionUpvoteWhereInput[]
    OR?: DiscussionUpvoteWhereInput[]
    NOT?: DiscussionUpvoteWhereInput | DiscussionUpvoteWhereInput[]
    userId?: StringFilter<"DiscussionUpvote"> | string
    messageId?: StringFilter<"DiscussionUpvote"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    message?: XOR<DiscussionMessageScalarRelationFilter, DiscussionMessageWhereInput>
  }, "id" | "userId_messageId">

  export type DiscussionUpvoteOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    messageId?: SortOrder
    _count?: DiscussionUpvoteCountOrderByAggregateInput
    _max?: DiscussionUpvoteMaxOrderByAggregateInput
    _min?: DiscussionUpvoteMinOrderByAggregateInput
  }

  export type DiscussionUpvoteScalarWhereWithAggregatesInput = {
    AND?: DiscussionUpvoteScalarWhereWithAggregatesInput | DiscussionUpvoteScalarWhereWithAggregatesInput[]
    OR?: DiscussionUpvoteScalarWhereWithAggregatesInput[]
    NOT?: DiscussionUpvoteScalarWhereWithAggregatesInput | DiscussionUpvoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DiscussionUpvote"> | string
    userId?: StringWithAggregatesFilter<"DiscussionUpvote"> | string
    messageId?: StringWithAggregatesFilter<"DiscussionUpvote"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    content?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    referenceId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    referenceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    content?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    referenceId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    referenceId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    content?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    referenceId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type ProblemInvitationWhereInput = {
    AND?: ProblemInvitationWhereInput | ProblemInvitationWhereInput[]
    OR?: ProblemInvitationWhereInput[]
    NOT?: ProblemInvitationWhereInput | ProblemInvitationWhereInput[]
    id?: StringFilter<"ProblemInvitation"> | string
    problemId?: StringFilter<"ProblemInvitation"> | string
    senderId?: StringFilter<"ProblemInvitation"> | string
    receiverId?: StringFilter<"ProblemInvitation"> | string
    status?: EnumInvitationStatusFilter<"ProblemInvitation"> | $Enums.InvitationStatus
    message?: StringNullableFilter<"ProblemInvitation"> | string | null
    createdAt?: DateTimeFilter<"ProblemInvitation"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemInvitation"> | Date | string
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProblemInvitationOrderByWithRelationInput = {
    id?: SortOrder
    problemId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    problem?: ProblemOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type ProblemInvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    problemId_senderId_receiverId?: ProblemInvitationProblemIdSenderIdReceiverIdCompoundUniqueInput
    AND?: ProblemInvitationWhereInput | ProblemInvitationWhereInput[]
    OR?: ProblemInvitationWhereInput[]
    NOT?: ProblemInvitationWhereInput | ProblemInvitationWhereInput[]
    problemId?: StringFilter<"ProblemInvitation"> | string
    senderId?: StringFilter<"ProblemInvitation"> | string
    receiverId?: StringFilter<"ProblemInvitation"> | string
    status?: EnumInvitationStatusFilter<"ProblemInvitation"> | $Enums.InvitationStatus
    message?: StringNullableFilter<"ProblemInvitation"> | string | null
    createdAt?: DateTimeFilter<"ProblemInvitation"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemInvitation"> | Date | string
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    receiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "problemId_senderId_receiverId">

  export type ProblemInvitationOrderByWithAggregationInput = {
    id?: SortOrder
    problemId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemInvitationCountOrderByAggregateInput
    _max?: ProblemInvitationMaxOrderByAggregateInput
    _min?: ProblemInvitationMinOrderByAggregateInput
  }

  export type ProblemInvitationScalarWhereWithAggregatesInput = {
    AND?: ProblemInvitationScalarWhereWithAggregatesInput | ProblemInvitationScalarWhereWithAggregatesInput[]
    OR?: ProblemInvitationScalarWhereWithAggregatesInput[]
    NOT?: ProblemInvitationScalarWhereWithAggregatesInput | ProblemInvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProblemInvitation"> | string
    problemId?: StringWithAggregatesFilter<"ProblemInvitation"> | string
    senderId?: StringWithAggregatesFilter<"ProblemInvitation"> | string
    receiverId?: StringWithAggregatesFilter<"ProblemInvitation"> | string
    status?: EnumInvitationStatusWithAggregatesFilter<"ProblemInvitation"> | $Enums.InvitationStatus
    message?: StringNullableWithAggregatesFilter<"ProblemInvitation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProblemInvitation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProblemInvitation"> | Date | string
  }

  export type ProblemCollaborationWhereInput = {
    AND?: ProblemCollaborationWhereInput | ProblemCollaborationWhereInput[]
    OR?: ProblemCollaborationWhereInput[]
    NOT?: ProblemCollaborationWhereInput | ProblemCollaborationWhereInput[]
    id?: StringFilter<"ProblemCollaboration"> | string
    problemId?: StringFilter<"ProblemCollaboration"> | string
    initiatorId?: StringFilter<"ProblemCollaboration"> | string
    maxParticipants?: IntFilter<"ProblemCollaboration"> | number
    currentCode?: StringFilter<"ProblemCollaboration"> | string
    language?: StringFilter<"ProblemCollaboration"> | string
    createdAt?: DateTimeFilter<"ProblemCollaboration"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemCollaboration"> | Date | string
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    initiator?: XOR<UserScalarRelationFilter, UserWhereInput>
    participants?: UserListRelationFilter
  }

  export type ProblemCollaborationOrderByWithRelationInput = {
    id?: SortOrder
    problemId?: SortOrder
    initiatorId?: SortOrder
    maxParticipants?: SortOrder
    currentCode?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    problem?: ProblemOrderByWithRelationInput
    initiator?: UserOrderByWithRelationInput
    participants?: UserOrderByRelationAggregateInput
  }

  export type ProblemCollaborationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProblemCollaborationWhereInput | ProblemCollaborationWhereInput[]
    OR?: ProblemCollaborationWhereInput[]
    NOT?: ProblemCollaborationWhereInput | ProblemCollaborationWhereInput[]
    problemId?: StringFilter<"ProblemCollaboration"> | string
    initiatorId?: StringFilter<"ProblemCollaboration"> | string
    maxParticipants?: IntFilter<"ProblemCollaboration"> | number
    currentCode?: StringFilter<"ProblemCollaboration"> | string
    language?: StringFilter<"ProblemCollaboration"> | string
    createdAt?: DateTimeFilter<"ProblemCollaboration"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemCollaboration"> | Date | string
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    initiator?: XOR<UserScalarRelationFilter, UserWhereInput>
    participants?: UserListRelationFilter
  }, "id">

  export type ProblemCollaborationOrderByWithAggregationInput = {
    id?: SortOrder
    problemId?: SortOrder
    initiatorId?: SortOrder
    maxParticipants?: SortOrder
    currentCode?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProblemCollaborationCountOrderByAggregateInput
    _avg?: ProblemCollaborationAvgOrderByAggregateInput
    _max?: ProblemCollaborationMaxOrderByAggregateInput
    _min?: ProblemCollaborationMinOrderByAggregateInput
    _sum?: ProblemCollaborationSumOrderByAggregateInput
  }

  export type ProblemCollaborationScalarWhereWithAggregatesInput = {
    AND?: ProblemCollaborationScalarWhereWithAggregatesInput | ProblemCollaborationScalarWhereWithAggregatesInput[]
    OR?: ProblemCollaborationScalarWhereWithAggregatesInput[]
    NOT?: ProblemCollaborationScalarWhereWithAggregatesInput | ProblemCollaborationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProblemCollaboration"> | string
    problemId?: StringWithAggregatesFilter<"ProblemCollaboration"> | string
    initiatorId?: StringWithAggregatesFilter<"ProblemCollaboration"> | string
    maxParticipants?: IntWithAggregatesFilter<"ProblemCollaboration"> | number
    currentCode?: StringWithAggregatesFilter<"ProblemCollaboration"> | string
    language?: StringWithAggregatesFilter<"ProblemCollaboration"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProblemCollaboration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProblemCollaboration"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowCreateInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowingInput
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowUncheckedCreateInput = {
    id?: string
    followerId: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowCreateManyInput = {
    id?: string
    followerId: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemCreateInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationCreateNestedManyWithoutProblemInput
    user: UserCreateNestedOneWithoutProblemsInput
    submission?: SubmissionCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistCreateNestedManyWithoutProblemInput
    reports?: ProblemReportCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    userId: string
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationUncheckedCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutProblemInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
    reports?: ProblemReportUncheckedCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUpdateManyWithoutProblemNestedInput
    user?: UserUpdateOneRequiredWithoutProblemsNestedInput
    submission?: SubmissionUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUncheckedUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUncheckedUpdateManyWithoutProblemNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUncheckedUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemCreateManyInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    userId: string
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemReactionCreateInput = {
    id?: string
    problemId: string
    userId: string
    isLike: boolean
  }

  export type ProblemReactionUncheckedCreateInput = {
    id?: string
    problemId: string
    userId: string
    isLike: boolean
  }

  export type ProblemReactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProblemReactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProblemReactionCreateManyInput = {
    id?: string
    problemId: string
    userId: string
    isLike: boolean
  }

  export type ProblemReactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProblemReactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubmissionCreateInput = {
    id?: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionInput
    problem: ProblemCreateNestedOneWithoutSubmissionInput
    testCases?: TestCaseResultCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateInput = {
    id?: string
    userId: string
    problemId: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    testCases?: TestCaseResultUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionNestedInput
    problem?: ProblemUpdateOneRequiredWithoutSubmissionNestedInput
    testCases?: TestCaseResultUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCases?: TestCaseResultUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionCreateManyInput = {
    id?: string
    userId: string
    problemId: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultCreateInput = {
    id?: string
    testCase: number
    passed: boolean
    stdout?: string | null
    expected: string
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submission: SubmissionCreateNestedOneWithoutTestCasesInput
  }

  export type TestCaseResultUncheckedCreateInput = {
    id?: string
    submissionId: string
    testCase: number
    passed: boolean
    stdout?: string | null
    expected: string
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCase?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    expected?: StringFieldUpdateOperationsInput | string
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submission?: SubmissionUpdateOneRequiredWithoutTestCasesNestedInput
  }

  export type TestCaseResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    testCase?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    expected?: StringFieldUpdateOperationsInput | string
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultCreateManyInput = {
    id?: string
    submissionId: string
    testCase: number
    passed: boolean
    stdout?: string | null
    expected: string
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCase?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    expected?: StringFieldUpdateOperationsInput | string
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    testCase?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    expected?: StringFieldUpdateOperationsInput | string
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemSolvedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProblemSolvedInput
    problem: ProblemCreateNestedOneWithoutSolvedByInput
  }

  export type ProblemSolvedUncheckedCreateInput = {
    id?: string
    userId: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemSolvedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProblemSolvedNestedInput
    problem?: ProblemUpdateOneRequiredWithoutSolvedByNestedInput
  }

  export type ProblemSolvedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemSolvedCreateManyInput = {
    id?: string
    userId: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemSolvedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemSolvedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistCreateInput = {
    id?: string
    name: string
    description?: string | null
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemInPlaylistCreateNestedManyWithoutPlaylistInput
    purchases?: PlaylistPurchaseCreateNestedManyWithoutPlaylistInput
    user: UserCreateNestedOneWithoutPlaylistsInput
  }

  export type PlaylistUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemInPlaylistUncheckedCreateNestedManyWithoutPlaylistInput
    purchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemInPlaylistUpdateManyWithoutPlaylistNestedInput
    purchases?: PlaylistPurchaseUpdateManyWithoutPlaylistNestedInput
    user?: UserUpdateOneRequiredWithoutPlaylistsNestedInput
  }

  export type PlaylistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput
    purchases?: PlaylistPurchaseUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistPurchaseCreateInput = {
    id?: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    purchaseDate?: Date | string
    user: UserCreateNestedOneWithoutPlaylistPurchasesInput
    playlist: PlaylistCreateNestedOneWithoutPurchasesInput
  }

  export type PlaylistPurchaseUncheckedCreateInput = {
    id?: string
    userId: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    playlistId: string
    purchaseDate?: Date | string
  }

  export type PlaylistPurchaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlaylistPurchasesNestedInput
    playlist?: PlaylistUpdateOneRequiredWithoutPurchasesNestedInput
  }

  export type PlaylistPurchaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistPurchaseCreateManyInput = {
    id?: string
    userId: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    playlistId: string
    purchaseDate?: Date | string
  }

  export type PlaylistPurchaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistPurchaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInPlaylistCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    playlist: PlaylistCreateNestedOneWithoutProblemsInput
    problem: ProblemCreateNestedOneWithoutProblemsPlaylistsInput
  }

  export type ProblemInPlaylistUncheckedCreateInput = {
    id?: string
    playlistId: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInPlaylistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlist?: PlaylistUpdateOneRequiredWithoutProblemsNestedInput
    problem?: ProblemUpdateOneRequiredWithoutProblemsPlaylistsNestedInput
  }

  export type ProblemInPlaylistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInPlaylistCreateManyInput = {
    id?: string
    playlistId: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInPlaylistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInPlaylistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeCreateInput = {
    id?: string
    name: string
    icon: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeUncheckedCreateInput = {
    id?: string
    name: string
    icon: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeCreateManyInput = {
    id?: string
    name: string
    icon: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BadgeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemReportCreateInput = {
    id?: string
    reason: $Enums.ReportReason
    description?: string | null
    status?: string
    createdAt?: Date | string
    problem: ProblemCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutSubmittedReportsInput
  }

  export type ProblemReportUncheckedCreateInput = {
    id?: string
    problemId: string
    userId: string
    reason: $Enums.ReportReason
    description?: string | null
    status?: string
    createdAt?: Date | string
  }

  export type ProblemReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutSubmittedReportsNestedInput
  }

  export type ProblemReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemReportCreateManyInput = {
    id?: string
    problemId: string
    userId: string
    reason: $Enums.ReportReason
    description?: string | null
    status?: string
    createdAt?: Date | string
  }

  export type ProblemReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemDiscussionCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutDiscussionsInput
    messages?: DiscussionMessageCreateNestedManyWithoutDiscussionInput
  }

  export type ProblemDiscussionUncheckedCreateInput = {
    id?: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: DiscussionMessageUncheckedCreateNestedManyWithoutDiscussionInput
  }

  export type ProblemDiscussionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutDiscussionsNestedInput
    messages?: DiscussionMessageUpdateManyWithoutDiscussionNestedInput
  }

  export type ProblemDiscussionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: DiscussionMessageUncheckedUpdateManyWithoutDiscussionNestedInput
  }

  export type ProblemDiscussionCreateManyInput = {
    id?: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemDiscussionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemDiscussionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionMessageCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    discussion: ProblemDiscussionCreateNestedOneWithoutMessagesInput
    user: UserCreateNestedOneWithoutDiscussionMessagesInput
    replies?: DiscussionReplyCreateNestedManyWithoutMessageInput
    upvotes?: DiscussionUpvoteCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageUncheckedCreateInput = {
    id?: string
    discussionId: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: DiscussionReplyUncheckedCreateNestedManyWithoutMessageInput
    upvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussion?: ProblemDiscussionUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutDiscussionMessagesNestedInput
    replies?: DiscussionReplyUpdateManyWithoutMessageNestedInput
    upvotes?: DiscussionUpvoteUpdateManyWithoutMessageNestedInput
  }

  export type DiscussionMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    discussionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: DiscussionReplyUncheckedUpdateManyWithoutMessageNestedInput
    upvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type DiscussionMessageCreateManyInput = {
    id?: string
    discussionId: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    discussionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionReplyCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    message: DiscussionMessageCreateNestedOneWithoutRepliesInput
    user: UserCreateNestedOneWithoutDiscussionRepliesInput
  }

  export type DiscussionReplyUncheckedCreateInput = {
    id?: string
    messageId: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionReplyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: DiscussionMessageUpdateOneRequiredWithoutRepliesNestedInput
    user?: UserUpdateOneRequiredWithoutDiscussionRepliesNestedInput
  }

  export type DiscussionReplyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionReplyCreateManyInput = {
    id?: string
    messageId: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionReplyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionReplyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionUpvoteCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutDiscussionUpvotesInput
    message: DiscussionMessageCreateNestedOneWithoutUpvotesInput
  }

  export type DiscussionUpvoteUncheckedCreateInput = {
    id?: string
    userId: string
    messageId: string
  }

  export type DiscussionUpvoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDiscussionUpvotesNestedInput
    message?: DiscussionMessageUpdateOneRequiredWithoutUpvotesNestedInput
  }

  export type DiscussionUpvoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
  }

  export type DiscussionUpvoteCreateManyInput = {
    id?: string
    userId: string
    messageId: string
  }

  export type DiscussionUpvoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type DiscussionUpvoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: $Enums.NotificationType
    content: string
    isRead?: boolean
    referenceId?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    content: string
    isRead?: boolean
    referenceId?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    content: string
    isRead?: boolean
    referenceId?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInvitationCreateInput = {
    id?: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutInvitationsInput
    sender: UserCreateNestedOneWithoutSentInvitationsInput
    receiver: UserCreateNestedOneWithoutReceivedInvitationsInput
  }

  export type ProblemInvitationUncheckedCreateInput = {
    id?: string
    problemId: string
    senderId: string
    receiverId: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutInvitationsNestedInput
    sender?: UserUpdateOneRequiredWithoutSentInvitationsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitationsNestedInput
  }

  export type ProblemInvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInvitationCreateManyInput = {
    id?: string
    problemId: string
    senderId: string
    receiverId: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemCollaborationCreateInput = {
    id?: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutCollaborationsInput
    initiator: UserCreateNestedOneWithoutInitiatedCollaborationsInput
    participants?: UserCreateNestedManyWithoutParticipatingCollaborationsInput
  }

  export type ProblemCollaborationUncheckedCreateInput = {
    id?: string
    problemId: string
    initiatorId: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserUncheckedCreateNestedManyWithoutParticipatingCollaborationsInput
  }

  export type ProblemCollaborationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutCollaborationsNestedInput
    initiator?: UserUpdateOneRequiredWithoutInitiatedCollaborationsNestedInput
    participants?: UserUpdateManyWithoutParticipatingCollaborationsNestedInput
  }

  export type ProblemCollaborationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUncheckedUpdateManyWithoutParticipatingCollaborationsNestedInput
  }

  export type ProblemCollaborationCreateManyInput = {
    id?: string
    problemId: string
    initiatorId: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemCollaborationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemCollaborationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FollowListRelationFilter = {
    every?: FollowWhereInput
    some?: FollowWhereInput
    none?: FollowWhereInput
  }

  export type ProblemListRelationFilter = {
    every?: ProblemWhereInput
    some?: ProblemWhereInput
    none?: ProblemWhereInput
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type ProblemSolvedListRelationFilter = {
    every?: ProblemSolvedWhereInput
    some?: ProblemSolvedWhereInput
    none?: ProblemSolvedWhereInput
  }

  export type PlaylistListRelationFilter = {
    every?: PlaylistWhereInput
    some?: PlaylistWhereInput
    none?: PlaylistWhereInput
  }

  export type ProblemReportListRelationFilter = {
    every?: ProblemReportWhereInput
    some?: ProblemReportWhereInput
    none?: ProblemReportWhereInput
  }

  export type DiscussionMessageListRelationFilter = {
    every?: DiscussionMessageWhereInput
    some?: DiscussionMessageWhereInput
    none?: DiscussionMessageWhereInput
  }

  export type DiscussionReplyListRelationFilter = {
    every?: DiscussionReplyWhereInput
    some?: DiscussionReplyWhereInput
    none?: DiscussionReplyWhereInput
  }

  export type DiscussionUpvoteListRelationFilter = {
    every?: DiscussionUpvoteWhereInput
    some?: DiscussionUpvoteWhereInput
    none?: DiscussionUpvoteWhereInput
  }

  export type PlaylistPurchaseListRelationFilter = {
    every?: PlaylistPurchaseWhereInput
    some?: PlaylistPurchaseWhereInput
    none?: PlaylistPurchaseWhereInput
  }

  export type ProblemInvitationListRelationFilter = {
    every?: ProblemInvitationWhereInput
    some?: ProblemInvitationWhereInput
    none?: ProblemInvitationWhereInput
  }

  export type ProblemCollaborationListRelationFilter = {
    every?: ProblemCollaborationWhereInput
    some?: ProblemCollaborationWhereInput
    none?: ProblemCollaborationWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FollowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemSolvedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaylistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiscussionMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiscussionReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiscussionUpvoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaylistPurchaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemInvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemCollaborationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    linkedin?: SortOrder
    portfolio?: SortOrder
    email?: SortOrder
    image?: SortOrder
    role?: SortOrder
    password?: SortOrder
    forgotPasswordOtp?: SortOrder
    forgotPasswordOtpExpiry?: SortOrder
    provider?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastSolvedDate?: SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    badges?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    linkedin?: SortOrder
    portfolio?: SortOrder
    email?: SortOrder
    image?: SortOrder
    role?: SortOrder
    password?: SortOrder
    forgotPasswordOtp?: SortOrder
    forgotPasswordOtpExpiry?: SortOrder
    provider?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastSolvedDate?: SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    bio?: SortOrder
    linkedin?: SortOrder
    portfolio?: SortOrder
    email?: SortOrder
    image?: SortOrder
    role?: SortOrder
    password?: SortOrder
    forgotPasswordOtp?: SortOrder
    forgotPasswordOtpExpiry?: SortOrder
    provider?: SortOrder
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    lastSolvedDate?: SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    currentStreak?: SortOrder
    longestStreak?: SortOrder
    followerCount?: SortOrder
    followingCount?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FollowFollowerIdFollowingIdCompoundUniqueInput = {
    followerId: string
    followingId: string
  }

  export type FollowCountOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
  }

  export type FollowMaxOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
  }

  export type FollowMinOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ProblemInPlaylistListRelationFilter = {
    every?: ProblemInPlaylistWhereInput
    some?: ProblemInPlaylistWhereInput
    none?: ProblemInPlaylistWhereInput
  }

  export type ProblemDiscussionListRelationFilter = {
    every?: ProblemDiscussionWhereInput
    some?: ProblemDiscussionWhereInput
    none?: ProblemDiscussionWhereInput
  }

  export type ProblemInPlaylistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemDiscussionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    tags?: SortOrder
    userId?: SortOrder
    examples?: SortOrder
    constraints?: SortOrder
    hints?: SortOrder
    editorial?: SortOrder
    testcases?: SortOrder
    codeSnippets?: SortOrder
    referenceSolutions?: SortOrder
    isPaid?: SortOrder
    askedIn?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemAvgOrderByAggregateInput = {
    likes?: SortOrder
    dislikes?: SortOrder
  }

  export type ProblemMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    userId?: SortOrder
    constraints?: SortOrder
    hints?: SortOrder
    editorial?: SortOrder
    isPaid?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    difficulty?: SortOrder
    userId?: SortOrder
    constraints?: SortOrder
    hints?: SortOrder
    editorial?: SortOrder
    isPaid?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemSumOrderByAggregateInput = {
    likes?: SortOrder
    dislikes?: SortOrder
  }

  export type EnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ProblemReactionProblemIdUserIdCompoundUniqueInput = {
    problemId: string
    userId: string
  }

  export type ProblemReactionCountOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    isLike?: SortOrder
  }

  export type ProblemReactionMaxOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    isLike?: SortOrder
  }

  export type ProblemReactionMinOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    isLike?: SortOrder
  }

  export type ProblemScalarRelationFilter = {
    is?: ProblemWhereInput
    isNot?: ProblemWhereInput
  }

  export type TestCaseResultListRelationFilter = {
    every?: TestCaseResultWhereInput
    some?: TestCaseResultWhereInput
    none?: TestCaseResultWhereInput
  }

  export type TestCaseResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    sourceCode?: SortOrder
    language?: SortOrder
    stdin?: SortOrder
    stdout?: SortOrder
    stderr?: SortOrder
    compileOutput?: SortOrder
    status?: SortOrder
    memory?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    sourceCode?: SortOrder
    language?: SortOrder
    stdin?: SortOrder
    stdout?: SortOrder
    stderr?: SortOrder
    compileOutput?: SortOrder
    status?: SortOrder
    memory?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    sourceCode?: SortOrder
    language?: SortOrder
    stdin?: SortOrder
    stdout?: SortOrder
    stderr?: SortOrder
    compileOutput?: SortOrder
    status?: SortOrder
    memory?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubmissionScalarRelationFilter = {
    is?: SubmissionWhereInput
    isNot?: SubmissionWhereInput
  }

  export type TestCaseResultCountOrderByAggregateInput = {
    id?: SortOrder
    submissionId?: SortOrder
    testCase?: SortOrder
    passed?: SortOrder
    stdout?: SortOrder
    expected?: SortOrder
    stderr?: SortOrder
    compileOutput?: SortOrder
    status?: SortOrder
    memory?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseResultAvgOrderByAggregateInput = {
    testCase?: SortOrder
  }

  export type TestCaseResultMaxOrderByAggregateInput = {
    id?: SortOrder
    submissionId?: SortOrder
    testCase?: SortOrder
    passed?: SortOrder
    stdout?: SortOrder
    expected?: SortOrder
    stderr?: SortOrder
    compileOutput?: SortOrder
    status?: SortOrder
    memory?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseResultMinOrderByAggregateInput = {
    id?: SortOrder
    submissionId?: SortOrder
    testCase?: SortOrder
    passed?: SortOrder
    stdout?: SortOrder
    expected?: SortOrder
    stderr?: SortOrder
    compileOutput?: SortOrder
    status?: SortOrder
    memory?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TestCaseResultSumOrderByAggregateInput = {
    testCase?: SortOrder
  }

  export type ProblemSolvedUserIdProblemIdCompoundUniqueInput = {
    userId: string
    problemId: string
  }

  export type ProblemSolvedCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemSolvedMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemSolvedMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PlaylistNameUserIdCompoundUniqueInput = {
    name: string
    userId: string
  }

  export type PlaylistCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    isPaid?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type PlaylistMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    isPaid?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    isPaid?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type PlaylistScalarRelationFilter = {
    is?: PlaylistWhereInput
    isNot?: PlaylistWhereInput
  }

  export type PlaylistPurchaseUserIdPlaylistIdCompoundUniqueInput = {
    userId: string
    playlistId: string
  }

  export type PlaylistPurchaseCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrder
    paymentOrderId?: SortOrder
    paymentSignature?: SortOrder
    playlistId?: SortOrder
    purchaseDate?: SortOrder
  }

  export type PlaylistPurchaseMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrder
    paymentOrderId?: SortOrder
    paymentSignature?: SortOrder
    playlistId?: SortOrder
    purchaseDate?: SortOrder
  }

  export type PlaylistPurchaseMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrder
    paymentOrderId?: SortOrder
    paymentSignature?: SortOrder
    playlistId?: SortOrder
    purchaseDate?: SortOrder
  }

  export type ProblemInPlaylistPlaylistIdProblemIdCompoundUniqueInput = {
    playlistId: string
    problemId: string
  }

  export type ProblemInPlaylistCountOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemInPlaylistMaxOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemInPlaylistMinOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BadgeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BadgeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumReportReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportReason | EnumReportReasonFieldRefInput<$PrismaModel>
    in?: $Enums.ReportReason[] | ListEnumReportReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportReason[] | ListEnumReportReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumReportReasonFilter<$PrismaModel> | $Enums.ReportReason
  }

  export type ProblemReportCountOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ProblemReportMaxOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type ProblemReportMinOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    userId?: SortOrder
    reason?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumReportReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportReason | EnumReportReasonFieldRefInput<$PrismaModel>
    in?: $Enums.ReportReason[] | ListEnumReportReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportReason[] | ListEnumReportReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumReportReasonWithAggregatesFilter<$PrismaModel> | $Enums.ReportReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportReasonFilter<$PrismaModel>
    _max?: NestedEnumReportReasonFilter<$PrismaModel>
  }

  export type ProblemDiscussionCountOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemDiscussionMaxOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemDiscussionMinOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemDiscussionScalarRelationFilter = {
    is?: ProblemDiscussionWhereInput
    isNot?: ProblemDiscussionWhereInput
  }

  export type DiscussionMessageCountOrderByAggregateInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscussionMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscussionMessageMinOrderByAggregateInput = {
    id?: SortOrder
    discussionId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscussionMessageScalarRelationFilter = {
    is?: DiscussionMessageWhereInput
    isNot?: DiscussionMessageWhereInput
  }

  export type DiscussionReplyCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscussionReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscussionReplyMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiscussionUpvoteUserIdMessageIdCompoundUniqueInput = {
    userId: string
    messageId: string
  }

  export type DiscussionUpvoteCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    messageId?: SortOrder
  }

  export type DiscussionUpvoteMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    messageId?: SortOrder
  }

  export type DiscussionUpvoteMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    messageId?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    isRead?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumInvitationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusFilter<$PrismaModel> | $Enums.InvitationStatus
  }

  export type ProblemInvitationProblemIdSenderIdReceiverIdCompoundUniqueInput = {
    problemId: string
    senderId: string
    receiverId: string
  }

  export type ProblemInvitationCountOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemInvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemInvitationMinOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumInvitationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvitationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvitationStatusFilter<$PrismaModel>
    _max?: NestedEnumInvitationStatusFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemCollaborationCountOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    initiatorId?: SortOrder
    maxParticipants?: SortOrder
    currentCode?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemCollaborationAvgOrderByAggregateInput = {
    maxParticipants?: SortOrder
  }

  export type ProblemCollaborationMaxOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    initiatorId?: SortOrder
    maxParticipants?: SortOrder
    currentCode?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemCollaborationMinOrderByAggregateInput = {
    id?: SortOrder
    problemId?: SortOrder
    initiatorId?: SortOrder
    maxParticipants?: SortOrder
    currentCode?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProblemCollaborationSumOrderByAggregateInput = {
    maxParticipants?: SortOrder
  }

  export type FollowCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type ProblemCreateNestedManyWithoutUserInput = {
    create?: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput> | ProblemCreateWithoutUserInput[] | ProblemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutUserInput | ProblemCreateOrConnectWithoutUserInput[]
    createMany?: ProblemCreateManyUserInputEnvelope
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type ProblemSolvedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProblemSolvedCreateWithoutUserInput, ProblemSolvedUncheckedCreateWithoutUserInput> | ProblemSolvedCreateWithoutUserInput[] | ProblemSolvedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemSolvedCreateOrConnectWithoutUserInput | ProblemSolvedCreateOrConnectWithoutUserInput[]
    createMany?: ProblemSolvedCreateManyUserInputEnvelope
    connect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
  }

  export type PlaylistCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type ProblemReportCreateNestedManyWithoutUserInput = {
    create?: XOR<ProblemReportCreateWithoutUserInput, ProblemReportUncheckedCreateWithoutUserInput> | ProblemReportCreateWithoutUserInput[] | ProblemReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemReportCreateOrConnectWithoutUserInput | ProblemReportCreateOrConnectWithoutUserInput[]
    createMany?: ProblemReportCreateManyUserInputEnvelope
    connect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
  }

  export type DiscussionMessageCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionMessageCreateWithoutUserInput, DiscussionMessageUncheckedCreateWithoutUserInput> | DiscussionMessageCreateWithoutUserInput[] | DiscussionMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutUserInput | DiscussionMessageCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionMessageCreateManyUserInputEnvelope
    connect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
  }

  export type DiscussionReplyCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionReplyCreateWithoutUserInput, DiscussionReplyUncheckedCreateWithoutUserInput> | DiscussionReplyCreateWithoutUserInput[] | DiscussionReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionReplyCreateOrConnectWithoutUserInput | DiscussionReplyCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionReplyCreateManyUserInputEnvelope
    connect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
  }

  export type DiscussionUpvoteCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionUpvoteCreateWithoutUserInput, DiscussionUpvoteUncheckedCreateWithoutUserInput> | DiscussionUpvoteCreateWithoutUserInput[] | DiscussionUpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionUpvoteCreateOrConnectWithoutUserInput | DiscussionUpvoteCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionUpvoteCreateManyUserInputEnvelope
    connect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
  }

  export type PlaylistPurchaseCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistPurchaseCreateWithoutUserInput, PlaylistPurchaseUncheckedCreateWithoutUserInput> | PlaylistPurchaseCreateWithoutUserInput[] | PlaylistPurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistPurchaseCreateOrConnectWithoutUserInput | PlaylistPurchaseCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistPurchaseCreateManyUserInputEnvelope
    connect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
  }

  export type ProblemInvitationCreateNestedManyWithoutSenderInput = {
    create?: XOR<ProblemInvitationCreateWithoutSenderInput, ProblemInvitationUncheckedCreateWithoutSenderInput> | ProblemInvitationCreateWithoutSenderInput[] | ProblemInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutSenderInput | ProblemInvitationCreateOrConnectWithoutSenderInput[]
    createMany?: ProblemInvitationCreateManySenderInputEnvelope
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
  }

  export type ProblemInvitationCreateNestedManyWithoutReceiverInput = {
    create?: XOR<ProblemInvitationCreateWithoutReceiverInput, ProblemInvitationUncheckedCreateWithoutReceiverInput> | ProblemInvitationCreateWithoutReceiverInput[] | ProblemInvitationUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutReceiverInput | ProblemInvitationCreateOrConnectWithoutReceiverInput[]
    createMany?: ProblemInvitationCreateManyReceiverInputEnvelope
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
  }

  export type ProblemCollaborationCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<ProblemCollaborationCreateWithoutParticipantsInput, ProblemCollaborationUncheckedCreateWithoutParticipantsInput> | ProblemCollaborationCreateWithoutParticipantsInput[] | ProblemCollaborationUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutParticipantsInput | ProblemCollaborationCreateOrConnectWithoutParticipantsInput[]
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ProblemCollaborationCreateNestedManyWithoutInitiatorInput = {
    create?: XOR<ProblemCollaborationCreateWithoutInitiatorInput, ProblemCollaborationUncheckedCreateWithoutInitiatorInput> | ProblemCollaborationCreateWithoutInitiatorInput[] | ProblemCollaborationUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutInitiatorInput | ProblemCollaborationCreateOrConnectWithoutInitiatorInput[]
    createMany?: ProblemCollaborationCreateManyInitiatorInputEnvelope
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type FollowUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
  }

  export type ProblemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput> | ProblemCreateWithoutUserInput[] | ProblemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutUserInput | ProblemCreateOrConnectWithoutUserInput[]
    createMany?: ProblemCreateManyUserInputEnvelope
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type ProblemSolvedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProblemSolvedCreateWithoutUserInput, ProblemSolvedUncheckedCreateWithoutUserInput> | ProblemSolvedCreateWithoutUserInput[] | ProblemSolvedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemSolvedCreateOrConnectWithoutUserInput | ProblemSolvedCreateOrConnectWithoutUserInput[]
    createMany?: ProblemSolvedCreateManyUserInputEnvelope
    connect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
  }

  export type PlaylistUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type ProblemReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProblemReportCreateWithoutUserInput, ProblemReportUncheckedCreateWithoutUserInput> | ProblemReportCreateWithoutUserInput[] | ProblemReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemReportCreateOrConnectWithoutUserInput | ProblemReportCreateOrConnectWithoutUserInput[]
    createMany?: ProblemReportCreateManyUserInputEnvelope
    connect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
  }

  export type DiscussionMessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionMessageCreateWithoutUserInput, DiscussionMessageUncheckedCreateWithoutUserInput> | DiscussionMessageCreateWithoutUserInput[] | DiscussionMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutUserInput | DiscussionMessageCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionMessageCreateManyUserInputEnvelope
    connect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
  }

  export type DiscussionReplyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionReplyCreateWithoutUserInput, DiscussionReplyUncheckedCreateWithoutUserInput> | DiscussionReplyCreateWithoutUserInput[] | DiscussionReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionReplyCreateOrConnectWithoutUserInput | DiscussionReplyCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionReplyCreateManyUserInputEnvelope
    connect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
  }

  export type DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionUpvoteCreateWithoutUserInput, DiscussionUpvoteUncheckedCreateWithoutUserInput> | DiscussionUpvoteCreateWithoutUserInput[] | DiscussionUpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionUpvoteCreateOrConnectWithoutUserInput | DiscussionUpvoteCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionUpvoteCreateManyUserInputEnvelope
    connect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
  }

  export type PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistPurchaseCreateWithoutUserInput, PlaylistPurchaseUncheckedCreateWithoutUserInput> | PlaylistPurchaseCreateWithoutUserInput[] | PlaylistPurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistPurchaseCreateOrConnectWithoutUserInput | PlaylistPurchaseCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistPurchaseCreateManyUserInputEnvelope
    connect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
  }

  export type ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<ProblemInvitationCreateWithoutSenderInput, ProblemInvitationUncheckedCreateWithoutSenderInput> | ProblemInvitationCreateWithoutSenderInput[] | ProblemInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutSenderInput | ProblemInvitationCreateOrConnectWithoutSenderInput[]
    createMany?: ProblemInvitationCreateManySenderInputEnvelope
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
  }

  export type ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<ProblemInvitationCreateWithoutReceiverInput, ProblemInvitationUncheckedCreateWithoutReceiverInput> | ProblemInvitationCreateWithoutReceiverInput[] | ProblemInvitationUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutReceiverInput | ProblemInvitationCreateOrConnectWithoutReceiverInput[]
    createMany?: ProblemInvitationCreateManyReceiverInputEnvelope
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
  }

  export type ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput = {
    create?: XOR<ProblemCollaborationCreateWithoutParticipantsInput, ProblemCollaborationUncheckedCreateWithoutParticipantsInput> | ProblemCollaborationCreateWithoutParticipantsInput[] | ProblemCollaborationUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutParticipantsInput | ProblemCollaborationCreateOrConnectWithoutParticipantsInput[]
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput = {
    create?: XOR<ProblemCollaborationCreateWithoutInitiatorInput, ProblemCollaborationUncheckedCreateWithoutInitiatorInput> | ProblemCollaborationCreateWithoutInitiatorInput[] | ProblemCollaborationUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutInitiatorInput | ProblemCollaborationCreateOrConnectWithoutInitiatorInput[]
    createMany?: ProblemCollaborationCreateManyInitiatorInputEnvelope
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FollowUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type ProblemUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput> | ProblemCreateWithoutUserInput[] | ProblemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutUserInput | ProblemCreateOrConnectWithoutUserInput[]
    upsert?: ProblemUpsertWithWhereUniqueWithoutUserInput | ProblemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProblemCreateManyUserInputEnvelope
    set?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    disconnect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    delete?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    update?: ProblemUpdateWithWhereUniqueWithoutUserInput | ProblemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProblemUpdateManyWithWhereWithoutUserInput | ProblemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutUserInput | SubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutUserInput | SubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutUserInput | SubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ProblemSolvedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProblemSolvedCreateWithoutUserInput, ProblemSolvedUncheckedCreateWithoutUserInput> | ProblemSolvedCreateWithoutUserInput[] | ProblemSolvedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemSolvedCreateOrConnectWithoutUserInput | ProblemSolvedCreateOrConnectWithoutUserInput[]
    upsert?: ProblemSolvedUpsertWithWhereUniqueWithoutUserInput | ProblemSolvedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProblemSolvedCreateManyUserInputEnvelope
    set?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    disconnect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    delete?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    connect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    update?: ProblemSolvedUpdateWithWhereUniqueWithoutUserInput | ProblemSolvedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProblemSolvedUpdateManyWithWhereWithoutUserInput | ProblemSolvedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProblemSolvedScalarWhereInput | ProblemSolvedScalarWhereInput[]
  }

  export type PlaylistUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutUserInput | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutUserInput | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutUserInput | PlaylistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type ProblemReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProblemReportCreateWithoutUserInput, ProblemReportUncheckedCreateWithoutUserInput> | ProblemReportCreateWithoutUserInput[] | ProblemReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemReportCreateOrConnectWithoutUserInput | ProblemReportCreateOrConnectWithoutUserInput[]
    upsert?: ProblemReportUpsertWithWhereUniqueWithoutUserInput | ProblemReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProblemReportCreateManyUserInputEnvelope
    set?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    disconnect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    delete?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    connect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    update?: ProblemReportUpdateWithWhereUniqueWithoutUserInput | ProblemReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProblemReportUpdateManyWithWhereWithoutUserInput | ProblemReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProblemReportScalarWhereInput | ProblemReportScalarWhereInput[]
  }

  export type DiscussionMessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionMessageCreateWithoutUserInput, DiscussionMessageUncheckedCreateWithoutUserInput> | DiscussionMessageCreateWithoutUserInput[] | DiscussionMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutUserInput | DiscussionMessageCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionMessageUpsertWithWhereUniqueWithoutUserInput | DiscussionMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionMessageCreateManyUserInputEnvelope
    set?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    disconnect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    delete?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    connect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    update?: DiscussionMessageUpdateWithWhereUniqueWithoutUserInput | DiscussionMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionMessageUpdateManyWithWhereWithoutUserInput | DiscussionMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionMessageScalarWhereInput | DiscussionMessageScalarWhereInput[]
  }

  export type DiscussionReplyUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionReplyCreateWithoutUserInput, DiscussionReplyUncheckedCreateWithoutUserInput> | DiscussionReplyCreateWithoutUserInput[] | DiscussionReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionReplyCreateOrConnectWithoutUserInput | DiscussionReplyCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionReplyUpsertWithWhereUniqueWithoutUserInput | DiscussionReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionReplyCreateManyUserInputEnvelope
    set?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    disconnect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    delete?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    connect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    update?: DiscussionReplyUpdateWithWhereUniqueWithoutUserInput | DiscussionReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionReplyUpdateManyWithWhereWithoutUserInput | DiscussionReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionReplyScalarWhereInput | DiscussionReplyScalarWhereInput[]
  }

  export type DiscussionUpvoteUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionUpvoteCreateWithoutUserInput, DiscussionUpvoteUncheckedCreateWithoutUserInput> | DiscussionUpvoteCreateWithoutUserInput[] | DiscussionUpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionUpvoteCreateOrConnectWithoutUserInput | DiscussionUpvoteCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionUpvoteUpsertWithWhereUniqueWithoutUserInput | DiscussionUpvoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionUpvoteCreateManyUserInputEnvelope
    set?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    disconnect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    delete?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    connect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    update?: DiscussionUpvoteUpdateWithWhereUniqueWithoutUserInput | DiscussionUpvoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionUpvoteUpdateManyWithWhereWithoutUserInput | DiscussionUpvoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionUpvoteScalarWhereInput | DiscussionUpvoteScalarWhereInput[]
  }

  export type PlaylistPurchaseUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistPurchaseCreateWithoutUserInput, PlaylistPurchaseUncheckedCreateWithoutUserInput> | PlaylistPurchaseCreateWithoutUserInput[] | PlaylistPurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistPurchaseCreateOrConnectWithoutUserInput | PlaylistPurchaseCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistPurchaseUpsertWithWhereUniqueWithoutUserInput | PlaylistPurchaseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistPurchaseCreateManyUserInputEnvelope
    set?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    disconnect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    delete?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    connect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    update?: PlaylistPurchaseUpdateWithWhereUniqueWithoutUserInput | PlaylistPurchaseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistPurchaseUpdateManyWithWhereWithoutUserInput | PlaylistPurchaseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistPurchaseScalarWhereInput | PlaylistPurchaseScalarWhereInput[]
  }

  export type ProblemInvitationUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ProblemInvitationCreateWithoutSenderInput, ProblemInvitationUncheckedCreateWithoutSenderInput> | ProblemInvitationCreateWithoutSenderInput[] | ProblemInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutSenderInput | ProblemInvitationCreateOrConnectWithoutSenderInput[]
    upsert?: ProblemInvitationUpsertWithWhereUniqueWithoutSenderInput | ProblemInvitationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ProblemInvitationCreateManySenderInputEnvelope
    set?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    disconnect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    delete?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    update?: ProblemInvitationUpdateWithWhereUniqueWithoutSenderInput | ProblemInvitationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ProblemInvitationUpdateManyWithWhereWithoutSenderInput | ProblemInvitationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ProblemInvitationScalarWhereInput | ProblemInvitationScalarWhereInput[]
  }

  export type ProblemInvitationUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<ProblemInvitationCreateWithoutReceiverInput, ProblemInvitationUncheckedCreateWithoutReceiverInput> | ProblemInvitationCreateWithoutReceiverInput[] | ProblemInvitationUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutReceiverInput | ProblemInvitationCreateOrConnectWithoutReceiverInput[]
    upsert?: ProblemInvitationUpsertWithWhereUniqueWithoutReceiverInput | ProblemInvitationUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: ProblemInvitationCreateManyReceiverInputEnvelope
    set?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    disconnect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    delete?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    update?: ProblemInvitationUpdateWithWhereUniqueWithoutReceiverInput | ProblemInvitationUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: ProblemInvitationUpdateManyWithWhereWithoutReceiverInput | ProblemInvitationUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: ProblemInvitationScalarWhereInput | ProblemInvitationScalarWhereInput[]
  }

  export type ProblemCollaborationUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<ProblemCollaborationCreateWithoutParticipantsInput, ProblemCollaborationUncheckedCreateWithoutParticipantsInput> | ProblemCollaborationCreateWithoutParticipantsInput[] | ProblemCollaborationUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutParticipantsInput | ProblemCollaborationCreateOrConnectWithoutParticipantsInput[]
    upsert?: ProblemCollaborationUpsertWithWhereUniqueWithoutParticipantsInput | ProblemCollaborationUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    disconnect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    delete?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    update?: ProblemCollaborationUpdateWithWhereUniqueWithoutParticipantsInput | ProblemCollaborationUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: ProblemCollaborationUpdateManyWithWhereWithoutParticipantsInput | ProblemCollaborationUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: ProblemCollaborationScalarWhereInput | ProblemCollaborationScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ProblemCollaborationUpdateManyWithoutInitiatorNestedInput = {
    create?: XOR<ProblemCollaborationCreateWithoutInitiatorInput, ProblemCollaborationUncheckedCreateWithoutInitiatorInput> | ProblemCollaborationCreateWithoutInitiatorInput[] | ProblemCollaborationUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutInitiatorInput | ProblemCollaborationCreateOrConnectWithoutInitiatorInput[]
    upsert?: ProblemCollaborationUpsertWithWhereUniqueWithoutInitiatorInput | ProblemCollaborationUpsertWithWhereUniqueWithoutInitiatorInput[]
    createMany?: ProblemCollaborationCreateManyInitiatorInputEnvelope
    set?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    disconnect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    delete?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    update?: ProblemCollaborationUpdateWithWhereUniqueWithoutInitiatorInput | ProblemCollaborationUpdateWithWhereUniqueWithoutInitiatorInput[]
    updateMany?: ProblemCollaborationUpdateManyWithWhereWithoutInitiatorInput | ProblemCollaborationUpdateManyWithWhereWithoutInitiatorInput[]
    deleteMany?: ProblemCollaborationScalarWhereInput | ProblemCollaborationScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput> | FollowCreateWithoutFollowingInput[] | FollowUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowingInput | FollowCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowingInput | FollowUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowCreateManyFollowingInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowingInput | FollowUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowingInput | FollowUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type FollowUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput> | FollowCreateWithoutFollowerInput[] | FollowUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowCreateOrConnectWithoutFollowerInput | FollowCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowUpsertWithWhereUniqueWithoutFollowerInput | FollowUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowCreateManyFollowerInputEnvelope
    set?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    disconnect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    delete?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    connect?: FollowWhereUniqueInput | FollowWhereUniqueInput[]
    update?: FollowUpdateWithWhereUniqueWithoutFollowerInput | FollowUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowUpdateManyWithWhereWithoutFollowerInput | FollowUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowScalarWhereInput | FollowScalarWhereInput[]
  }

  export type ProblemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput> | ProblemCreateWithoutUserInput[] | ProblemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutUserInput | ProblemCreateOrConnectWithoutUserInput[]
    upsert?: ProblemUpsertWithWhereUniqueWithoutUserInput | ProblemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProblemCreateManyUserInputEnvelope
    set?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    disconnect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    delete?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    update?: ProblemUpdateWithWhereUniqueWithoutUserInput | ProblemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProblemUpdateManyWithWhereWithoutUserInput | ProblemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutUserInput | SubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutUserInput | SubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutUserInput | SubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProblemSolvedCreateWithoutUserInput, ProblemSolvedUncheckedCreateWithoutUserInput> | ProblemSolvedCreateWithoutUserInput[] | ProblemSolvedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemSolvedCreateOrConnectWithoutUserInput | ProblemSolvedCreateOrConnectWithoutUserInput[]
    upsert?: ProblemSolvedUpsertWithWhereUniqueWithoutUserInput | ProblemSolvedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProblemSolvedCreateManyUserInputEnvelope
    set?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    disconnect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    delete?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    connect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    update?: ProblemSolvedUpdateWithWhereUniqueWithoutUserInput | ProblemSolvedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProblemSolvedUpdateManyWithWhereWithoutUserInput | ProblemSolvedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProblemSolvedScalarWhereInput | ProblemSolvedScalarWhereInput[]
  }

  export type PlaylistUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutUserInput | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutUserInput | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutUserInput | PlaylistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type ProblemReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProblemReportCreateWithoutUserInput, ProblemReportUncheckedCreateWithoutUserInput> | ProblemReportCreateWithoutUserInput[] | ProblemReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProblemReportCreateOrConnectWithoutUserInput | ProblemReportCreateOrConnectWithoutUserInput[]
    upsert?: ProblemReportUpsertWithWhereUniqueWithoutUserInput | ProblemReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProblemReportCreateManyUserInputEnvelope
    set?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    disconnect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    delete?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    connect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    update?: ProblemReportUpdateWithWhereUniqueWithoutUserInput | ProblemReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProblemReportUpdateManyWithWhereWithoutUserInput | ProblemReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProblemReportScalarWhereInput | ProblemReportScalarWhereInput[]
  }

  export type DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionMessageCreateWithoutUserInput, DiscussionMessageUncheckedCreateWithoutUserInput> | DiscussionMessageCreateWithoutUserInput[] | DiscussionMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutUserInput | DiscussionMessageCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionMessageUpsertWithWhereUniqueWithoutUserInput | DiscussionMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionMessageCreateManyUserInputEnvelope
    set?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    disconnect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    delete?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    connect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    update?: DiscussionMessageUpdateWithWhereUniqueWithoutUserInput | DiscussionMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionMessageUpdateManyWithWhereWithoutUserInput | DiscussionMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionMessageScalarWhereInput | DiscussionMessageScalarWhereInput[]
  }

  export type DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionReplyCreateWithoutUserInput, DiscussionReplyUncheckedCreateWithoutUserInput> | DiscussionReplyCreateWithoutUserInput[] | DiscussionReplyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionReplyCreateOrConnectWithoutUserInput | DiscussionReplyCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionReplyUpsertWithWhereUniqueWithoutUserInput | DiscussionReplyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionReplyCreateManyUserInputEnvelope
    set?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    disconnect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    delete?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    connect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    update?: DiscussionReplyUpdateWithWhereUniqueWithoutUserInput | DiscussionReplyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionReplyUpdateManyWithWhereWithoutUserInput | DiscussionReplyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionReplyScalarWhereInput | DiscussionReplyScalarWhereInput[]
  }

  export type DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionUpvoteCreateWithoutUserInput, DiscussionUpvoteUncheckedCreateWithoutUserInput> | DiscussionUpvoteCreateWithoutUserInput[] | DiscussionUpvoteUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionUpvoteCreateOrConnectWithoutUserInput | DiscussionUpvoteCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionUpvoteUpsertWithWhereUniqueWithoutUserInput | DiscussionUpvoteUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionUpvoteCreateManyUserInputEnvelope
    set?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    disconnect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    delete?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    connect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    update?: DiscussionUpvoteUpdateWithWhereUniqueWithoutUserInput | DiscussionUpvoteUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionUpvoteUpdateManyWithWhereWithoutUserInput | DiscussionUpvoteUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionUpvoteScalarWhereInput | DiscussionUpvoteScalarWhereInput[]
  }

  export type PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistPurchaseCreateWithoutUserInput, PlaylistPurchaseUncheckedCreateWithoutUserInput> | PlaylistPurchaseCreateWithoutUserInput[] | PlaylistPurchaseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistPurchaseCreateOrConnectWithoutUserInput | PlaylistPurchaseCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistPurchaseUpsertWithWhereUniqueWithoutUserInput | PlaylistPurchaseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistPurchaseCreateManyUserInputEnvelope
    set?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    disconnect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    delete?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    connect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    update?: PlaylistPurchaseUpdateWithWhereUniqueWithoutUserInput | PlaylistPurchaseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistPurchaseUpdateManyWithWhereWithoutUserInput | PlaylistPurchaseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistPurchaseScalarWhereInput | PlaylistPurchaseScalarWhereInput[]
  }

  export type ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ProblemInvitationCreateWithoutSenderInput, ProblemInvitationUncheckedCreateWithoutSenderInput> | ProblemInvitationCreateWithoutSenderInput[] | ProblemInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutSenderInput | ProblemInvitationCreateOrConnectWithoutSenderInput[]
    upsert?: ProblemInvitationUpsertWithWhereUniqueWithoutSenderInput | ProblemInvitationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ProblemInvitationCreateManySenderInputEnvelope
    set?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    disconnect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    delete?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    update?: ProblemInvitationUpdateWithWhereUniqueWithoutSenderInput | ProblemInvitationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ProblemInvitationUpdateManyWithWhereWithoutSenderInput | ProblemInvitationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ProblemInvitationScalarWhereInput | ProblemInvitationScalarWhereInput[]
  }

  export type ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<ProblemInvitationCreateWithoutReceiverInput, ProblemInvitationUncheckedCreateWithoutReceiverInput> | ProblemInvitationCreateWithoutReceiverInput[] | ProblemInvitationUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutReceiverInput | ProblemInvitationCreateOrConnectWithoutReceiverInput[]
    upsert?: ProblemInvitationUpsertWithWhereUniqueWithoutReceiverInput | ProblemInvitationUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: ProblemInvitationCreateManyReceiverInputEnvelope
    set?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    disconnect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    delete?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    update?: ProblemInvitationUpdateWithWhereUniqueWithoutReceiverInput | ProblemInvitationUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: ProblemInvitationUpdateManyWithWhereWithoutReceiverInput | ProblemInvitationUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: ProblemInvitationScalarWhereInput | ProblemInvitationScalarWhereInput[]
  }

  export type ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput = {
    create?: XOR<ProblemCollaborationCreateWithoutParticipantsInput, ProblemCollaborationUncheckedCreateWithoutParticipantsInput> | ProblemCollaborationCreateWithoutParticipantsInput[] | ProblemCollaborationUncheckedCreateWithoutParticipantsInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutParticipantsInput | ProblemCollaborationCreateOrConnectWithoutParticipantsInput[]
    upsert?: ProblemCollaborationUpsertWithWhereUniqueWithoutParticipantsInput | ProblemCollaborationUpsertWithWhereUniqueWithoutParticipantsInput[]
    set?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    disconnect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    delete?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    update?: ProblemCollaborationUpdateWithWhereUniqueWithoutParticipantsInput | ProblemCollaborationUpdateWithWhereUniqueWithoutParticipantsInput[]
    updateMany?: ProblemCollaborationUpdateManyWithWhereWithoutParticipantsInput | ProblemCollaborationUpdateManyWithWhereWithoutParticipantsInput[]
    deleteMany?: ProblemCollaborationScalarWhereInput | ProblemCollaborationScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput = {
    create?: XOR<ProblemCollaborationCreateWithoutInitiatorInput, ProblemCollaborationUncheckedCreateWithoutInitiatorInput> | ProblemCollaborationCreateWithoutInitiatorInput[] | ProblemCollaborationUncheckedCreateWithoutInitiatorInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutInitiatorInput | ProblemCollaborationCreateOrConnectWithoutInitiatorInput[]
    upsert?: ProblemCollaborationUpsertWithWhereUniqueWithoutInitiatorInput | ProblemCollaborationUpsertWithWhereUniqueWithoutInitiatorInput[]
    createMany?: ProblemCollaborationCreateManyInitiatorInputEnvelope
    set?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    disconnect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    delete?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    update?: ProblemCollaborationUpdateWithWhereUniqueWithoutInitiatorInput | ProblemCollaborationUpdateWithWhereUniqueWithoutInitiatorInput[]
    updateMany?: ProblemCollaborationUpdateManyWithWhereWithoutInitiatorInput | ProblemCollaborationUpdateManyWithWhereWithoutInitiatorInput[]
    deleteMany?: ProblemCollaborationScalarWhereInput | ProblemCollaborationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFollowersInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput
    upsert?: UserUpsertWithoutFollowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowingInput, UserUpdateWithoutFollowingInput>, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFollowersInput
    upsert?: UserUpsertWithoutFollowersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFollowersInput, UserUpdateWithoutFollowersInput>, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type ProblemCreatetagsInput = {
    set: string[]
  }

  export type ProblemCreateaskedInInput = {
    set: string[]
  }

  export type ProblemInvitationCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemInvitationCreateWithoutProblemInput, ProblemInvitationUncheckedCreateWithoutProblemInput> | ProblemInvitationCreateWithoutProblemInput[] | ProblemInvitationUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutProblemInput | ProblemInvitationCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemInvitationCreateManyProblemInputEnvelope
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
  }

  export type ProblemCollaborationCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemCollaborationCreateWithoutProblemInput, ProblemCollaborationUncheckedCreateWithoutProblemInput> | ProblemCollaborationCreateWithoutProblemInput[] | ProblemCollaborationUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutProblemInput | ProblemCollaborationCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemCollaborationCreateManyProblemInputEnvelope
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutProblemsInput = {
    create?: XOR<UserCreateWithoutProblemsInput, UserUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemsInput
    connect?: UserWhereUniqueInput
  }

  export type SubmissionCreateNestedManyWithoutProblemInput = {
    create?: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput> | SubmissionCreateWithoutProblemInput[] | SubmissionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutProblemInput | SubmissionCreateOrConnectWithoutProblemInput[]
    createMany?: SubmissionCreateManyProblemInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type ProblemSolvedCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemSolvedCreateWithoutProblemInput, ProblemSolvedUncheckedCreateWithoutProblemInput> | ProblemSolvedCreateWithoutProblemInput[] | ProblemSolvedUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemSolvedCreateOrConnectWithoutProblemInput | ProblemSolvedCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemSolvedCreateManyProblemInputEnvelope
    connect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
  }

  export type ProblemInPlaylistCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemInPlaylistCreateWithoutProblemInput, ProblemInPlaylistUncheckedCreateWithoutProblemInput> | ProblemInPlaylistCreateWithoutProblemInput[] | ProblemInPlaylistUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemInPlaylistCreateOrConnectWithoutProblemInput | ProblemInPlaylistCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemInPlaylistCreateManyProblemInputEnvelope
    connect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
  }

  export type ProblemReportCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemReportCreateWithoutProblemInput, ProblemReportUncheckedCreateWithoutProblemInput> | ProblemReportCreateWithoutProblemInput[] | ProblemReportUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemReportCreateOrConnectWithoutProblemInput | ProblemReportCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemReportCreateManyProblemInputEnvelope
    connect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
  }

  export type ProblemDiscussionCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemDiscussionCreateWithoutProblemInput, ProblemDiscussionUncheckedCreateWithoutProblemInput> | ProblemDiscussionCreateWithoutProblemInput[] | ProblemDiscussionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemDiscussionCreateOrConnectWithoutProblemInput | ProblemDiscussionCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemDiscussionCreateManyProblemInputEnvelope
    connect?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
  }

  export type ProblemInvitationUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemInvitationCreateWithoutProblemInput, ProblemInvitationUncheckedCreateWithoutProblemInput> | ProblemInvitationCreateWithoutProblemInput[] | ProblemInvitationUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutProblemInput | ProblemInvitationCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemInvitationCreateManyProblemInputEnvelope
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
  }

  export type ProblemCollaborationUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemCollaborationCreateWithoutProblemInput, ProblemCollaborationUncheckedCreateWithoutProblemInput> | ProblemCollaborationCreateWithoutProblemInput[] | ProblemCollaborationUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutProblemInput | ProblemCollaborationCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemCollaborationCreateManyProblemInputEnvelope
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput> | SubmissionCreateWithoutProblemInput[] | SubmissionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutProblemInput | SubmissionCreateOrConnectWithoutProblemInput[]
    createMany?: SubmissionCreateManyProblemInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemSolvedCreateWithoutProblemInput, ProblemSolvedUncheckedCreateWithoutProblemInput> | ProblemSolvedCreateWithoutProblemInput[] | ProblemSolvedUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemSolvedCreateOrConnectWithoutProblemInput | ProblemSolvedCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemSolvedCreateManyProblemInputEnvelope
    connect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
  }

  export type ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemInPlaylistCreateWithoutProblemInput, ProblemInPlaylistUncheckedCreateWithoutProblemInput> | ProblemInPlaylistCreateWithoutProblemInput[] | ProblemInPlaylistUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemInPlaylistCreateOrConnectWithoutProblemInput | ProblemInPlaylistCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemInPlaylistCreateManyProblemInputEnvelope
    connect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
  }

  export type ProblemReportUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemReportCreateWithoutProblemInput, ProblemReportUncheckedCreateWithoutProblemInput> | ProblemReportCreateWithoutProblemInput[] | ProblemReportUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemReportCreateOrConnectWithoutProblemInput | ProblemReportCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemReportCreateManyProblemInputEnvelope
    connect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
  }

  export type ProblemDiscussionUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<ProblemDiscussionCreateWithoutProblemInput, ProblemDiscussionUncheckedCreateWithoutProblemInput> | ProblemDiscussionCreateWithoutProblemInput[] | ProblemDiscussionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemDiscussionCreateOrConnectWithoutProblemInput | ProblemDiscussionCreateOrConnectWithoutProblemInput[]
    createMany?: ProblemDiscussionCreateManyProblemInputEnvelope
    connect?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
  }

  export type EnumDifficultyFieldUpdateOperationsInput = {
    set?: $Enums.Difficulty
  }

  export type ProblemUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProblemUpdateaskedInInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProblemInvitationUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemInvitationCreateWithoutProblemInput, ProblemInvitationUncheckedCreateWithoutProblemInput> | ProblemInvitationCreateWithoutProblemInput[] | ProblemInvitationUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutProblemInput | ProblemInvitationCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemInvitationUpsertWithWhereUniqueWithoutProblemInput | ProblemInvitationUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemInvitationCreateManyProblemInputEnvelope
    set?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    disconnect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    delete?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    update?: ProblemInvitationUpdateWithWhereUniqueWithoutProblemInput | ProblemInvitationUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemInvitationUpdateManyWithWhereWithoutProblemInput | ProblemInvitationUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemInvitationScalarWhereInput | ProblemInvitationScalarWhereInput[]
  }

  export type ProblemCollaborationUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemCollaborationCreateWithoutProblemInput, ProblemCollaborationUncheckedCreateWithoutProblemInput> | ProblemCollaborationCreateWithoutProblemInput[] | ProblemCollaborationUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutProblemInput | ProblemCollaborationCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemCollaborationUpsertWithWhereUniqueWithoutProblemInput | ProblemCollaborationUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemCollaborationCreateManyProblemInputEnvelope
    set?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    disconnect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    delete?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    update?: ProblemCollaborationUpdateWithWhereUniqueWithoutProblemInput | ProblemCollaborationUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemCollaborationUpdateManyWithWhereWithoutProblemInput | ProblemCollaborationUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemCollaborationScalarWhereInput | ProblemCollaborationScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutProblemsNestedInput = {
    create?: XOR<UserCreateWithoutProblemsInput, UserUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemsInput
    upsert?: UserUpsertWithoutProblemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProblemsInput, UserUpdateWithoutProblemsInput>, UserUncheckedUpdateWithoutProblemsInput>
  }

  export type SubmissionUpdateManyWithoutProblemNestedInput = {
    create?: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput> | SubmissionCreateWithoutProblemInput[] | SubmissionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutProblemInput | SubmissionCreateOrConnectWithoutProblemInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutProblemInput | SubmissionUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: SubmissionCreateManyProblemInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutProblemInput | SubmissionUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutProblemInput | SubmissionUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ProblemSolvedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemSolvedCreateWithoutProblemInput, ProblemSolvedUncheckedCreateWithoutProblemInput> | ProblemSolvedCreateWithoutProblemInput[] | ProblemSolvedUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemSolvedCreateOrConnectWithoutProblemInput | ProblemSolvedCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput | ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemSolvedCreateManyProblemInputEnvelope
    set?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    disconnect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    delete?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    connect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    update?: ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput | ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemSolvedUpdateManyWithWhereWithoutProblemInput | ProblemSolvedUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemSolvedScalarWhereInput | ProblemSolvedScalarWhereInput[]
  }

  export type ProblemInPlaylistUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemInPlaylistCreateWithoutProblemInput, ProblemInPlaylistUncheckedCreateWithoutProblemInput> | ProblemInPlaylistCreateWithoutProblemInput[] | ProblemInPlaylistUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemInPlaylistCreateOrConnectWithoutProblemInput | ProblemInPlaylistCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput | ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemInPlaylistCreateManyProblemInputEnvelope
    set?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    disconnect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    delete?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    connect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    update?: ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput | ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput | ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemInPlaylistScalarWhereInput | ProblemInPlaylistScalarWhereInput[]
  }

  export type ProblemReportUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemReportCreateWithoutProblemInput, ProblemReportUncheckedCreateWithoutProblemInput> | ProblemReportCreateWithoutProblemInput[] | ProblemReportUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemReportCreateOrConnectWithoutProblemInput | ProblemReportCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemReportUpsertWithWhereUniqueWithoutProblemInput | ProblemReportUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemReportCreateManyProblemInputEnvelope
    set?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    disconnect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    delete?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    connect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    update?: ProblemReportUpdateWithWhereUniqueWithoutProblemInput | ProblemReportUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemReportUpdateManyWithWhereWithoutProblemInput | ProblemReportUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemReportScalarWhereInput | ProblemReportScalarWhereInput[]
  }

  export type ProblemDiscussionUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemDiscussionCreateWithoutProblemInput, ProblemDiscussionUncheckedCreateWithoutProblemInput> | ProblemDiscussionCreateWithoutProblemInput[] | ProblemDiscussionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemDiscussionCreateOrConnectWithoutProblemInput | ProblemDiscussionCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemDiscussionUpsertWithWhereUniqueWithoutProblemInput | ProblemDiscussionUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemDiscussionCreateManyProblemInputEnvelope
    set?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
    disconnect?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
    delete?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
    connect?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
    update?: ProblemDiscussionUpdateWithWhereUniqueWithoutProblemInput | ProblemDiscussionUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemDiscussionUpdateManyWithWhereWithoutProblemInput | ProblemDiscussionUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemDiscussionScalarWhereInput | ProblemDiscussionScalarWhereInput[]
  }

  export type ProblemInvitationUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemInvitationCreateWithoutProblemInput, ProblemInvitationUncheckedCreateWithoutProblemInput> | ProblemInvitationCreateWithoutProblemInput[] | ProblemInvitationUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemInvitationCreateOrConnectWithoutProblemInput | ProblemInvitationCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemInvitationUpsertWithWhereUniqueWithoutProblemInput | ProblemInvitationUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemInvitationCreateManyProblemInputEnvelope
    set?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    disconnect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    delete?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    connect?: ProblemInvitationWhereUniqueInput | ProblemInvitationWhereUniqueInput[]
    update?: ProblemInvitationUpdateWithWhereUniqueWithoutProblemInput | ProblemInvitationUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemInvitationUpdateManyWithWhereWithoutProblemInput | ProblemInvitationUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemInvitationScalarWhereInput | ProblemInvitationScalarWhereInput[]
  }

  export type ProblemCollaborationUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemCollaborationCreateWithoutProblemInput, ProblemCollaborationUncheckedCreateWithoutProblemInput> | ProblemCollaborationCreateWithoutProblemInput[] | ProblemCollaborationUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemCollaborationCreateOrConnectWithoutProblemInput | ProblemCollaborationCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemCollaborationUpsertWithWhereUniqueWithoutProblemInput | ProblemCollaborationUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemCollaborationCreateManyProblemInputEnvelope
    set?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    disconnect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    delete?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    connect?: ProblemCollaborationWhereUniqueInput | ProblemCollaborationWhereUniqueInput[]
    update?: ProblemCollaborationUpdateWithWhereUniqueWithoutProblemInput | ProblemCollaborationUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemCollaborationUpdateManyWithWhereWithoutProblemInput | ProblemCollaborationUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemCollaborationScalarWhereInput | ProblemCollaborationScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput> | SubmissionCreateWithoutProblemInput[] | SubmissionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutProblemInput | SubmissionCreateOrConnectWithoutProblemInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutProblemInput | SubmissionUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: SubmissionCreateManyProblemInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutProblemInput | SubmissionUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutProblemInput | SubmissionUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemSolvedCreateWithoutProblemInput, ProblemSolvedUncheckedCreateWithoutProblemInput> | ProblemSolvedCreateWithoutProblemInput[] | ProblemSolvedUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemSolvedCreateOrConnectWithoutProblemInput | ProblemSolvedCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput | ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemSolvedCreateManyProblemInputEnvelope
    set?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    disconnect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    delete?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    connect?: ProblemSolvedWhereUniqueInput | ProblemSolvedWhereUniqueInput[]
    update?: ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput | ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemSolvedUpdateManyWithWhereWithoutProblemInput | ProblemSolvedUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemSolvedScalarWhereInput | ProblemSolvedScalarWhereInput[]
  }

  export type ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemInPlaylistCreateWithoutProblemInput, ProblemInPlaylistUncheckedCreateWithoutProblemInput> | ProblemInPlaylistCreateWithoutProblemInput[] | ProblemInPlaylistUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemInPlaylistCreateOrConnectWithoutProblemInput | ProblemInPlaylistCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput | ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemInPlaylistCreateManyProblemInputEnvelope
    set?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    disconnect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    delete?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    connect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    update?: ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput | ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput | ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemInPlaylistScalarWhereInput | ProblemInPlaylistScalarWhereInput[]
  }

  export type ProblemReportUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemReportCreateWithoutProblemInput, ProblemReportUncheckedCreateWithoutProblemInput> | ProblemReportCreateWithoutProblemInput[] | ProblemReportUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemReportCreateOrConnectWithoutProblemInput | ProblemReportCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemReportUpsertWithWhereUniqueWithoutProblemInput | ProblemReportUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemReportCreateManyProblemInputEnvelope
    set?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    disconnect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    delete?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    connect?: ProblemReportWhereUniqueInput | ProblemReportWhereUniqueInput[]
    update?: ProblemReportUpdateWithWhereUniqueWithoutProblemInput | ProblemReportUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemReportUpdateManyWithWhereWithoutProblemInput | ProblemReportUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemReportScalarWhereInput | ProblemReportScalarWhereInput[]
  }

  export type ProblemDiscussionUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<ProblemDiscussionCreateWithoutProblemInput, ProblemDiscussionUncheckedCreateWithoutProblemInput> | ProblemDiscussionCreateWithoutProblemInput[] | ProblemDiscussionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: ProblemDiscussionCreateOrConnectWithoutProblemInput | ProblemDiscussionCreateOrConnectWithoutProblemInput[]
    upsert?: ProblemDiscussionUpsertWithWhereUniqueWithoutProblemInput | ProblemDiscussionUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: ProblemDiscussionCreateManyProblemInputEnvelope
    set?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
    disconnect?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
    delete?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
    connect?: ProblemDiscussionWhereUniqueInput | ProblemDiscussionWhereUniqueInput[]
    update?: ProblemDiscussionUpdateWithWhereUniqueWithoutProblemInput | ProblemDiscussionUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: ProblemDiscussionUpdateManyWithWhereWithoutProblemInput | ProblemDiscussionUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: ProblemDiscussionScalarWhereInput | ProblemDiscussionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubmissionInput = {
    create?: XOR<UserCreateWithoutSubmissionInput, UserUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionInput
    connect?: UserWhereUniqueInput
  }

  export type ProblemCreateNestedOneWithoutSubmissionInput = {
    create?: XOR<ProblemCreateWithoutSubmissionInput, ProblemUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutSubmissionInput
    connect?: ProblemWhereUniqueInput
  }

  export type TestCaseResultCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<TestCaseResultCreateWithoutSubmissionInput, TestCaseResultUncheckedCreateWithoutSubmissionInput> | TestCaseResultCreateWithoutSubmissionInput[] | TestCaseResultUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: TestCaseResultCreateOrConnectWithoutSubmissionInput | TestCaseResultCreateOrConnectWithoutSubmissionInput[]
    createMany?: TestCaseResultCreateManySubmissionInputEnvelope
    connect?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
  }

  export type TestCaseResultUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<TestCaseResultCreateWithoutSubmissionInput, TestCaseResultUncheckedCreateWithoutSubmissionInput> | TestCaseResultCreateWithoutSubmissionInput[] | TestCaseResultUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: TestCaseResultCreateOrConnectWithoutSubmissionInput | TestCaseResultCreateOrConnectWithoutSubmissionInput[]
    createMany?: TestCaseResultCreateManySubmissionInputEnvelope
    connect?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSubmissionNestedInput = {
    create?: XOR<UserCreateWithoutSubmissionInput, UserUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionInput
    upsert?: UserUpsertWithoutSubmissionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmissionInput, UserUpdateWithoutSubmissionInput>, UserUncheckedUpdateWithoutSubmissionInput>
  }

  export type ProblemUpdateOneRequiredWithoutSubmissionNestedInput = {
    create?: XOR<ProblemCreateWithoutSubmissionInput, ProblemUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutSubmissionInput
    upsert?: ProblemUpsertWithoutSubmissionInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutSubmissionInput, ProblemUpdateWithoutSubmissionInput>, ProblemUncheckedUpdateWithoutSubmissionInput>
  }

  export type TestCaseResultUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<TestCaseResultCreateWithoutSubmissionInput, TestCaseResultUncheckedCreateWithoutSubmissionInput> | TestCaseResultCreateWithoutSubmissionInput[] | TestCaseResultUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: TestCaseResultCreateOrConnectWithoutSubmissionInput | TestCaseResultCreateOrConnectWithoutSubmissionInput[]
    upsert?: TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput | TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: TestCaseResultCreateManySubmissionInputEnvelope
    set?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
    disconnect?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
    delete?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
    connect?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
    update?: TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput | TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: TestCaseResultUpdateManyWithWhereWithoutSubmissionInput | TestCaseResultUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: TestCaseResultScalarWhereInput | TestCaseResultScalarWhereInput[]
  }

  export type TestCaseResultUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<TestCaseResultCreateWithoutSubmissionInput, TestCaseResultUncheckedCreateWithoutSubmissionInput> | TestCaseResultCreateWithoutSubmissionInput[] | TestCaseResultUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: TestCaseResultCreateOrConnectWithoutSubmissionInput | TestCaseResultCreateOrConnectWithoutSubmissionInput[]
    upsert?: TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput | TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: TestCaseResultCreateManySubmissionInputEnvelope
    set?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
    disconnect?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
    delete?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
    connect?: TestCaseResultWhereUniqueInput | TestCaseResultWhereUniqueInput[]
    update?: TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput | TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: TestCaseResultUpdateManyWithWhereWithoutSubmissionInput | TestCaseResultUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: TestCaseResultScalarWhereInput | TestCaseResultScalarWhereInput[]
  }

  export type SubmissionCreateNestedOneWithoutTestCasesInput = {
    create?: XOR<SubmissionCreateWithoutTestCasesInput, SubmissionUncheckedCreateWithoutTestCasesInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestCasesInput
    connect?: SubmissionWhereUniqueInput
  }

  export type SubmissionUpdateOneRequiredWithoutTestCasesNestedInput = {
    create?: XOR<SubmissionCreateWithoutTestCasesInput, SubmissionUncheckedCreateWithoutTestCasesInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestCasesInput
    upsert?: SubmissionUpsertWithoutTestCasesInput
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutTestCasesInput, SubmissionUpdateWithoutTestCasesInput>, SubmissionUncheckedUpdateWithoutTestCasesInput>
  }

  export type UserCreateNestedOneWithoutProblemSolvedInput = {
    create?: XOR<UserCreateWithoutProblemSolvedInput, UserUncheckedCreateWithoutProblemSolvedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemSolvedInput
    connect?: UserWhereUniqueInput
  }

  export type ProblemCreateNestedOneWithoutSolvedByInput = {
    create?: XOR<ProblemCreateWithoutSolvedByInput, ProblemUncheckedCreateWithoutSolvedByInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutSolvedByInput
    connect?: ProblemWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProblemSolvedNestedInput = {
    create?: XOR<UserCreateWithoutProblemSolvedInput, UserUncheckedCreateWithoutProblemSolvedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProblemSolvedInput
    upsert?: UserUpsertWithoutProblemSolvedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProblemSolvedInput, UserUpdateWithoutProblemSolvedInput>, UserUncheckedUpdateWithoutProblemSolvedInput>
  }

  export type ProblemUpdateOneRequiredWithoutSolvedByNestedInput = {
    create?: XOR<ProblemCreateWithoutSolvedByInput, ProblemUncheckedCreateWithoutSolvedByInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutSolvedByInput
    upsert?: ProblemUpsertWithoutSolvedByInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutSolvedByInput, ProblemUpdateWithoutSolvedByInput>, ProblemUncheckedUpdateWithoutSolvedByInput>
  }

  export type ProblemInPlaylistCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<ProblemInPlaylistCreateWithoutPlaylistInput, ProblemInPlaylistUncheckedCreateWithoutPlaylistInput> | ProblemInPlaylistCreateWithoutPlaylistInput[] | ProblemInPlaylistUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: ProblemInPlaylistCreateOrConnectWithoutPlaylistInput | ProblemInPlaylistCreateOrConnectWithoutPlaylistInput[]
    createMany?: ProblemInPlaylistCreateManyPlaylistInputEnvelope
    connect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
  }

  export type PlaylistPurchaseCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<PlaylistPurchaseCreateWithoutPlaylistInput, PlaylistPurchaseUncheckedCreateWithoutPlaylistInput> | PlaylistPurchaseCreateWithoutPlaylistInput[] | PlaylistPurchaseUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistPurchaseCreateOrConnectWithoutPlaylistInput | PlaylistPurchaseCreateOrConnectWithoutPlaylistInput[]
    createMany?: PlaylistPurchaseCreateManyPlaylistInputEnvelope
    connect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutPlaylistsInput = {
    create?: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistsInput
    connect?: UserWhereUniqueInput
  }

  export type ProblemInPlaylistUncheckedCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<ProblemInPlaylistCreateWithoutPlaylistInput, ProblemInPlaylistUncheckedCreateWithoutPlaylistInput> | ProblemInPlaylistCreateWithoutPlaylistInput[] | ProblemInPlaylistUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: ProblemInPlaylistCreateOrConnectWithoutPlaylistInput | ProblemInPlaylistCreateOrConnectWithoutPlaylistInput[]
    createMany?: ProblemInPlaylistCreateManyPlaylistInputEnvelope
    connect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
  }

  export type PlaylistPurchaseUncheckedCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<PlaylistPurchaseCreateWithoutPlaylistInput, PlaylistPurchaseUncheckedCreateWithoutPlaylistInput> | PlaylistPurchaseCreateWithoutPlaylistInput[] | PlaylistPurchaseUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistPurchaseCreateOrConnectWithoutPlaylistInput | PlaylistPurchaseCreateOrConnectWithoutPlaylistInput[]
    createMany?: PlaylistPurchaseCreateManyPlaylistInputEnvelope
    connect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProblemInPlaylistUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<ProblemInPlaylistCreateWithoutPlaylistInput, ProblemInPlaylistUncheckedCreateWithoutPlaylistInput> | ProblemInPlaylistCreateWithoutPlaylistInput[] | ProblemInPlaylistUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: ProblemInPlaylistCreateOrConnectWithoutPlaylistInput | ProblemInPlaylistCreateOrConnectWithoutPlaylistInput[]
    upsert?: ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput | ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: ProblemInPlaylistCreateManyPlaylistInputEnvelope
    set?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    disconnect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    delete?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    connect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    update?: ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput | ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput | ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: ProblemInPlaylistScalarWhereInput | ProblemInPlaylistScalarWhereInput[]
  }

  export type PlaylistPurchaseUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<PlaylistPurchaseCreateWithoutPlaylistInput, PlaylistPurchaseUncheckedCreateWithoutPlaylistInput> | PlaylistPurchaseCreateWithoutPlaylistInput[] | PlaylistPurchaseUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistPurchaseCreateOrConnectWithoutPlaylistInput | PlaylistPurchaseCreateOrConnectWithoutPlaylistInput[]
    upsert?: PlaylistPurchaseUpsertWithWhereUniqueWithoutPlaylistInput | PlaylistPurchaseUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: PlaylistPurchaseCreateManyPlaylistInputEnvelope
    set?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    disconnect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    delete?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    connect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    update?: PlaylistPurchaseUpdateWithWhereUniqueWithoutPlaylistInput | PlaylistPurchaseUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: PlaylistPurchaseUpdateManyWithWhereWithoutPlaylistInput | PlaylistPurchaseUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: PlaylistPurchaseScalarWhereInput | PlaylistPurchaseScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutPlaylistsNestedInput = {
    create?: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistsInput
    upsert?: UserUpsertWithoutPlaylistsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlaylistsInput, UserUpdateWithoutPlaylistsInput>, UserUncheckedUpdateWithoutPlaylistsInput>
  }

  export type ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<ProblemInPlaylistCreateWithoutPlaylistInput, ProblemInPlaylistUncheckedCreateWithoutPlaylistInput> | ProblemInPlaylistCreateWithoutPlaylistInput[] | ProblemInPlaylistUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: ProblemInPlaylistCreateOrConnectWithoutPlaylistInput | ProblemInPlaylistCreateOrConnectWithoutPlaylistInput[]
    upsert?: ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput | ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: ProblemInPlaylistCreateManyPlaylistInputEnvelope
    set?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    disconnect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    delete?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    connect?: ProblemInPlaylistWhereUniqueInput | ProblemInPlaylistWhereUniqueInput[]
    update?: ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput | ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput | ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: ProblemInPlaylistScalarWhereInput | ProblemInPlaylistScalarWhereInput[]
  }

  export type PlaylistPurchaseUncheckedUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<PlaylistPurchaseCreateWithoutPlaylistInput, PlaylistPurchaseUncheckedCreateWithoutPlaylistInput> | PlaylistPurchaseCreateWithoutPlaylistInput[] | PlaylistPurchaseUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistPurchaseCreateOrConnectWithoutPlaylistInput | PlaylistPurchaseCreateOrConnectWithoutPlaylistInput[]
    upsert?: PlaylistPurchaseUpsertWithWhereUniqueWithoutPlaylistInput | PlaylistPurchaseUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: PlaylistPurchaseCreateManyPlaylistInputEnvelope
    set?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    disconnect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    delete?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    connect?: PlaylistPurchaseWhereUniqueInput | PlaylistPurchaseWhereUniqueInput[]
    update?: PlaylistPurchaseUpdateWithWhereUniqueWithoutPlaylistInput | PlaylistPurchaseUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: PlaylistPurchaseUpdateManyWithWhereWithoutPlaylistInput | PlaylistPurchaseUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: PlaylistPurchaseScalarWhereInput | PlaylistPurchaseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPlaylistPurchasesInput = {
    create?: XOR<UserCreateWithoutPlaylistPurchasesInput, UserUncheckedCreateWithoutPlaylistPurchasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistPurchasesInput
    connect?: UserWhereUniqueInput
  }

  export type PlaylistCreateNestedOneWithoutPurchasesInput = {
    create?: XOR<PlaylistCreateWithoutPurchasesInput, PlaylistUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutPurchasesInput
    connect?: PlaylistWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPlaylistPurchasesNestedInput = {
    create?: XOR<UserCreateWithoutPlaylistPurchasesInput, UserUncheckedCreateWithoutPlaylistPurchasesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistPurchasesInput
    upsert?: UserUpsertWithoutPlaylistPurchasesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlaylistPurchasesInput, UserUpdateWithoutPlaylistPurchasesInput>, UserUncheckedUpdateWithoutPlaylistPurchasesInput>
  }

  export type PlaylistUpdateOneRequiredWithoutPurchasesNestedInput = {
    create?: XOR<PlaylistCreateWithoutPurchasesInput, PlaylistUncheckedCreateWithoutPurchasesInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutPurchasesInput
    upsert?: PlaylistUpsertWithoutPurchasesInput
    connect?: PlaylistWhereUniqueInput
    update?: XOR<XOR<PlaylistUpdateToOneWithWhereWithoutPurchasesInput, PlaylistUpdateWithoutPurchasesInput>, PlaylistUncheckedUpdateWithoutPurchasesInput>
  }

  export type PlaylistCreateNestedOneWithoutProblemsInput = {
    create?: XOR<PlaylistCreateWithoutProblemsInput, PlaylistUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutProblemsInput
    connect?: PlaylistWhereUniqueInput
  }

  export type ProblemCreateNestedOneWithoutProblemsPlaylistsInput = {
    create?: XOR<ProblemCreateWithoutProblemsPlaylistsInput, ProblemUncheckedCreateWithoutProblemsPlaylistsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutProblemsPlaylistsInput
    connect?: ProblemWhereUniqueInput
  }

  export type PlaylistUpdateOneRequiredWithoutProblemsNestedInput = {
    create?: XOR<PlaylistCreateWithoutProblemsInput, PlaylistUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutProblemsInput
    upsert?: PlaylistUpsertWithoutProblemsInput
    connect?: PlaylistWhereUniqueInput
    update?: XOR<XOR<PlaylistUpdateToOneWithWhereWithoutProblemsInput, PlaylistUpdateWithoutProblemsInput>, PlaylistUncheckedUpdateWithoutProblemsInput>
  }

  export type ProblemUpdateOneRequiredWithoutProblemsPlaylistsNestedInput = {
    create?: XOR<ProblemCreateWithoutProblemsPlaylistsInput, ProblemUncheckedCreateWithoutProblemsPlaylistsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutProblemsPlaylistsInput
    upsert?: ProblemUpsertWithoutProblemsPlaylistsInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutProblemsPlaylistsInput, ProblemUpdateWithoutProblemsPlaylistsInput>, ProblemUncheckedUpdateWithoutProblemsPlaylistsInput>
  }

  export type ProblemCreateNestedOneWithoutReportsInput = {
    create?: XOR<ProblemCreateWithoutReportsInput, ProblemUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutReportsInput
    connect?: ProblemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubmittedReportsInput = {
    create?: XOR<UserCreateWithoutSubmittedReportsInput, UserUncheckedCreateWithoutSubmittedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmittedReportsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumReportReasonFieldUpdateOperationsInput = {
    set?: $Enums.ReportReason
  }

  export type ProblemUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<ProblemCreateWithoutReportsInput, ProblemUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutReportsInput
    upsert?: ProblemUpsertWithoutReportsInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutReportsInput, ProblemUpdateWithoutReportsInput>, ProblemUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateOneRequiredWithoutSubmittedReportsNestedInput = {
    create?: XOR<UserCreateWithoutSubmittedReportsInput, UserUncheckedCreateWithoutSubmittedReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmittedReportsInput
    upsert?: UserUpsertWithoutSubmittedReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmittedReportsInput, UserUpdateWithoutSubmittedReportsInput>, UserUncheckedUpdateWithoutSubmittedReportsInput>
  }

  export type ProblemCreateNestedOneWithoutDiscussionsInput = {
    create?: XOR<ProblemCreateWithoutDiscussionsInput, ProblemUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutDiscussionsInput
    connect?: ProblemWhereUniqueInput
  }

  export type DiscussionMessageCreateNestedManyWithoutDiscussionInput = {
    create?: XOR<DiscussionMessageCreateWithoutDiscussionInput, DiscussionMessageUncheckedCreateWithoutDiscussionInput> | DiscussionMessageCreateWithoutDiscussionInput[] | DiscussionMessageUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutDiscussionInput | DiscussionMessageCreateOrConnectWithoutDiscussionInput[]
    createMany?: DiscussionMessageCreateManyDiscussionInputEnvelope
    connect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
  }

  export type DiscussionMessageUncheckedCreateNestedManyWithoutDiscussionInput = {
    create?: XOR<DiscussionMessageCreateWithoutDiscussionInput, DiscussionMessageUncheckedCreateWithoutDiscussionInput> | DiscussionMessageCreateWithoutDiscussionInput[] | DiscussionMessageUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutDiscussionInput | DiscussionMessageCreateOrConnectWithoutDiscussionInput[]
    createMany?: DiscussionMessageCreateManyDiscussionInputEnvelope
    connect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
  }

  export type ProblemUpdateOneRequiredWithoutDiscussionsNestedInput = {
    create?: XOR<ProblemCreateWithoutDiscussionsInput, ProblemUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutDiscussionsInput
    upsert?: ProblemUpsertWithoutDiscussionsInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutDiscussionsInput, ProblemUpdateWithoutDiscussionsInput>, ProblemUncheckedUpdateWithoutDiscussionsInput>
  }

  export type DiscussionMessageUpdateManyWithoutDiscussionNestedInput = {
    create?: XOR<DiscussionMessageCreateWithoutDiscussionInput, DiscussionMessageUncheckedCreateWithoutDiscussionInput> | DiscussionMessageCreateWithoutDiscussionInput[] | DiscussionMessageUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutDiscussionInput | DiscussionMessageCreateOrConnectWithoutDiscussionInput[]
    upsert?: DiscussionMessageUpsertWithWhereUniqueWithoutDiscussionInput | DiscussionMessageUpsertWithWhereUniqueWithoutDiscussionInput[]
    createMany?: DiscussionMessageCreateManyDiscussionInputEnvelope
    set?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    disconnect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    delete?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    connect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    update?: DiscussionMessageUpdateWithWhereUniqueWithoutDiscussionInput | DiscussionMessageUpdateWithWhereUniqueWithoutDiscussionInput[]
    updateMany?: DiscussionMessageUpdateManyWithWhereWithoutDiscussionInput | DiscussionMessageUpdateManyWithWhereWithoutDiscussionInput[]
    deleteMany?: DiscussionMessageScalarWhereInput | DiscussionMessageScalarWhereInput[]
  }

  export type DiscussionMessageUncheckedUpdateManyWithoutDiscussionNestedInput = {
    create?: XOR<DiscussionMessageCreateWithoutDiscussionInput, DiscussionMessageUncheckedCreateWithoutDiscussionInput> | DiscussionMessageCreateWithoutDiscussionInput[] | DiscussionMessageUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutDiscussionInput | DiscussionMessageCreateOrConnectWithoutDiscussionInput[]
    upsert?: DiscussionMessageUpsertWithWhereUniqueWithoutDiscussionInput | DiscussionMessageUpsertWithWhereUniqueWithoutDiscussionInput[]
    createMany?: DiscussionMessageCreateManyDiscussionInputEnvelope
    set?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    disconnect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    delete?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    connect?: DiscussionMessageWhereUniqueInput | DiscussionMessageWhereUniqueInput[]
    update?: DiscussionMessageUpdateWithWhereUniqueWithoutDiscussionInput | DiscussionMessageUpdateWithWhereUniqueWithoutDiscussionInput[]
    updateMany?: DiscussionMessageUpdateManyWithWhereWithoutDiscussionInput | DiscussionMessageUpdateManyWithWhereWithoutDiscussionInput[]
    deleteMany?: DiscussionMessageScalarWhereInput | DiscussionMessageScalarWhereInput[]
  }

  export type ProblemDiscussionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ProblemDiscussionCreateWithoutMessagesInput, ProblemDiscussionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ProblemDiscussionCreateOrConnectWithoutMessagesInput
    connect?: ProblemDiscussionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDiscussionMessagesInput = {
    create?: XOR<UserCreateWithoutDiscussionMessagesInput, UserUncheckedCreateWithoutDiscussionMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type DiscussionReplyCreateNestedManyWithoutMessageInput = {
    create?: XOR<DiscussionReplyCreateWithoutMessageInput, DiscussionReplyUncheckedCreateWithoutMessageInput> | DiscussionReplyCreateWithoutMessageInput[] | DiscussionReplyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: DiscussionReplyCreateOrConnectWithoutMessageInput | DiscussionReplyCreateOrConnectWithoutMessageInput[]
    createMany?: DiscussionReplyCreateManyMessageInputEnvelope
    connect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
  }

  export type DiscussionUpvoteCreateNestedManyWithoutMessageInput = {
    create?: XOR<DiscussionUpvoteCreateWithoutMessageInput, DiscussionUpvoteUncheckedCreateWithoutMessageInput> | DiscussionUpvoteCreateWithoutMessageInput[] | DiscussionUpvoteUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: DiscussionUpvoteCreateOrConnectWithoutMessageInput | DiscussionUpvoteCreateOrConnectWithoutMessageInput[]
    createMany?: DiscussionUpvoteCreateManyMessageInputEnvelope
    connect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
  }

  export type DiscussionReplyUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<DiscussionReplyCreateWithoutMessageInput, DiscussionReplyUncheckedCreateWithoutMessageInput> | DiscussionReplyCreateWithoutMessageInput[] | DiscussionReplyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: DiscussionReplyCreateOrConnectWithoutMessageInput | DiscussionReplyCreateOrConnectWithoutMessageInput[]
    createMany?: DiscussionReplyCreateManyMessageInputEnvelope
    connect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
  }

  export type DiscussionUpvoteUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<DiscussionUpvoteCreateWithoutMessageInput, DiscussionUpvoteUncheckedCreateWithoutMessageInput> | DiscussionUpvoteCreateWithoutMessageInput[] | DiscussionUpvoteUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: DiscussionUpvoteCreateOrConnectWithoutMessageInput | DiscussionUpvoteCreateOrConnectWithoutMessageInput[]
    createMany?: DiscussionUpvoteCreateManyMessageInputEnvelope
    connect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
  }

  export type ProblemDiscussionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ProblemDiscussionCreateWithoutMessagesInput, ProblemDiscussionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ProblemDiscussionCreateOrConnectWithoutMessagesInput
    upsert?: ProblemDiscussionUpsertWithoutMessagesInput
    connect?: ProblemDiscussionWhereUniqueInput
    update?: XOR<XOR<ProblemDiscussionUpdateToOneWithWhereWithoutMessagesInput, ProblemDiscussionUpdateWithoutMessagesInput>, ProblemDiscussionUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutDiscussionMessagesNestedInput = {
    create?: XOR<UserCreateWithoutDiscussionMessagesInput, UserUncheckedCreateWithoutDiscussionMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionMessagesInput
    upsert?: UserUpsertWithoutDiscussionMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDiscussionMessagesInput, UserUpdateWithoutDiscussionMessagesInput>, UserUncheckedUpdateWithoutDiscussionMessagesInput>
  }

  export type DiscussionReplyUpdateManyWithoutMessageNestedInput = {
    create?: XOR<DiscussionReplyCreateWithoutMessageInput, DiscussionReplyUncheckedCreateWithoutMessageInput> | DiscussionReplyCreateWithoutMessageInput[] | DiscussionReplyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: DiscussionReplyCreateOrConnectWithoutMessageInput | DiscussionReplyCreateOrConnectWithoutMessageInput[]
    upsert?: DiscussionReplyUpsertWithWhereUniqueWithoutMessageInput | DiscussionReplyUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: DiscussionReplyCreateManyMessageInputEnvelope
    set?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    disconnect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    delete?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    connect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    update?: DiscussionReplyUpdateWithWhereUniqueWithoutMessageInput | DiscussionReplyUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: DiscussionReplyUpdateManyWithWhereWithoutMessageInput | DiscussionReplyUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: DiscussionReplyScalarWhereInput | DiscussionReplyScalarWhereInput[]
  }

  export type DiscussionUpvoteUpdateManyWithoutMessageNestedInput = {
    create?: XOR<DiscussionUpvoteCreateWithoutMessageInput, DiscussionUpvoteUncheckedCreateWithoutMessageInput> | DiscussionUpvoteCreateWithoutMessageInput[] | DiscussionUpvoteUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: DiscussionUpvoteCreateOrConnectWithoutMessageInput | DiscussionUpvoteCreateOrConnectWithoutMessageInput[]
    upsert?: DiscussionUpvoteUpsertWithWhereUniqueWithoutMessageInput | DiscussionUpvoteUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: DiscussionUpvoteCreateManyMessageInputEnvelope
    set?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    disconnect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    delete?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    connect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    update?: DiscussionUpvoteUpdateWithWhereUniqueWithoutMessageInput | DiscussionUpvoteUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: DiscussionUpvoteUpdateManyWithWhereWithoutMessageInput | DiscussionUpvoteUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: DiscussionUpvoteScalarWhereInput | DiscussionUpvoteScalarWhereInput[]
  }

  export type DiscussionReplyUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<DiscussionReplyCreateWithoutMessageInput, DiscussionReplyUncheckedCreateWithoutMessageInput> | DiscussionReplyCreateWithoutMessageInput[] | DiscussionReplyUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: DiscussionReplyCreateOrConnectWithoutMessageInput | DiscussionReplyCreateOrConnectWithoutMessageInput[]
    upsert?: DiscussionReplyUpsertWithWhereUniqueWithoutMessageInput | DiscussionReplyUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: DiscussionReplyCreateManyMessageInputEnvelope
    set?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    disconnect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    delete?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    connect?: DiscussionReplyWhereUniqueInput | DiscussionReplyWhereUniqueInput[]
    update?: DiscussionReplyUpdateWithWhereUniqueWithoutMessageInput | DiscussionReplyUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: DiscussionReplyUpdateManyWithWhereWithoutMessageInput | DiscussionReplyUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: DiscussionReplyScalarWhereInput | DiscussionReplyScalarWhereInput[]
  }

  export type DiscussionUpvoteUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<DiscussionUpvoteCreateWithoutMessageInput, DiscussionUpvoteUncheckedCreateWithoutMessageInput> | DiscussionUpvoteCreateWithoutMessageInput[] | DiscussionUpvoteUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: DiscussionUpvoteCreateOrConnectWithoutMessageInput | DiscussionUpvoteCreateOrConnectWithoutMessageInput[]
    upsert?: DiscussionUpvoteUpsertWithWhereUniqueWithoutMessageInput | DiscussionUpvoteUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: DiscussionUpvoteCreateManyMessageInputEnvelope
    set?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    disconnect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    delete?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    connect?: DiscussionUpvoteWhereUniqueInput | DiscussionUpvoteWhereUniqueInput[]
    update?: DiscussionUpvoteUpdateWithWhereUniqueWithoutMessageInput | DiscussionUpvoteUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: DiscussionUpvoteUpdateManyWithWhereWithoutMessageInput | DiscussionUpvoteUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: DiscussionUpvoteScalarWhereInput | DiscussionUpvoteScalarWhereInput[]
  }

  export type DiscussionMessageCreateNestedOneWithoutRepliesInput = {
    create?: XOR<DiscussionMessageCreateWithoutRepliesInput, DiscussionMessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutRepliesInput
    connect?: DiscussionMessageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDiscussionRepliesInput = {
    create?: XOR<UserCreateWithoutDiscussionRepliesInput, UserUncheckedCreateWithoutDiscussionRepliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionRepliesInput
    connect?: UserWhereUniqueInput
  }

  export type DiscussionMessageUpdateOneRequiredWithoutRepliesNestedInput = {
    create?: XOR<DiscussionMessageCreateWithoutRepliesInput, DiscussionMessageUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutRepliesInput
    upsert?: DiscussionMessageUpsertWithoutRepliesInput
    connect?: DiscussionMessageWhereUniqueInput
    update?: XOR<XOR<DiscussionMessageUpdateToOneWithWhereWithoutRepliesInput, DiscussionMessageUpdateWithoutRepliesInput>, DiscussionMessageUncheckedUpdateWithoutRepliesInput>
  }

  export type UserUpdateOneRequiredWithoutDiscussionRepliesNestedInput = {
    create?: XOR<UserCreateWithoutDiscussionRepliesInput, UserUncheckedCreateWithoutDiscussionRepliesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionRepliesInput
    upsert?: UserUpsertWithoutDiscussionRepliesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDiscussionRepliesInput, UserUpdateWithoutDiscussionRepliesInput>, UserUncheckedUpdateWithoutDiscussionRepliesInput>
  }

  export type UserCreateNestedOneWithoutDiscussionUpvotesInput = {
    create?: XOR<UserCreateWithoutDiscussionUpvotesInput, UserUncheckedCreateWithoutDiscussionUpvotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionUpvotesInput
    connect?: UserWhereUniqueInput
  }

  export type DiscussionMessageCreateNestedOneWithoutUpvotesInput = {
    create?: XOR<DiscussionMessageCreateWithoutUpvotesInput, DiscussionMessageUncheckedCreateWithoutUpvotesInput>
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutUpvotesInput
    connect?: DiscussionMessageWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDiscussionUpvotesNestedInput = {
    create?: XOR<UserCreateWithoutDiscussionUpvotesInput, UserUncheckedCreateWithoutDiscussionUpvotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionUpvotesInput
    upsert?: UserUpsertWithoutDiscussionUpvotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDiscussionUpvotesInput, UserUpdateWithoutDiscussionUpvotesInput>, UserUncheckedUpdateWithoutDiscussionUpvotesInput>
  }

  export type DiscussionMessageUpdateOneRequiredWithoutUpvotesNestedInput = {
    create?: XOR<DiscussionMessageCreateWithoutUpvotesInput, DiscussionMessageUncheckedCreateWithoutUpvotesInput>
    connectOrCreate?: DiscussionMessageCreateOrConnectWithoutUpvotesInput
    upsert?: DiscussionMessageUpsertWithoutUpvotesInput
    connect?: DiscussionMessageWhereUniqueInput
    update?: XOR<XOR<DiscussionMessageUpdateToOneWithWhereWithoutUpvotesInput, DiscussionMessageUpdateWithoutUpvotesInput>, DiscussionMessageUncheckedUpdateWithoutUpvotesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type ProblemCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<ProblemCreateWithoutInvitationsInput, ProblemUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutInvitationsInput
    connect?: ProblemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentInvitationsInput = {
    create?: XOR<UserCreateWithoutSentInvitationsInput, UserUncheckedCreateWithoutSentInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedInvitationsInput = {
    create?: XOR<UserCreateWithoutReceivedInvitationsInput, UserUncheckedCreateWithoutReceivedInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumInvitationStatusFieldUpdateOperationsInput = {
    set?: $Enums.InvitationStatus
  }

  export type ProblemUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<ProblemCreateWithoutInvitationsInput, ProblemUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutInvitationsInput
    upsert?: ProblemUpsertWithoutInvitationsInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutInvitationsInput, ProblemUpdateWithoutInvitationsInput>, ProblemUncheckedUpdateWithoutInvitationsInput>
  }

  export type UserUpdateOneRequiredWithoutSentInvitationsNestedInput = {
    create?: XOR<UserCreateWithoutSentInvitationsInput, UserUncheckedCreateWithoutSentInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentInvitationsInput
    upsert?: UserUpsertWithoutSentInvitationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentInvitationsInput, UserUpdateWithoutSentInvitationsInput>, UserUncheckedUpdateWithoutSentInvitationsInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedInvitationsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedInvitationsInput, UserUncheckedCreateWithoutReceivedInvitationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedInvitationsInput
    upsert?: UserUpsertWithoutReceivedInvitationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedInvitationsInput, UserUpdateWithoutReceivedInvitationsInput>, UserUncheckedUpdateWithoutReceivedInvitationsInput>
  }

  export type ProblemCreateNestedOneWithoutCollaborationsInput = {
    create?: XOR<ProblemCreateWithoutCollaborationsInput, ProblemUncheckedCreateWithoutCollaborationsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutCollaborationsInput
    connect?: ProblemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInitiatedCollaborationsInput = {
    create?: XOR<UserCreateWithoutInitiatedCollaborationsInput, UserUncheckedCreateWithoutInitiatedCollaborationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatedCollaborationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutParticipatingCollaborationsInput = {
    create?: XOR<UserCreateWithoutParticipatingCollaborationsInput, UserUncheckedCreateWithoutParticipatingCollaborationsInput> | UserCreateWithoutParticipatingCollaborationsInput[] | UserUncheckedCreateWithoutParticipatingCollaborationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutParticipatingCollaborationsInput | UserCreateOrConnectWithoutParticipatingCollaborationsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutParticipatingCollaborationsInput = {
    create?: XOR<UserCreateWithoutParticipatingCollaborationsInput, UserUncheckedCreateWithoutParticipatingCollaborationsInput> | UserCreateWithoutParticipatingCollaborationsInput[] | UserUncheckedCreateWithoutParticipatingCollaborationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutParticipatingCollaborationsInput | UserCreateOrConnectWithoutParticipatingCollaborationsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ProblemUpdateOneRequiredWithoutCollaborationsNestedInput = {
    create?: XOR<ProblemCreateWithoutCollaborationsInput, ProblemUncheckedCreateWithoutCollaborationsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutCollaborationsInput
    upsert?: ProblemUpsertWithoutCollaborationsInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutCollaborationsInput, ProblemUpdateWithoutCollaborationsInput>, ProblemUncheckedUpdateWithoutCollaborationsInput>
  }

  export type UserUpdateOneRequiredWithoutInitiatedCollaborationsNestedInput = {
    create?: XOR<UserCreateWithoutInitiatedCollaborationsInput, UserUncheckedCreateWithoutInitiatedCollaborationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutInitiatedCollaborationsInput
    upsert?: UserUpsertWithoutInitiatedCollaborationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInitiatedCollaborationsInput, UserUpdateWithoutInitiatedCollaborationsInput>, UserUncheckedUpdateWithoutInitiatedCollaborationsInput>
  }

  export type UserUpdateManyWithoutParticipatingCollaborationsNestedInput = {
    create?: XOR<UserCreateWithoutParticipatingCollaborationsInput, UserUncheckedCreateWithoutParticipatingCollaborationsInput> | UserCreateWithoutParticipatingCollaborationsInput[] | UserUncheckedCreateWithoutParticipatingCollaborationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutParticipatingCollaborationsInput | UserCreateOrConnectWithoutParticipatingCollaborationsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutParticipatingCollaborationsInput | UserUpsertWithWhereUniqueWithoutParticipatingCollaborationsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutParticipatingCollaborationsInput | UserUpdateWithWhereUniqueWithoutParticipatingCollaborationsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutParticipatingCollaborationsInput | UserUpdateManyWithWhereWithoutParticipatingCollaborationsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutParticipatingCollaborationsNestedInput = {
    create?: XOR<UserCreateWithoutParticipatingCollaborationsInput, UserUncheckedCreateWithoutParticipatingCollaborationsInput> | UserCreateWithoutParticipatingCollaborationsInput[] | UserUncheckedCreateWithoutParticipatingCollaborationsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutParticipatingCollaborationsInput | UserCreateOrConnectWithoutParticipatingCollaborationsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutParticipatingCollaborationsInput | UserUpsertWithWhereUniqueWithoutParticipatingCollaborationsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutParticipatingCollaborationsInput | UserUpdateWithWhereUniqueWithoutParticipatingCollaborationsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutParticipatingCollaborationsInput | UserUpdateManyWithWhereWithoutParticipatingCollaborationsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumReportReasonFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportReason | EnumReportReasonFieldRefInput<$PrismaModel>
    in?: $Enums.ReportReason[] | ListEnumReportReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportReason[] | ListEnumReportReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumReportReasonFilter<$PrismaModel> | $Enums.ReportReason
  }

  export type NestedEnumReportReasonWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportReason | EnumReportReasonFieldRefInput<$PrismaModel>
    in?: $Enums.ReportReason[] | ListEnumReportReasonFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReportReason[] | ListEnumReportReasonFieldRefInput<$PrismaModel>
    not?: NestedEnumReportReasonWithAggregatesFilter<$PrismaModel> | $Enums.ReportReason
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportReasonFilter<$PrismaModel>
    _max?: NestedEnumReportReasonFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumInvitationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusFilter<$PrismaModel> | $Enums.InvitationStatus
  }

  export type NestedEnumInvitationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvitationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvitationStatusFilter<$PrismaModel>
    _max?: NestedEnumInvitationStatusFilter<$PrismaModel>
  }

  export type FollowCreateWithoutFollowingInput = {
    id?: string
    createdAt?: Date | string
    follower: UserCreateNestedOneWithoutFollowingInput
  }

  export type FollowUncheckedCreateWithoutFollowingInput = {
    id?: string
    followerId: string
    createdAt?: Date | string
  }

  export type FollowCreateOrConnectWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowCreateManyFollowingInputEnvelope = {
    data: FollowCreateManyFollowingInput | FollowCreateManyFollowingInput[]
    skipDuplicates?: boolean
  }

  export type FollowCreateWithoutFollowerInput = {
    id?: string
    createdAt?: Date | string
    following: UserCreateNestedOneWithoutFollowersInput
  }

  export type FollowUncheckedCreateWithoutFollowerInput = {
    id?: string
    followingId: string
    createdAt?: Date | string
  }

  export type FollowCreateOrConnectWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowCreateManyFollowerInputEnvelope = {
    data: FollowCreateManyFollowerInput | FollowCreateManyFollowerInput[]
    skipDuplicates?: boolean
  }

  export type ProblemCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationCreateNestedManyWithoutProblemInput
    submission?: SubmissionCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistCreateNestedManyWithoutProblemInput
    reports?: ProblemReportCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationUncheckedCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutProblemInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
    reports?: ProblemReportUncheckedCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutUserInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput>
  }

  export type ProblemCreateManyUserInputEnvelope = {
    data: ProblemCreateManyUserInput | ProblemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCreateWithoutUserInput = {
    id?: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutSubmissionInput
    testCases?: TestCaseResultCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutUserInput = {
    id?: string
    problemId: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    testCases?: TestCaseResultUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput>
  }

  export type SubmissionCreateManyUserInputEnvelope = {
    data: SubmissionCreateManyUserInput | SubmissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProblemSolvedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutSolvedByInput
  }

  export type ProblemSolvedUncheckedCreateWithoutUserInput = {
    id?: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemSolvedCreateOrConnectWithoutUserInput = {
    where: ProblemSolvedWhereUniqueInput
    create: XOR<ProblemSolvedCreateWithoutUserInput, ProblemSolvedUncheckedCreateWithoutUserInput>
  }

  export type ProblemSolvedCreateManyUserInputEnvelope = {
    data: ProblemSolvedCreateManyUserInput | ProblemSolvedCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlaylistCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemInPlaylistCreateNestedManyWithoutPlaylistInput
    purchases?: PlaylistPurchaseCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemInPlaylistUncheckedCreateNestedManyWithoutPlaylistInput
    purchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistCreateOrConnectWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput>
  }

  export type PlaylistCreateManyUserInputEnvelope = {
    data: PlaylistCreateManyUserInput | PlaylistCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProblemReportCreateWithoutUserInput = {
    id?: string
    reason: $Enums.ReportReason
    description?: string | null
    status?: string
    createdAt?: Date | string
    problem: ProblemCreateNestedOneWithoutReportsInput
  }

  export type ProblemReportUncheckedCreateWithoutUserInput = {
    id?: string
    problemId: string
    reason: $Enums.ReportReason
    description?: string | null
    status?: string
    createdAt?: Date | string
  }

  export type ProblemReportCreateOrConnectWithoutUserInput = {
    where: ProblemReportWhereUniqueInput
    create: XOR<ProblemReportCreateWithoutUserInput, ProblemReportUncheckedCreateWithoutUserInput>
  }

  export type ProblemReportCreateManyUserInputEnvelope = {
    data: ProblemReportCreateManyUserInput | ProblemReportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DiscussionMessageCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    discussion: ProblemDiscussionCreateNestedOneWithoutMessagesInput
    replies?: DiscussionReplyCreateNestedManyWithoutMessageInput
    upvotes?: DiscussionUpvoteCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageUncheckedCreateWithoutUserInput = {
    id?: string
    discussionId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: DiscussionReplyUncheckedCreateNestedManyWithoutMessageInput
    upvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageCreateOrConnectWithoutUserInput = {
    where: DiscussionMessageWhereUniqueInput
    create: XOR<DiscussionMessageCreateWithoutUserInput, DiscussionMessageUncheckedCreateWithoutUserInput>
  }

  export type DiscussionMessageCreateManyUserInputEnvelope = {
    data: DiscussionMessageCreateManyUserInput | DiscussionMessageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DiscussionReplyCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    message: DiscussionMessageCreateNestedOneWithoutRepliesInput
  }

  export type DiscussionReplyUncheckedCreateWithoutUserInput = {
    id?: string
    messageId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionReplyCreateOrConnectWithoutUserInput = {
    where: DiscussionReplyWhereUniqueInput
    create: XOR<DiscussionReplyCreateWithoutUserInput, DiscussionReplyUncheckedCreateWithoutUserInput>
  }

  export type DiscussionReplyCreateManyUserInputEnvelope = {
    data: DiscussionReplyCreateManyUserInput | DiscussionReplyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DiscussionUpvoteCreateWithoutUserInput = {
    id?: string
    message: DiscussionMessageCreateNestedOneWithoutUpvotesInput
  }

  export type DiscussionUpvoteUncheckedCreateWithoutUserInput = {
    id?: string
    messageId: string
  }

  export type DiscussionUpvoteCreateOrConnectWithoutUserInput = {
    where: DiscussionUpvoteWhereUniqueInput
    create: XOR<DiscussionUpvoteCreateWithoutUserInput, DiscussionUpvoteUncheckedCreateWithoutUserInput>
  }

  export type DiscussionUpvoteCreateManyUserInputEnvelope = {
    data: DiscussionUpvoteCreateManyUserInput | DiscussionUpvoteCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlaylistPurchaseCreateWithoutUserInput = {
    id?: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    purchaseDate?: Date | string
    playlist: PlaylistCreateNestedOneWithoutPurchasesInput
  }

  export type PlaylistPurchaseUncheckedCreateWithoutUserInput = {
    id?: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    playlistId: string
    purchaseDate?: Date | string
  }

  export type PlaylistPurchaseCreateOrConnectWithoutUserInput = {
    where: PlaylistPurchaseWhereUniqueInput
    create: XOR<PlaylistPurchaseCreateWithoutUserInput, PlaylistPurchaseUncheckedCreateWithoutUserInput>
  }

  export type PlaylistPurchaseCreateManyUserInputEnvelope = {
    data: PlaylistPurchaseCreateManyUserInput | PlaylistPurchaseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProblemInvitationCreateWithoutSenderInput = {
    id?: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutInvitationsInput
    receiver: UserCreateNestedOneWithoutReceivedInvitationsInput
  }

  export type ProblemInvitationUncheckedCreateWithoutSenderInput = {
    id?: string
    problemId: string
    receiverId: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInvitationCreateOrConnectWithoutSenderInput = {
    where: ProblemInvitationWhereUniqueInput
    create: XOR<ProblemInvitationCreateWithoutSenderInput, ProblemInvitationUncheckedCreateWithoutSenderInput>
  }

  export type ProblemInvitationCreateManySenderInputEnvelope = {
    data: ProblemInvitationCreateManySenderInput | ProblemInvitationCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type ProblemInvitationCreateWithoutReceiverInput = {
    id?: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutInvitationsInput
    sender: UserCreateNestedOneWithoutSentInvitationsInput
  }

  export type ProblemInvitationUncheckedCreateWithoutReceiverInput = {
    id?: string
    problemId: string
    senderId: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInvitationCreateOrConnectWithoutReceiverInput = {
    where: ProblemInvitationWhereUniqueInput
    create: XOR<ProblemInvitationCreateWithoutReceiverInput, ProblemInvitationUncheckedCreateWithoutReceiverInput>
  }

  export type ProblemInvitationCreateManyReceiverInputEnvelope = {
    data: ProblemInvitationCreateManyReceiverInput | ProblemInvitationCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type ProblemCollaborationCreateWithoutParticipantsInput = {
    id?: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutCollaborationsInput
    initiator: UserCreateNestedOneWithoutInitiatedCollaborationsInput
  }

  export type ProblemCollaborationUncheckedCreateWithoutParticipantsInput = {
    id?: string
    problemId: string
    initiatorId: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemCollaborationCreateOrConnectWithoutParticipantsInput = {
    where: ProblemCollaborationWhereUniqueInput
    create: XOR<ProblemCollaborationCreateWithoutParticipantsInput, ProblemCollaborationUncheckedCreateWithoutParticipantsInput>
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    content: string
    isRead?: boolean
    referenceId?: string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    content: string
    isRead?: boolean
    referenceId?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProblemCollaborationCreateWithoutInitiatorInput = {
    id?: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutCollaborationsInput
    participants?: UserCreateNestedManyWithoutParticipatingCollaborationsInput
  }

  export type ProblemCollaborationUncheckedCreateWithoutInitiatorInput = {
    id?: string
    problemId: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserUncheckedCreateNestedManyWithoutParticipatingCollaborationsInput
  }

  export type ProblemCollaborationCreateOrConnectWithoutInitiatorInput = {
    where: ProblemCollaborationWhereUniqueInput
    create: XOR<ProblemCollaborationCreateWithoutInitiatorInput, ProblemCollaborationUncheckedCreateWithoutInitiatorInput>
  }

  export type ProblemCollaborationCreateManyInitiatorInputEnvelope = {
    data: ProblemCollaborationCreateManyInitiatorInput | ProblemCollaborationCreateManyInitiatorInput[]
    skipDuplicates?: boolean
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
    create: XOR<FollowCreateWithoutFollowingInput, FollowUncheckedCreateWithoutFollowingInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowingInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowingInput, FollowUncheckedUpdateWithoutFollowingInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowingInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowingInput>
  }

  export type FollowScalarWhereInput = {
    AND?: FollowScalarWhereInput | FollowScalarWhereInput[]
    OR?: FollowScalarWhereInput[]
    NOT?: FollowScalarWhereInput | FollowScalarWhereInput[]
    id?: StringFilter<"Follow"> | string
    followerId?: StringFilter<"Follow"> | string
    followingId?: StringFilter<"Follow"> | string
    createdAt?: DateTimeFilter<"Follow"> | Date | string
  }

  export type FollowUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    update: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
    create: XOR<FollowCreateWithoutFollowerInput, FollowUncheckedCreateWithoutFollowerInput>
  }

  export type FollowUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowWhereUniqueInput
    data: XOR<FollowUpdateWithoutFollowerInput, FollowUncheckedUpdateWithoutFollowerInput>
  }

  export type FollowUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowScalarWhereInput
    data: XOR<FollowUpdateManyMutationInput, FollowUncheckedUpdateManyWithoutFollowerInput>
  }

  export type ProblemUpsertWithWhereUniqueWithoutUserInput = {
    where: ProblemWhereUniqueInput
    update: XOR<ProblemUpdateWithoutUserInput, ProblemUncheckedUpdateWithoutUserInput>
    create: XOR<ProblemCreateWithoutUserInput, ProblemUncheckedCreateWithoutUserInput>
  }

  export type ProblemUpdateWithWhereUniqueWithoutUserInput = {
    where: ProblemWhereUniqueInput
    data: XOR<ProblemUpdateWithoutUserInput, ProblemUncheckedUpdateWithoutUserInput>
  }

  export type ProblemUpdateManyWithWhereWithoutUserInput = {
    where: ProblemScalarWhereInput
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyWithoutUserInput>
  }

  export type ProblemScalarWhereInput = {
    AND?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
    OR?: ProblemScalarWhereInput[]
    NOT?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
    id?: StringFilter<"Problem"> | string
    title?: StringFilter<"Problem"> | string
    description?: StringFilter<"Problem"> | string
    difficulty?: EnumDifficultyFilter<"Problem"> | $Enums.Difficulty
    tags?: StringNullableListFilter<"Problem">
    userId?: StringFilter<"Problem"> | string
    examples?: JsonFilter<"Problem">
    constraints?: StringFilter<"Problem"> | string
    hints?: StringNullableFilter<"Problem"> | string | null
    editorial?: StringNullableFilter<"Problem"> | string | null
    testcases?: JsonFilter<"Problem">
    codeSnippets?: JsonFilter<"Problem">
    referenceSolutions?: JsonFilter<"Problem">
    isPaid?: BoolFilter<"Problem"> | boolean
    askedIn?: StringNullableListFilter<"Problem">
    likes?: IntFilter<"Problem"> | number
    dislikes?: IntFilter<"Problem"> | number
    createdAt?: DateTimeFilter<"Problem"> | Date | string
    updatedAt?: DateTimeFilter<"Problem"> | Date | string
  }

  export type SubmissionUpsertWithWhereUniqueWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutUserInput, SubmissionUncheckedUpdateWithoutUserInput>
    create: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutUserInput, SubmissionUncheckedUpdateWithoutUserInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutUserInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutUserInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    id?: StringFilter<"Submission"> | string
    userId?: StringFilter<"Submission"> | string
    problemId?: StringFilter<"Submission"> | string
    sourceCode?: StringFilter<"Submission"> | string
    language?: StringFilter<"Submission"> | string
    stdin?: StringNullableFilter<"Submission"> | string | null
    stdout?: StringNullableFilter<"Submission"> | string | null
    stderr?: StringNullableFilter<"Submission"> | string | null
    compileOutput?: StringNullableFilter<"Submission"> | string | null
    status?: StringFilter<"Submission"> | string
    memory?: StringNullableFilter<"Submission"> | string | null
    time?: StringNullableFilter<"Submission"> | string | null
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    updatedAt?: DateTimeFilter<"Submission"> | Date | string
  }

  export type ProblemSolvedUpsertWithWhereUniqueWithoutUserInput = {
    where: ProblemSolvedWhereUniqueInput
    update: XOR<ProblemSolvedUpdateWithoutUserInput, ProblemSolvedUncheckedUpdateWithoutUserInput>
    create: XOR<ProblemSolvedCreateWithoutUserInput, ProblemSolvedUncheckedCreateWithoutUserInput>
  }

  export type ProblemSolvedUpdateWithWhereUniqueWithoutUserInput = {
    where: ProblemSolvedWhereUniqueInput
    data: XOR<ProblemSolvedUpdateWithoutUserInput, ProblemSolvedUncheckedUpdateWithoutUserInput>
  }

  export type ProblemSolvedUpdateManyWithWhereWithoutUserInput = {
    where: ProblemSolvedScalarWhereInput
    data: XOR<ProblemSolvedUpdateManyMutationInput, ProblemSolvedUncheckedUpdateManyWithoutUserInput>
  }

  export type ProblemSolvedScalarWhereInput = {
    AND?: ProblemSolvedScalarWhereInput | ProblemSolvedScalarWhereInput[]
    OR?: ProblemSolvedScalarWhereInput[]
    NOT?: ProblemSolvedScalarWhereInput | ProblemSolvedScalarWhereInput[]
    id?: StringFilter<"ProblemSolved"> | string
    userId?: StringFilter<"ProblemSolved"> | string
    problemId?: StringFilter<"ProblemSolved"> | string
    createdAt?: DateTimeFilter<"ProblemSolved"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemSolved"> | Date | string
  }

  export type PlaylistUpsertWithWhereUniqueWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    update: XOR<PlaylistUpdateWithoutUserInput, PlaylistUncheckedUpdateWithoutUserInput>
    create: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput>
  }

  export type PlaylistUpdateWithWhereUniqueWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    data: XOR<PlaylistUpdateWithoutUserInput, PlaylistUncheckedUpdateWithoutUserInput>
  }

  export type PlaylistUpdateManyWithWhereWithoutUserInput = {
    where: PlaylistScalarWhereInput
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyWithoutUserInput>
  }

  export type PlaylistScalarWhereInput = {
    AND?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
    OR?: PlaylistScalarWhereInput[]
    NOT?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
    id?: StringFilter<"Playlist"> | string
    name?: StringFilter<"Playlist"> | string
    description?: StringNullableFilter<"Playlist"> | string | null
    userId?: StringFilter<"Playlist"> | string
    isPaid?: BoolFilter<"Playlist"> | boolean
    price?: IntNullableFilter<"Playlist"> | number | null
    createdAt?: DateTimeFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeFilter<"Playlist"> | Date | string
  }

  export type ProblemReportUpsertWithWhereUniqueWithoutUserInput = {
    where: ProblemReportWhereUniqueInput
    update: XOR<ProblemReportUpdateWithoutUserInput, ProblemReportUncheckedUpdateWithoutUserInput>
    create: XOR<ProblemReportCreateWithoutUserInput, ProblemReportUncheckedCreateWithoutUserInput>
  }

  export type ProblemReportUpdateWithWhereUniqueWithoutUserInput = {
    where: ProblemReportWhereUniqueInput
    data: XOR<ProblemReportUpdateWithoutUserInput, ProblemReportUncheckedUpdateWithoutUserInput>
  }

  export type ProblemReportUpdateManyWithWhereWithoutUserInput = {
    where: ProblemReportScalarWhereInput
    data: XOR<ProblemReportUpdateManyMutationInput, ProblemReportUncheckedUpdateManyWithoutUserInput>
  }

  export type ProblemReportScalarWhereInput = {
    AND?: ProblemReportScalarWhereInput | ProblemReportScalarWhereInput[]
    OR?: ProblemReportScalarWhereInput[]
    NOT?: ProblemReportScalarWhereInput | ProblemReportScalarWhereInput[]
    id?: StringFilter<"ProblemReport"> | string
    problemId?: StringFilter<"ProblemReport"> | string
    userId?: StringFilter<"ProblemReport"> | string
    reason?: EnumReportReasonFilter<"ProblemReport"> | $Enums.ReportReason
    description?: StringNullableFilter<"ProblemReport"> | string | null
    status?: StringFilter<"ProblemReport"> | string
    createdAt?: DateTimeFilter<"ProblemReport"> | Date | string
  }

  export type DiscussionMessageUpsertWithWhereUniqueWithoutUserInput = {
    where: DiscussionMessageWhereUniqueInput
    update: XOR<DiscussionMessageUpdateWithoutUserInput, DiscussionMessageUncheckedUpdateWithoutUserInput>
    create: XOR<DiscussionMessageCreateWithoutUserInput, DiscussionMessageUncheckedCreateWithoutUserInput>
  }

  export type DiscussionMessageUpdateWithWhereUniqueWithoutUserInput = {
    where: DiscussionMessageWhereUniqueInput
    data: XOR<DiscussionMessageUpdateWithoutUserInput, DiscussionMessageUncheckedUpdateWithoutUserInput>
  }

  export type DiscussionMessageUpdateManyWithWhereWithoutUserInput = {
    where: DiscussionMessageScalarWhereInput
    data: XOR<DiscussionMessageUpdateManyMutationInput, DiscussionMessageUncheckedUpdateManyWithoutUserInput>
  }

  export type DiscussionMessageScalarWhereInput = {
    AND?: DiscussionMessageScalarWhereInput | DiscussionMessageScalarWhereInput[]
    OR?: DiscussionMessageScalarWhereInput[]
    NOT?: DiscussionMessageScalarWhereInput | DiscussionMessageScalarWhereInput[]
    id?: StringFilter<"DiscussionMessage"> | string
    discussionId?: StringFilter<"DiscussionMessage"> | string
    userId?: StringFilter<"DiscussionMessage"> | string
    content?: StringFilter<"DiscussionMessage"> | string
    createdAt?: DateTimeFilter<"DiscussionMessage"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionMessage"> | Date | string
  }

  export type DiscussionReplyUpsertWithWhereUniqueWithoutUserInput = {
    where: DiscussionReplyWhereUniqueInput
    update: XOR<DiscussionReplyUpdateWithoutUserInput, DiscussionReplyUncheckedUpdateWithoutUserInput>
    create: XOR<DiscussionReplyCreateWithoutUserInput, DiscussionReplyUncheckedCreateWithoutUserInput>
  }

  export type DiscussionReplyUpdateWithWhereUniqueWithoutUserInput = {
    where: DiscussionReplyWhereUniqueInput
    data: XOR<DiscussionReplyUpdateWithoutUserInput, DiscussionReplyUncheckedUpdateWithoutUserInput>
  }

  export type DiscussionReplyUpdateManyWithWhereWithoutUserInput = {
    where: DiscussionReplyScalarWhereInput
    data: XOR<DiscussionReplyUpdateManyMutationInput, DiscussionReplyUncheckedUpdateManyWithoutUserInput>
  }

  export type DiscussionReplyScalarWhereInput = {
    AND?: DiscussionReplyScalarWhereInput | DiscussionReplyScalarWhereInput[]
    OR?: DiscussionReplyScalarWhereInput[]
    NOT?: DiscussionReplyScalarWhereInput | DiscussionReplyScalarWhereInput[]
    id?: StringFilter<"DiscussionReply"> | string
    messageId?: StringFilter<"DiscussionReply"> | string
    userId?: StringFilter<"DiscussionReply"> | string
    content?: StringFilter<"DiscussionReply"> | string
    createdAt?: DateTimeFilter<"DiscussionReply"> | Date | string
    updatedAt?: DateTimeFilter<"DiscussionReply"> | Date | string
  }

  export type DiscussionUpvoteUpsertWithWhereUniqueWithoutUserInput = {
    where: DiscussionUpvoteWhereUniqueInput
    update: XOR<DiscussionUpvoteUpdateWithoutUserInput, DiscussionUpvoteUncheckedUpdateWithoutUserInput>
    create: XOR<DiscussionUpvoteCreateWithoutUserInput, DiscussionUpvoteUncheckedCreateWithoutUserInput>
  }

  export type DiscussionUpvoteUpdateWithWhereUniqueWithoutUserInput = {
    where: DiscussionUpvoteWhereUniqueInput
    data: XOR<DiscussionUpvoteUpdateWithoutUserInput, DiscussionUpvoteUncheckedUpdateWithoutUserInput>
  }

  export type DiscussionUpvoteUpdateManyWithWhereWithoutUserInput = {
    where: DiscussionUpvoteScalarWhereInput
    data: XOR<DiscussionUpvoteUpdateManyMutationInput, DiscussionUpvoteUncheckedUpdateManyWithoutUserInput>
  }

  export type DiscussionUpvoteScalarWhereInput = {
    AND?: DiscussionUpvoteScalarWhereInput | DiscussionUpvoteScalarWhereInput[]
    OR?: DiscussionUpvoteScalarWhereInput[]
    NOT?: DiscussionUpvoteScalarWhereInput | DiscussionUpvoteScalarWhereInput[]
    id?: StringFilter<"DiscussionUpvote"> | string
    userId?: StringFilter<"DiscussionUpvote"> | string
    messageId?: StringFilter<"DiscussionUpvote"> | string
  }

  export type PlaylistPurchaseUpsertWithWhereUniqueWithoutUserInput = {
    where: PlaylistPurchaseWhereUniqueInput
    update: XOR<PlaylistPurchaseUpdateWithoutUserInput, PlaylistPurchaseUncheckedUpdateWithoutUserInput>
    create: XOR<PlaylistPurchaseCreateWithoutUserInput, PlaylistPurchaseUncheckedCreateWithoutUserInput>
  }

  export type PlaylistPurchaseUpdateWithWhereUniqueWithoutUserInput = {
    where: PlaylistPurchaseWhereUniqueInput
    data: XOR<PlaylistPurchaseUpdateWithoutUserInput, PlaylistPurchaseUncheckedUpdateWithoutUserInput>
  }

  export type PlaylistPurchaseUpdateManyWithWhereWithoutUserInput = {
    where: PlaylistPurchaseScalarWhereInput
    data: XOR<PlaylistPurchaseUpdateManyMutationInput, PlaylistPurchaseUncheckedUpdateManyWithoutUserInput>
  }

  export type PlaylistPurchaseScalarWhereInput = {
    AND?: PlaylistPurchaseScalarWhereInput | PlaylistPurchaseScalarWhereInput[]
    OR?: PlaylistPurchaseScalarWhereInput[]
    NOT?: PlaylistPurchaseScalarWhereInput | PlaylistPurchaseScalarWhereInput[]
    id?: StringFilter<"PlaylistPurchase"> | string
    userId?: StringFilter<"PlaylistPurchase"> | string
    paymentId?: StringFilter<"PlaylistPurchase"> | string
    paymentOrderId?: StringFilter<"PlaylistPurchase"> | string
    paymentSignature?: StringFilter<"PlaylistPurchase"> | string
    playlistId?: StringFilter<"PlaylistPurchase"> | string
    purchaseDate?: DateTimeFilter<"PlaylistPurchase"> | Date | string
  }

  export type ProblemInvitationUpsertWithWhereUniqueWithoutSenderInput = {
    where: ProblemInvitationWhereUniqueInput
    update: XOR<ProblemInvitationUpdateWithoutSenderInput, ProblemInvitationUncheckedUpdateWithoutSenderInput>
    create: XOR<ProblemInvitationCreateWithoutSenderInput, ProblemInvitationUncheckedCreateWithoutSenderInput>
  }

  export type ProblemInvitationUpdateWithWhereUniqueWithoutSenderInput = {
    where: ProblemInvitationWhereUniqueInput
    data: XOR<ProblemInvitationUpdateWithoutSenderInput, ProblemInvitationUncheckedUpdateWithoutSenderInput>
  }

  export type ProblemInvitationUpdateManyWithWhereWithoutSenderInput = {
    where: ProblemInvitationScalarWhereInput
    data: XOR<ProblemInvitationUpdateManyMutationInput, ProblemInvitationUncheckedUpdateManyWithoutSenderInput>
  }

  export type ProblemInvitationScalarWhereInput = {
    AND?: ProblemInvitationScalarWhereInput | ProblemInvitationScalarWhereInput[]
    OR?: ProblemInvitationScalarWhereInput[]
    NOT?: ProblemInvitationScalarWhereInput | ProblemInvitationScalarWhereInput[]
    id?: StringFilter<"ProblemInvitation"> | string
    problemId?: StringFilter<"ProblemInvitation"> | string
    senderId?: StringFilter<"ProblemInvitation"> | string
    receiverId?: StringFilter<"ProblemInvitation"> | string
    status?: EnumInvitationStatusFilter<"ProblemInvitation"> | $Enums.InvitationStatus
    message?: StringNullableFilter<"ProblemInvitation"> | string | null
    createdAt?: DateTimeFilter<"ProblemInvitation"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemInvitation"> | Date | string
  }

  export type ProblemInvitationUpsertWithWhereUniqueWithoutReceiverInput = {
    where: ProblemInvitationWhereUniqueInput
    update: XOR<ProblemInvitationUpdateWithoutReceiverInput, ProblemInvitationUncheckedUpdateWithoutReceiverInput>
    create: XOR<ProblemInvitationCreateWithoutReceiverInput, ProblemInvitationUncheckedCreateWithoutReceiverInput>
  }

  export type ProblemInvitationUpdateWithWhereUniqueWithoutReceiverInput = {
    where: ProblemInvitationWhereUniqueInput
    data: XOR<ProblemInvitationUpdateWithoutReceiverInput, ProblemInvitationUncheckedUpdateWithoutReceiverInput>
  }

  export type ProblemInvitationUpdateManyWithWhereWithoutReceiverInput = {
    where: ProblemInvitationScalarWhereInput
    data: XOR<ProblemInvitationUpdateManyMutationInput, ProblemInvitationUncheckedUpdateManyWithoutReceiverInput>
  }

  export type ProblemCollaborationUpsertWithWhereUniqueWithoutParticipantsInput = {
    where: ProblemCollaborationWhereUniqueInput
    update: XOR<ProblemCollaborationUpdateWithoutParticipantsInput, ProblemCollaborationUncheckedUpdateWithoutParticipantsInput>
    create: XOR<ProblemCollaborationCreateWithoutParticipantsInput, ProblemCollaborationUncheckedCreateWithoutParticipantsInput>
  }

  export type ProblemCollaborationUpdateWithWhereUniqueWithoutParticipantsInput = {
    where: ProblemCollaborationWhereUniqueInput
    data: XOR<ProblemCollaborationUpdateWithoutParticipantsInput, ProblemCollaborationUncheckedUpdateWithoutParticipantsInput>
  }

  export type ProblemCollaborationUpdateManyWithWhereWithoutParticipantsInput = {
    where: ProblemCollaborationScalarWhereInput
    data: XOR<ProblemCollaborationUpdateManyMutationInput, ProblemCollaborationUncheckedUpdateManyWithoutParticipantsInput>
  }

  export type ProblemCollaborationScalarWhereInput = {
    AND?: ProblemCollaborationScalarWhereInput | ProblemCollaborationScalarWhereInput[]
    OR?: ProblemCollaborationScalarWhereInput[]
    NOT?: ProblemCollaborationScalarWhereInput | ProblemCollaborationScalarWhereInput[]
    id?: StringFilter<"ProblemCollaboration"> | string
    problemId?: StringFilter<"ProblemCollaboration"> | string
    initiatorId?: StringFilter<"ProblemCollaboration"> | string
    maxParticipants?: IntFilter<"ProblemCollaboration"> | number
    currentCode?: StringFilter<"ProblemCollaboration"> | string
    language?: StringFilter<"ProblemCollaboration"> | string
    createdAt?: DateTimeFilter<"ProblemCollaboration"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemCollaboration"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    content?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    referenceId?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ProblemCollaborationUpsertWithWhereUniqueWithoutInitiatorInput = {
    where: ProblemCollaborationWhereUniqueInput
    update: XOR<ProblemCollaborationUpdateWithoutInitiatorInput, ProblemCollaborationUncheckedUpdateWithoutInitiatorInput>
    create: XOR<ProblemCollaborationCreateWithoutInitiatorInput, ProblemCollaborationUncheckedCreateWithoutInitiatorInput>
  }

  export type ProblemCollaborationUpdateWithWhereUniqueWithoutInitiatorInput = {
    where: ProblemCollaborationWhereUniqueInput
    data: XOR<ProblemCollaborationUpdateWithoutInitiatorInput, ProblemCollaborationUncheckedUpdateWithoutInitiatorInput>
  }

  export type ProblemCollaborationUpdateManyWithWhereWithoutInitiatorInput = {
    where: ProblemCollaborationScalarWhereInput
    data: XOR<ProblemCollaborationUpdateManyMutationInput, ProblemCollaborationUncheckedUpdateManyWithoutInitiatorInput>
  }

  export type UserCreateWithoutFollowingInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserCreateWithoutFollowersInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutFollowersInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutFollowersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
  }

  export type UserUpsertWithoutFollowingInput = {
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUpsertWithoutFollowersInput = {
    update: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
    create: XOR<UserCreateWithoutFollowersInput, UserUncheckedCreateWithoutFollowersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFollowersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFollowersInput, UserUncheckedUpdateWithoutFollowersInput>
  }

  export type UserUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type ProblemInvitationCreateWithoutProblemInput = {
    id?: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sender: UserCreateNestedOneWithoutSentInvitationsInput
    receiver: UserCreateNestedOneWithoutReceivedInvitationsInput
  }

  export type ProblemInvitationUncheckedCreateWithoutProblemInput = {
    id?: string
    senderId: string
    receiverId: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInvitationCreateOrConnectWithoutProblemInput = {
    where: ProblemInvitationWhereUniqueInput
    create: XOR<ProblemInvitationCreateWithoutProblemInput, ProblemInvitationUncheckedCreateWithoutProblemInput>
  }

  export type ProblemInvitationCreateManyProblemInputEnvelope = {
    data: ProblemInvitationCreateManyProblemInput | ProblemInvitationCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type ProblemCollaborationCreateWithoutProblemInput = {
    id?: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
    initiator: UserCreateNestedOneWithoutInitiatedCollaborationsInput
    participants?: UserCreateNestedManyWithoutParticipatingCollaborationsInput
  }

  export type ProblemCollaborationUncheckedCreateWithoutProblemInput = {
    id?: string
    initiatorId: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: UserUncheckedCreateNestedManyWithoutParticipatingCollaborationsInput
  }

  export type ProblemCollaborationCreateOrConnectWithoutProblemInput = {
    where: ProblemCollaborationWhereUniqueInput
    create: XOR<ProblemCollaborationCreateWithoutProblemInput, ProblemCollaborationUncheckedCreateWithoutProblemInput>
  }

  export type ProblemCollaborationCreateManyProblemInputEnvelope = {
    data: ProblemCollaborationCreateManyProblemInput | ProblemCollaborationCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutProblemsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutProblemsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutProblemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProblemsInput, UserUncheckedCreateWithoutProblemsInput>
  }

  export type SubmissionCreateWithoutProblemInput = {
    id?: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionInput
    testCases?: TestCaseResultCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutProblemInput = {
    id?: string
    userId: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    testCases?: TestCaseResultUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutProblemInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput>
  }

  export type SubmissionCreateManyProblemInputEnvelope = {
    data: SubmissionCreateManyProblemInput | SubmissionCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type ProblemSolvedCreateWithoutProblemInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProblemSolvedInput
  }

  export type ProblemSolvedUncheckedCreateWithoutProblemInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemSolvedCreateOrConnectWithoutProblemInput = {
    where: ProblemSolvedWhereUniqueInput
    create: XOR<ProblemSolvedCreateWithoutProblemInput, ProblemSolvedUncheckedCreateWithoutProblemInput>
  }

  export type ProblemSolvedCreateManyProblemInputEnvelope = {
    data: ProblemSolvedCreateManyProblemInput | ProblemSolvedCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type ProblemInPlaylistCreateWithoutProblemInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    playlist: PlaylistCreateNestedOneWithoutProblemsInput
  }

  export type ProblemInPlaylistUncheckedCreateWithoutProblemInput = {
    id?: string
    playlistId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInPlaylistCreateOrConnectWithoutProblemInput = {
    where: ProblemInPlaylistWhereUniqueInput
    create: XOR<ProblemInPlaylistCreateWithoutProblemInput, ProblemInPlaylistUncheckedCreateWithoutProblemInput>
  }

  export type ProblemInPlaylistCreateManyProblemInputEnvelope = {
    data: ProblemInPlaylistCreateManyProblemInput | ProblemInPlaylistCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type ProblemReportCreateWithoutProblemInput = {
    id?: string
    reason: $Enums.ReportReason
    description?: string | null
    status?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSubmittedReportsInput
  }

  export type ProblemReportUncheckedCreateWithoutProblemInput = {
    id?: string
    userId: string
    reason: $Enums.ReportReason
    description?: string | null
    status?: string
    createdAt?: Date | string
  }

  export type ProblemReportCreateOrConnectWithoutProblemInput = {
    where: ProblemReportWhereUniqueInput
    create: XOR<ProblemReportCreateWithoutProblemInput, ProblemReportUncheckedCreateWithoutProblemInput>
  }

  export type ProblemReportCreateManyProblemInputEnvelope = {
    data: ProblemReportCreateManyProblemInput | ProblemReportCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type ProblemDiscussionCreateWithoutProblemInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: DiscussionMessageCreateNestedManyWithoutDiscussionInput
  }

  export type ProblemDiscussionUncheckedCreateWithoutProblemInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: DiscussionMessageUncheckedCreateNestedManyWithoutDiscussionInput
  }

  export type ProblemDiscussionCreateOrConnectWithoutProblemInput = {
    where: ProblemDiscussionWhereUniqueInput
    create: XOR<ProblemDiscussionCreateWithoutProblemInput, ProblemDiscussionUncheckedCreateWithoutProblemInput>
  }

  export type ProblemDiscussionCreateManyProblemInputEnvelope = {
    data: ProblemDiscussionCreateManyProblemInput | ProblemDiscussionCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type ProblemInvitationUpsertWithWhereUniqueWithoutProblemInput = {
    where: ProblemInvitationWhereUniqueInput
    update: XOR<ProblemInvitationUpdateWithoutProblemInput, ProblemInvitationUncheckedUpdateWithoutProblemInput>
    create: XOR<ProblemInvitationCreateWithoutProblemInput, ProblemInvitationUncheckedCreateWithoutProblemInput>
  }

  export type ProblemInvitationUpdateWithWhereUniqueWithoutProblemInput = {
    where: ProblemInvitationWhereUniqueInput
    data: XOR<ProblemInvitationUpdateWithoutProblemInput, ProblemInvitationUncheckedUpdateWithoutProblemInput>
  }

  export type ProblemInvitationUpdateManyWithWhereWithoutProblemInput = {
    where: ProblemInvitationScalarWhereInput
    data: XOR<ProblemInvitationUpdateManyMutationInput, ProblemInvitationUncheckedUpdateManyWithoutProblemInput>
  }

  export type ProblemCollaborationUpsertWithWhereUniqueWithoutProblemInput = {
    where: ProblemCollaborationWhereUniqueInput
    update: XOR<ProblemCollaborationUpdateWithoutProblemInput, ProblemCollaborationUncheckedUpdateWithoutProblemInput>
    create: XOR<ProblemCollaborationCreateWithoutProblemInput, ProblemCollaborationUncheckedCreateWithoutProblemInput>
  }

  export type ProblemCollaborationUpdateWithWhereUniqueWithoutProblemInput = {
    where: ProblemCollaborationWhereUniqueInput
    data: XOR<ProblemCollaborationUpdateWithoutProblemInput, ProblemCollaborationUncheckedUpdateWithoutProblemInput>
  }

  export type ProblemCollaborationUpdateManyWithWhereWithoutProblemInput = {
    where: ProblemCollaborationScalarWhereInput
    data: XOR<ProblemCollaborationUpdateManyMutationInput, ProblemCollaborationUncheckedUpdateManyWithoutProblemInput>
  }

  export type UserUpsertWithoutProblemsInput = {
    update: XOR<UserUpdateWithoutProblemsInput, UserUncheckedUpdateWithoutProblemsInput>
    create: XOR<UserCreateWithoutProblemsInput, UserUncheckedCreateWithoutProblemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProblemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProblemsInput, UserUncheckedUpdateWithoutProblemsInput>
  }

  export type UserUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type SubmissionUpsertWithWhereUniqueWithoutProblemInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutProblemInput, SubmissionUncheckedUpdateWithoutProblemInput>
    create: XOR<SubmissionCreateWithoutProblemInput, SubmissionUncheckedCreateWithoutProblemInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutProblemInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutProblemInput, SubmissionUncheckedUpdateWithoutProblemInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutProblemInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutProblemInput>
  }

  export type ProblemSolvedUpsertWithWhereUniqueWithoutProblemInput = {
    where: ProblemSolvedWhereUniqueInput
    update: XOR<ProblemSolvedUpdateWithoutProblemInput, ProblemSolvedUncheckedUpdateWithoutProblemInput>
    create: XOR<ProblemSolvedCreateWithoutProblemInput, ProblemSolvedUncheckedCreateWithoutProblemInput>
  }

  export type ProblemSolvedUpdateWithWhereUniqueWithoutProblemInput = {
    where: ProblemSolvedWhereUniqueInput
    data: XOR<ProblemSolvedUpdateWithoutProblemInput, ProblemSolvedUncheckedUpdateWithoutProblemInput>
  }

  export type ProblemSolvedUpdateManyWithWhereWithoutProblemInput = {
    where: ProblemSolvedScalarWhereInput
    data: XOR<ProblemSolvedUpdateManyMutationInput, ProblemSolvedUncheckedUpdateManyWithoutProblemInput>
  }

  export type ProblemInPlaylistUpsertWithWhereUniqueWithoutProblemInput = {
    where: ProblemInPlaylistWhereUniqueInput
    update: XOR<ProblemInPlaylistUpdateWithoutProblemInput, ProblemInPlaylistUncheckedUpdateWithoutProblemInput>
    create: XOR<ProblemInPlaylistCreateWithoutProblemInput, ProblemInPlaylistUncheckedCreateWithoutProblemInput>
  }

  export type ProblemInPlaylistUpdateWithWhereUniqueWithoutProblemInput = {
    where: ProblemInPlaylistWhereUniqueInput
    data: XOR<ProblemInPlaylistUpdateWithoutProblemInput, ProblemInPlaylistUncheckedUpdateWithoutProblemInput>
  }

  export type ProblemInPlaylistUpdateManyWithWhereWithoutProblemInput = {
    where: ProblemInPlaylistScalarWhereInput
    data: XOR<ProblemInPlaylistUpdateManyMutationInput, ProblemInPlaylistUncheckedUpdateManyWithoutProblemInput>
  }

  export type ProblemInPlaylistScalarWhereInput = {
    AND?: ProblemInPlaylistScalarWhereInput | ProblemInPlaylistScalarWhereInput[]
    OR?: ProblemInPlaylistScalarWhereInput[]
    NOT?: ProblemInPlaylistScalarWhereInput | ProblemInPlaylistScalarWhereInput[]
    id?: StringFilter<"ProblemInPlaylist"> | string
    playlistId?: StringFilter<"ProblemInPlaylist"> | string
    problemId?: StringFilter<"ProblemInPlaylist"> | string
    createdAt?: DateTimeFilter<"ProblemInPlaylist"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemInPlaylist"> | Date | string
  }

  export type ProblemReportUpsertWithWhereUniqueWithoutProblemInput = {
    where: ProblemReportWhereUniqueInput
    update: XOR<ProblemReportUpdateWithoutProblemInput, ProblemReportUncheckedUpdateWithoutProblemInput>
    create: XOR<ProblemReportCreateWithoutProblemInput, ProblemReportUncheckedCreateWithoutProblemInput>
  }

  export type ProblemReportUpdateWithWhereUniqueWithoutProblemInput = {
    where: ProblemReportWhereUniqueInput
    data: XOR<ProblemReportUpdateWithoutProblemInput, ProblemReportUncheckedUpdateWithoutProblemInput>
  }

  export type ProblemReportUpdateManyWithWhereWithoutProblemInput = {
    where: ProblemReportScalarWhereInput
    data: XOR<ProblemReportUpdateManyMutationInput, ProblemReportUncheckedUpdateManyWithoutProblemInput>
  }

  export type ProblemDiscussionUpsertWithWhereUniqueWithoutProblemInput = {
    where: ProblemDiscussionWhereUniqueInput
    update: XOR<ProblemDiscussionUpdateWithoutProblemInput, ProblemDiscussionUncheckedUpdateWithoutProblemInput>
    create: XOR<ProblemDiscussionCreateWithoutProblemInput, ProblemDiscussionUncheckedCreateWithoutProblemInput>
  }

  export type ProblemDiscussionUpdateWithWhereUniqueWithoutProblemInput = {
    where: ProblemDiscussionWhereUniqueInput
    data: XOR<ProblemDiscussionUpdateWithoutProblemInput, ProblemDiscussionUncheckedUpdateWithoutProblemInput>
  }

  export type ProblemDiscussionUpdateManyWithWhereWithoutProblemInput = {
    where: ProblemDiscussionScalarWhereInput
    data: XOR<ProblemDiscussionUpdateManyMutationInput, ProblemDiscussionUncheckedUpdateManyWithoutProblemInput>
  }

  export type ProblemDiscussionScalarWhereInput = {
    AND?: ProblemDiscussionScalarWhereInput | ProblemDiscussionScalarWhereInput[]
    OR?: ProblemDiscussionScalarWhereInput[]
    NOT?: ProblemDiscussionScalarWhereInput | ProblemDiscussionScalarWhereInput[]
    id?: StringFilter<"ProblemDiscussion"> | string
    problemId?: StringFilter<"ProblemDiscussion"> | string
    createdAt?: DateTimeFilter<"ProblemDiscussion"> | Date | string
    updatedAt?: DateTimeFilter<"ProblemDiscussion"> | Date | string
  }

  export type UserCreateWithoutSubmissionInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutSubmissionInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutSubmissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmissionInput, UserUncheckedCreateWithoutSubmissionInput>
  }

  export type ProblemCreateWithoutSubmissionInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationCreateNestedManyWithoutProblemInput
    user: UserCreateNestedOneWithoutProblemsInput
    solvedBy?: ProblemSolvedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistCreateNestedManyWithoutProblemInput
    reports?: ProblemReportCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutSubmissionInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    userId: string
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationUncheckedCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
    reports?: ProblemReportUncheckedCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutSubmissionInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutSubmissionInput, ProblemUncheckedCreateWithoutSubmissionInput>
  }

  export type TestCaseResultCreateWithoutSubmissionInput = {
    id?: string
    testCase: number
    passed: boolean
    stdout?: string | null
    expected: string
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultUncheckedCreateWithoutSubmissionInput = {
    id?: string
    testCase: number
    passed: boolean
    stdout?: string | null
    expected: string
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultCreateOrConnectWithoutSubmissionInput = {
    where: TestCaseResultWhereUniqueInput
    create: XOR<TestCaseResultCreateWithoutSubmissionInput, TestCaseResultUncheckedCreateWithoutSubmissionInput>
  }

  export type TestCaseResultCreateManySubmissionInputEnvelope = {
    data: TestCaseResultCreateManySubmissionInput | TestCaseResultCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSubmissionInput = {
    update: XOR<UserUpdateWithoutSubmissionInput, UserUncheckedUpdateWithoutSubmissionInput>
    create: XOR<UserCreateWithoutSubmissionInput, UserUncheckedCreateWithoutSubmissionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmissionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmissionInput, UserUncheckedUpdateWithoutSubmissionInput>
  }

  export type UserUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type ProblemUpsertWithoutSubmissionInput = {
    update: XOR<ProblemUpdateWithoutSubmissionInput, ProblemUncheckedUpdateWithoutSubmissionInput>
    create: XOR<ProblemCreateWithoutSubmissionInput, ProblemUncheckedCreateWithoutSubmissionInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutSubmissionInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutSubmissionInput, ProblemUncheckedUpdateWithoutSubmissionInput>
  }

  export type ProblemUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUpdateManyWithoutProblemNestedInput
    user?: UserUpdateOneRequiredWithoutProblemsNestedInput
    solvedBy?: ProblemSolvedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUncheckedUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUncheckedUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUncheckedUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type TestCaseResultUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: TestCaseResultWhereUniqueInput
    update: XOR<TestCaseResultUpdateWithoutSubmissionInput, TestCaseResultUncheckedUpdateWithoutSubmissionInput>
    create: XOR<TestCaseResultCreateWithoutSubmissionInput, TestCaseResultUncheckedCreateWithoutSubmissionInput>
  }

  export type TestCaseResultUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: TestCaseResultWhereUniqueInput
    data: XOR<TestCaseResultUpdateWithoutSubmissionInput, TestCaseResultUncheckedUpdateWithoutSubmissionInput>
  }

  export type TestCaseResultUpdateManyWithWhereWithoutSubmissionInput = {
    where: TestCaseResultScalarWhereInput
    data: XOR<TestCaseResultUpdateManyMutationInput, TestCaseResultUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type TestCaseResultScalarWhereInput = {
    AND?: TestCaseResultScalarWhereInput | TestCaseResultScalarWhereInput[]
    OR?: TestCaseResultScalarWhereInput[]
    NOT?: TestCaseResultScalarWhereInput | TestCaseResultScalarWhereInput[]
    id?: StringFilter<"TestCaseResult"> | string
    submissionId?: StringFilter<"TestCaseResult"> | string
    testCase?: IntFilter<"TestCaseResult"> | number
    passed?: BoolFilter<"TestCaseResult"> | boolean
    stdout?: StringNullableFilter<"TestCaseResult"> | string | null
    expected?: StringFilter<"TestCaseResult"> | string
    stderr?: StringNullableFilter<"TestCaseResult"> | string | null
    compileOutput?: StringNullableFilter<"TestCaseResult"> | string | null
    status?: StringFilter<"TestCaseResult"> | string
    memory?: StringNullableFilter<"TestCaseResult"> | string | null
    time?: StringNullableFilter<"TestCaseResult"> | string | null
    createdAt?: DateTimeFilter<"TestCaseResult"> | Date | string
    updatedAt?: DateTimeFilter<"TestCaseResult"> | Date | string
  }

  export type SubmissionCreateWithoutTestCasesInput = {
    id?: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionInput
    problem: ProblemCreateNestedOneWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutTestCasesInput = {
    id?: string
    userId: string
    problemId: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutTestCasesInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutTestCasesInput, SubmissionUncheckedCreateWithoutTestCasesInput>
  }

  export type SubmissionUpsertWithoutTestCasesInput = {
    update: XOR<SubmissionUpdateWithoutTestCasesInput, SubmissionUncheckedUpdateWithoutTestCasesInput>
    create: XOR<SubmissionCreateWithoutTestCasesInput, SubmissionUncheckedCreateWithoutTestCasesInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutTestCasesInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutTestCasesInput, SubmissionUncheckedUpdateWithoutTestCasesInput>
  }

  export type SubmissionUpdateWithoutTestCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionNestedInput
    problem?: ProblemUpdateOneRequiredWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutTestCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutProblemSolvedInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutProblemSolvedInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutProblemSolvedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProblemSolvedInput, UserUncheckedCreateWithoutProblemSolvedInput>
  }

  export type ProblemCreateWithoutSolvedByInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationCreateNestedManyWithoutProblemInput
    user: UserCreateNestedOneWithoutProblemsInput
    submission?: SubmissionCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistCreateNestedManyWithoutProblemInput
    reports?: ProblemReportCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutSolvedByInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    userId: string
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationUncheckedCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutProblemInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
    reports?: ProblemReportUncheckedCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutSolvedByInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutSolvedByInput, ProblemUncheckedCreateWithoutSolvedByInput>
  }

  export type UserUpsertWithoutProblemSolvedInput = {
    update: XOR<UserUpdateWithoutProblemSolvedInput, UserUncheckedUpdateWithoutProblemSolvedInput>
    create: XOR<UserCreateWithoutProblemSolvedInput, UserUncheckedCreateWithoutProblemSolvedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProblemSolvedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProblemSolvedInput, UserUncheckedUpdateWithoutProblemSolvedInput>
  }

  export type UserUpdateWithoutProblemSolvedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutProblemSolvedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type ProblemUpsertWithoutSolvedByInput = {
    update: XOR<ProblemUpdateWithoutSolvedByInput, ProblemUncheckedUpdateWithoutSolvedByInput>
    create: XOR<ProblemCreateWithoutSolvedByInput, ProblemUncheckedCreateWithoutSolvedByInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutSolvedByInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutSolvedByInput, ProblemUncheckedUpdateWithoutSolvedByInput>
  }

  export type ProblemUpdateWithoutSolvedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUpdateManyWithoutProblemNestedInput
    user?: UserUpdateOneRequiredWithoutProblemsNestedInput
    submission?: SubmissionUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutSolvedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUncheckedUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUncheckedUpdateManyWithoutProblemNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUncheckedUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemInPlaylistCreateWithoutPlaylistInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutProblemsPlaylistsInput
  }

  export type ProblemInPlaylistUncheckedCreateWithoutPlaylistInput = {
    id?: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInPlaylistCreateOrConnectWithoutPlaylistInput = {
    where: ProblemInPlaylistWhereUniqueInput
    create: XOR<ProblemInPlaylistCreateWithoutPlaylistInput, ProblemInPlaylistUncheckedCreateWithoutPlaylistInput>
  }

  export type ProblemInPlaylistCreateManyPlaylistInputEnvelope = {
    data: ProblemInPlaylistCreateManyPlaylistInput | ProblemInPlaylistCreateManyPlaylistInput[]
    skipDuplicates?: boolean
  }

  export type PlaylistPurchaseCreateWithoutPlaylistInput = {
    id?: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    purchaseDate?: Date | string
    user: UserCreateNestedOneWithoutPlaylistPurchasesInput
  }

  export type PlaylistPurchaseUncheckedCreateWithoutPlaylistInput = {
    id?: string
    userId: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    purchaseDate?: Date | string
  }

  export type PlaylistPurchaseCreateOrConnectWithoutPlaylistInput = {
    where: PlaylistPurchaseWhereUniqueInput
    create: XOR<PlaylistPurchaseCreateWithoutPlaylistInput, PlaylistPurchaseUncheckedCreateWithoutPlaylistInput>
  }

  export type PlaylistPurchaseCreateManyPlaylistInputEnvelope = {
    data: PlaylistPurchaseCreateManyPlaylistInput | PlaylistPurchaseCreateManyPlaylistInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutPlaylistsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutPlaylistsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutPlaylistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
  }

  export type ProblemInPlaylistUpsertWithWhereUniqueWithoutPlaylistInput = {
    where: ProblemInPlaylistWhereUniqueInput
    update: XOR<ProblemInPlaylistUpdateWithoutPlaylistInput, ProblemInPlaylistUncheckedUpdateWithoutPlaylistInput>
    create: XOR<ProblemInPlaylistCreateWithoutPlaylistInput, ProblemInPlaylistUncheckedCreateWithoutPlaylistInput>
  }

  export type ProblemInPlaylistUpdateWithWhereUniqueWithoutPlaylistInput = {
    where: ProblemInPlaylistWhereUniqueInput
    data: XOR<ProblemInPlaylistUpdateWithoutPlaylistInput, ProblemInPlaylistUncheckedUpdateWithoutPlaylistInput>
  }

  export type ProblemInPlaylistUpdateManyWithWhereWithoutPlaylistInput = {
    where: ProblemInPlaylistScalarWhereInput
    data: XOR<ProblemInPlaylistUpdateManyMutationInput, ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistInput>
  }

  export type PlaylistPurchaseUpsertWithWhereUniqueWithoutPlaylistInput = {
    where: PlaylistPurchaseWhereUniqueInput
    update: XOR<PlaylistPurchaseUpdateWithoutPlaylistInput, PlaylistPurchaseUncheckedUpdateWithoutPlaylistInput>
    create: XOR<PlaylistPurchaseCreateWithoutPlaylistInput, PlaylistPurchaseUncheckedCreateWithoutPlaylistInput>
  }

  export type PlaylistPurchaseUpdateWithWhereUniqueWithoutPlaylistInput = {
    where: PlaylistPurchaseWhereUniqueInput
    data: XOR<PlaylistPurchaseUpdateWithoutPlaylistInput, PlaylistPurchaseUncheckedUpdateWithoutPlaylistInput>
  }

  export type PlaylistPurchaseUpdateManyWithWhereWithoutPlaylistInput = {
    where: PlaylistPurchaseScalarWhereInput
    data: XOR<PlaylistPurchaseUpdateManyMutationInput, PlaylistPurchaseUncheckedUpdateManyWithoutPlaylistInput>
  }

  export type UserUpsertWithoutPlaylistsInput = {
    update: XOR<UserUpdateWithoutPlaylistsInput, UserUncheckedUpdateWithoutPlaylistsInput>
    create: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlaylistsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlaylistsInput, UserUncheckedUpdateWithoutPlaylistsInput>
  }

  export type UserUpdateWithoutPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type UserCreateWithoutPlaylistPurchasesInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutPlaylistPurchasesInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutPlaylistPurchasesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlaylistPurchasesInput, UserUncheckedCreateWithoutPlaylistPurchasesInput>
  }

  export type PlaylistCreateWithoutPurchasesInput = {
    id?: string
    name: string
    description?: string | null
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemInPlaylistCreateNestedManyWithoutPlaylistInput
    user: UserCreateNestedOneWithoutPlaylistsInput
  }

  export type PlaylistUncheckedCreateWithoutPurchasesInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    problems?: ProblemInPlaylistUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistCreateOrConnectWithoutPurchasesInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutPurchasesInput, PlaylistUncheckedCreateWithoutPurchasesInput>
  }

  export type UserUpsertWithoutPlaylistPurchasesInput = {
    update: XOR<UserUpdateWithoutPlaylistPurchasesInput, UserUncheckedUpdateWithoutPlaylistPurchasesInput>
    create: XOR<UserCreateWithoutPlaylistPurchasesInput, UserUncheckedCreateWithoutPlaylistPurchasesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlaylistPurchasesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlaylistPurchasesInput, UserUncheckedUpdateWithoutPlaylistPurchasesInput>
  }

  export type UserUpdateWithoutPlaylistPurchasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutPlaylistPurchasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type PlaylistUpsertWithoutPurchasesInput = {
    update: XOR<PlaylistUpdateWithoutPurchasesInput, PlaylistUncheckedUpdateWithoutPurchasesInput>
    create: XOR<PlaylistCreateWithoutPurchasesInput, PlaylistUncheckedCreateWithoutPurchasesInput>
    where?: PlaylistWhereInput
  }

  export type PlaylistUpdateToOneWithWhereWithoutPurchasesInput = {
    where?: PlaylistWhereInput
    data: XOR<PlaylistUpdateWithoutPurchasesInput, PlaylistUncheckedUpdateWithoutPurchasesInput>
  }

  export type PlaylistUpdateWithoutPurchasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemInPlaylistUpdateManyWithoutPlaylistNestedInput
    user?: UserUpdateOneRequiredWithoutPlaylistsNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutPurchasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistCreateWithoutProblemsInput = {
    id?: string
    name: string
    description?: string | null
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    purchases?: PlaylistPurchaseCreateNestedManyWithoutPlaylistInput
    user: UserCreateNestedOneWithoutPlaylistsInput
  }

  export type PlaylistUncheckedCreateWithoutProblemsInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    purchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistCreateOrConnectWithoutProblemsInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutProblemsInput, PlaylistUncheckedCreateWithoutProblemsInput>
  }

  export type ProblemCreateWithoutProblemsPlaylistsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationCreateNestedManyWithoutProblemInput
    user: UserCreateNestedOneWithoutProblemsInput
    submission?: SubmissionCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedCreateNestedManyWithoutProblemInput
    reports?: ProblemReportCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutProblemsPlaylistsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    userId: string
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationUncheckedCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutProblemInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
    reports?: ProblemReportUncheckedCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutProblemsPlaylistsInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutProblemsPlaylistsInput, ProblemUncheckedCreateWithoutProblemsPlaylistsInput>
  }

  export type PlaylistUpsertWithoutProblemsInput = {
    update: XOR<PlaylistUpdateWithoutProblemsInput, PlaylistUncheckedUpdateWithoutProblemsInput>
    create: XOR<PlaylistCreateWithoutProblemsInput, PlaylistUncheckedCreateWithoutProblemsInput>
    where?: PlaylistWhereInput
  }

  export type PlaylistUpdateToOneWithWhereWithoutProblemsInput = {
    where?: PlaylistWhereInput
    data: XOR<PlaylistUpdateWithoutProblemsInput, PlaylistUncheckedUpdateWithoutProblemsInput>
  }

  export type PlaylistUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchases?: PlaylistPurchaseUpdateManyWithoutPlaylistNestedInput
    user?: UserUpdateOneRequiredWithoutPlaylistsNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchases?: PlaylistPurchaseUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type ProblemUpsertWithoutProblemsPlaylistsInput = {
    update: XOR<ProblemUpdateWithoutProblemsPlaylistsInput, ProblemUncheckedUpdateWithoutProblemsPlaylistsInput>
    create: XOR<ProblemCreateWithoutProblemsPlaylistsInput, ProblemUncheckedCreateWithoutProblemsPlaylistsInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutProblemsPlaylistsInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutProblemsPlaylistsInput, ProblemUncheckedUpdateWithoutProblemsPlaylistsInput>
  }

  export type ProblemUpdateWithoutProblemsPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUpdateManyWithoutProblemNestedInput
    user?: UserUpdateOneRequiredWithoutProblemsNestedInput
    submission?: SubmissionUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutProblemsPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUncheckedUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUncheckedUpdateManyWithoutProblemNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUncheckedUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemCreateWithoutReportsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationCreateNestedManyWithoutProblemInput
    user: UserCreateNestedOneWithoutProblemsInput
    submission?: SubmissionCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutReportsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    userId: string
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationUncheckedCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutProblemInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutReportsInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutReportsInput, ProblemUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutSubmittedReportsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutSubmittedReportsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutSubmittedReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmittedReportsInput, UserUncheckedCreateWithoutSubmittedReportsInput>
  }

  export type ProblemUpsertWithoutReportsInput = {
    update: XOR<ProblemUpdateWithoutReportsInput, ProblemUncheckedUpdateWithoutReportsInput>
    create: XOR<ProblemCreateWithoutReportsInput, ProblemUncheckedCreateWithoutReportsInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutReportsInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutReportsInput, ProblemUncheckedUpdateWithoutReportsInput>
  }

  export type ProblemUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUpdateManyWithoutProblemNestedInput
    user?: UserUpdateOneRequiredWithoutProblemsNestedInput
    submission?: SubmissionUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUncheckedUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUncheckedUpdateManyWithoutProblemNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type UserUpsertWithoutSubmittedReportsInput = {
    update: XOR<UserUpdateWithoutSubmittedReportsInput, UserUncheckedUpdateWithoutSubmittedReportsInput>
    create: XOR<UserCreateWithoutSubmittedReportsInput, UserUncheckedCreateWithoutSubmittedReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmittedReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmittedReportsInput, UserUncheckedUpdateWithoutSubmittedReportsInput>
  }

  export type UserUpdateWithoutSubmittedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmittedReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type ProblemCreateWithoutDiscussionsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationCreateNestedManyWithoutProblemInput
    user: UserCreateNestedOneWithoutProblemsInput
    submission?: SubmissionCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistCreateNestedManyWithoutProblemInput
    reports?: ProblemReportCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutDiscussionsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    userId: string
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationUncheckedCreateNestedManyWithoutProblemInput
    collaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutProblemInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
    reports?: ProblemReportUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutDiscussionsInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutDiscussionsInput, ProblemUncheckedCreateWithoutDiscussionsInput>
  }

  export type DiscussionMessageCreateWithoutDiscussionInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDiscussionMessagesInput
    replies?: DiscussionReplyCreateNestedManyWithoutMessageInput
    upvotes?: DiscussionUpvoteCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageUncheckedCreateWithoutDiscussionInput = {
    id?: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: DiscussionReplyUncheckedCreateNestedManyWithoutMessageInput
    upvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageCreateOrConnectWithoutDiscussionInput = {
    where: DiscussionMessageWhereUniqueInput
    create: XOR<DiscussionMessageCreateWithoutDiscussionInput, DiscussionMessageUncheckedCreateWithoutDiscussionInput>
  }

  export type DiscussionMessageCreateManyDiscussionInputEnvelope = {
    data: DiscussionMessageCreateManyDiscussionInput | DiscussionMessageCreateManyDiscussionInput[]
    skipDuplicates?: boolean
  }

  export type ProblemUpsertWithoutDiscussionsInput = {
    update: XOR<ProblemUpdateWithoutDiscussionsInput, ProblemUncheckedUpdateWithoutDiscussionsInput>
    create: XOR<ProblemCreateWithoutDiscussionsInput, ProblemUncheckedCreateWithoutDiscussionsInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutDiscussionsInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutDiscussionsInput, ProblemUncheckedUpdateWithoutDiscussionsInput>
  }

  export type ProblemUpdateWithoutDiscussionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUpdateManyWithoutProblemNestedInput
    user?: UserUpdateOneRequiredWithoutProblemsNestedInput
    submission?: SubmissionUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutDiscussionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUncheckedUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUncheckedUpdateManyWithoutProblemNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type DiscussionMessageUpsertWithWhereUniqueWithoutDiscussionInput = {
    where: DiscussionMessageWhereUniqueInput
    update: XOR<DiscussionMessageUpdateWithoutDiscussionInput, DiscussionMessageUncheckedUpdateWithoutDiscussionInput>
    create: XOR<DiscussionMessageCreateWithoutDiscussionInput, DiscussionMessageUncheckedCreateWithoutDiscussionInput>
  }

  export type DiscussionMessageUpdateWithWhereUniqueWithoutDiscussionInput = {
    where: DiscussionMessageWhereUniqueInput
    data: XOR<DiscussionMessageUpdateWithoutDiscussionInput, DiscussionMessageUncheckedUpdateWithoutDiscussionInput>
  }

  export type DiscussionMessageUpdateManyWithWhereWithoutDiscussionInput = {
    where: DiscussionMessageScalarWhereInput
    data: XOR<DiscussionMessageUpdateManyMutationInput, DiscussionMessageUncheckedUpdateManyWithoutDiscussionInput>
  }

  export type ProblemDiscussionCreateWithoutMessagesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    problem: ProblemCreateNestedOneWithoutDiscussionsInput
  }

  export type ProblemDiscussionUncheckedCreateWithoutMessagesInput = {
    id?: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemDiscussionCreateOrConnectWithoutMessagesInput = {
    where: ProblemDiscussionWhereUniqueInput
    create: XOR<ProblemDiscussionCreateWithoutMessagesInput, ProblemDiscussionUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutDiscussionMessagesInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutDiscussionMessagesInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutDiscussionMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDiscussionMessagesInput, UserUncheckedCreateWithoutDiscussionMessagesInput>
  }

  export type DiscussionReplyCreateWithoutMessageInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDiscussionRepliesInput
  }

  export type DiscussionReplyUncheckedCreateWithoutMessageInput = {
    id?: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionReplyCreateOrConnectWithoutMessageInput = {
    where: DiscussionReplyWhereUniqueInput
    create: XOR<DiscussionReplyCreateWithoutMessageInput, DiscussionReplyUncheckedCreateWithoutMessageInput>
  }

  export type DiscussionReplyCreateManyMessageInputEnvelope = {
    data: DiscussionReplyCreateManyMessageInput | DiscussionReplyCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type DiscussionUpvoteCreateWithoutMessageInput = {
    id?: string
    user: UserCreateNestedOneWithoutDiscussionUpvotesInput
  }

  export type DiscussionUpvoteUncheckedCreateWithoutMessageInput = {
    id?: string
    userId: string
  }

  export type DiscussionUpvoteCreateOrConnectWithoutMessageInput = {
    where: DiscussionUpvoteWhereUniqueInput
    create: XOR<DiscussionUpvoteCreateWithoutMessageInput, DiscussionUpvoteUncheckedCreateWithoutMessageInput>
  }

  export type DiscussionUpvoteCreateManyMessageInputEnvelope = {
    data: DiscussionUpvoteCreateManyMessageInput | DiscussionUpvoteCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type ProblemDiscussionUpsertWithoutMessagesInput = {
    update: XOR<ProblemDiscussionUpdateWithoutMessagesInput, ProblemDiscussionUncheckedUpdateWithoutMessagesInput>
    create: XOR<ProblemDiscussionCreateWithoutMessagesInput, ProblemDiscussionUncheckedCreateWithoutMessagesInput>
    where?: ProblemDiscussionWhereInput
  }

  export type ProblemDiscussionUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ProblemDiscussionWhereInput
    data: XOR<ProblemDiscussionUpdateWithoutMessagesInput, ProblemDiscussionUncheckedUpdateWithoutMessagesInput>
  }

  export type ProblemDiscussionUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutDiscussionsNestedInput
  }

  export type ProblemDiscussionUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutDiscussionMessagesInput = {
    update: XOR<UserUpdateWithoutDiscussionMessagesInput, UserUncheckedUpdateWithoutDiscussionMessagesInput>
    create: XOR<UserCreateWithoutDiscussionMessagesInput, UserUncheckedCreateWithoutDiscussionMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDiscussionMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDiscussionMessagesInput, UserUncheckedUpdateWithoutDiscussionMessagesInput>
  }

  export type UserUpdateWithoutDiscussionMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutDiscussionMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type DiscussionReplyUpsertWithWhereUniqueWithoutMessageInput = {
    where: DiscussionReplyWhereUniqueInput
    update: XOR<DiscussionReplyUpdateWithoutMessageInput, DiscussionReplyUncheckedUpdateWithoutMessageInput>
    create: XOR<DiscussionReplyCreateWithoutMessageInput, DiscussionReplyUncheckedCreateWithoutMessageInput>
  }

  export type DiscussionReplyUpdateWithWhereUniqueWithoutMessageInput = {
    where: DiscussionReplyWhereUniqueInput
    data: XOR<DiscussionReplyUpdateWithoutMessageInput, DiscussionReplyUncheckedUpdateWithoutMessageInput>
  }

  export type DiscussionReplyUpdateManyWithWhereWithoutMessageInput = {
    where: DiscussionReplyScalarWhereInput
    data: XOR<DiscussionReplyUpdateManyMutationInput, DiscussionReplyUncheckedUpdateManyWithoutMessageInput>
  }

  export type DiscussionUpvoteUpsertWithWhereUniqueWithoutMessageInput = {
    where: DiscussionUpvoteWhereUniqueInput
    update: XOR<DiscussionUpvoteUpdateWithoutMessageInput, DiscussionUpvoteUncheckedUpdateWithoutMessageInput>
    create: XOR<DiscussionUpvoteCreateWithoutMessageInput, DiscussionUpvoteUncheckedCreateWithoutMessageInput>
  }

  export type DiscussionUpvoteUpdateWithWhereUniqueWithoutMessageInput = {
    where: DiscussionUpvoteWhereUniqueInput
    data: XOR<DiscussionUpvoteUpdateWithoutMessageInput, DiscussionUpvoteUncheckedUpdateWithoutMessageInput>
  }

  export type DiscussionUpvoteUpdateManyWithWhereWithoutMessageInput = {
    where: DiscussionUpvoteScalarWhereInput
    data: XOR<DiscussionUpvoteUpdateManyMutationInput, DiscussionUpvoteUncheckedUpdateManyWithoutMessageInput>
  }

  export type DiscussionMessageCreateWithoutRepliesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    discussion: ProblemDiscussionCreateNestedOneWithoutMessagesInput
    user: UserCreateNestedOneWithoutDiscussionMessagesInput
    upvotes?: DiscussionUpvoteCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageUncheckedCreateWithoutRepliesInput = {
    id?: string
    discussionId: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    upvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageCreateOrConnectWithoutRepliesInput = {
    where: DiscussionMessageWhereUniqueInput
    create: XOR<DiscussionMessageCreateWithoutRepliesInput, DiscussionMessageUncheckedCreateWithoutRepliesInput>
  }

  export type UserCreateWithoutDiscussionRepliesInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutDiscussionRepliesInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutDiscussionRepliesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDiscussionRepliesInput, UserUncheckedCreateWithoutDiscussionRepliesInput>
  }

  export type DiscussionMessageUpsertWithoutRepliesInput = {
    update: XOR<DiscussionMessageUpdateWithoutRepliesInput, DiscussionMessageUncheckedUpdateWithoutRepliesInput>
    create: XOR<DiscussionMessageCreateWithoutRepliesInput, DiscussionMessageUncheckedCreateWithoutRepliesInput>
    where?: DiscussionMessageWhereInput
  }

  export type DiscussionMessageUpdateToOneWithWhereWithoutRepliesInput = {
    where?: DiscussionMessageWhereInput
    data: XOR<DiscussionMessageUpdateWithoutRepliesInput, DiscussionMessageUncheckedUpdateWithoutRepliesInput>
  }

  export type DiscussionMessageUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussion?: ProblemDiscussionUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutDiscussionMessagesNestedInput
    upvotes?: DiscussionUpvoteUpdateManyWithoutMessageNestedInput
  }

  export type DiscussionMessageUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    discussionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    upvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type UserUpsertWithoutDiscussionRepliesInput = {
    update: XOR<UserUpdateWithoutDiscussionRepliesInput, UserUncheckedUpdateWithoutDiscussionRepliesInput>
    create: XOR<UserCreateWithoutDiscussionRepliesInput, UserUncheckedCreateWithoutDiscussionRepliesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDiscussionRepliesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDiscussionRepliesInput, UserUncheckedUpdateWithoutDiscussionRepliesInput>
  }

  export type UserUpdateWithoutDiscussionRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutDiscussionRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type UserCreateWithoutDiscussionUpvotesInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutDiscussionUpvotesInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutDiscussionUpvotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDiscussionUpvotesInput, UserUncheckedCreateWithoutDiscussionUpvotesInput>
  }

  export type DiscussionMessageCreateWithoutUpvotesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    discussion: ProblemDiscussionCreateNestedOneWithoutMessagesInput
    user: UserCreateNestedOneWithoutDiscussionMessagesInput
    replies?: DiscussionReplyCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageUncheckedCreateWithoutUpvotesInput = {
    id?: string
    discussionId: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    replies?: DiscussionReplyUncheckedCreateNestedManyWithoutMessageInput
  }

  export type DiscussionMessageCreateOrConnectWithoutUpvotesInput = {
    where: DiscussionMessageWhereUniqueInput
    create: XOR<DiscussionMessageCreateWithoutUpvotesInput, DiscussionMessageUncheckedCreateWithoutUpvotesInput>
  }

  export type UserUpsertWithoutDiscussionUpvotesInput = {
    update: XOR<UserUpdateWithoutDiscussionUpvotesInput, UserUncheckedUpdateWithoutDiscussionUpvotesInput>
    create: XOR<UserCreateWithoutDiscussionUpvotesInput, UserUncheckedCreateWithoutDiscussionUpvotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDiscussionUpvotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDiscussionUpvotesInput, UserUncheckedUpdateWithoutDiscussionUpvotesInput>
  }

  export type UserUpdateWithoutDiscussionUpvotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutDiscussionUpvotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type DiscussionMessageUpsertWithoutUpvotesInput = {
    update: XOR<DiscussionMessageUpdateWithoutUpvotesInput, DiscussionMessageUncheckedUpdateWithoutUpvotesInput>
    create: XOR<DiscussionMessageCreateWithoutUpvotesInput, DiscussionMessageUncheckedCreateWithoutUpvotesInput>
    where?: DiscussionMessageWhereInput
  }

  export type DiscussionMessageUpdateToOneWithWhereWithoutUpvotesInput = {
    where?: DiscussionMessageWhereInput
    data: XOR<DiscussionMessageUpdateWithoutUpvotesInput, DiscussionMessageUncheckedUpdateWithoutUpvotesInput>
  }

  export type DiscussionMessageUpdateWithoutUpvotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussion?: ProblemDiscussionUpdateOneRequiredWithoutMessagesNestedInput
    user?: UserUpdateOneRequiredWithoutDiscussionMessagesNestedInput
    replies?: DiscussionReplyUpdateManyWithoutMessageNestedInput
  }

  export type DiscussionMessageUncheckedUpdateWithoutUpvotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    discussionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: DiscussionReplyUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type ProblemCreateWithoutInvitationsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    collaborations?: ProblemCollaborationCreateNestedManyWithoutProblemInput
    user: UserCreateNestedOneWithoutProblemsInput
    submission?: SubmissionCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistCreateNestedManyWithoutProblemInput
    reports?: ProblemReportCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutInvitationsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    userId: string
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    collaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutProblemInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
    reports?: ProblemReportUncheckedCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutInvitationsInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutInvitationsInput, ProblemUncheckedCreateWithoutInvitationsInput>
  }

  export type UserCreateWithoutSentInvitationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutSentInvitationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutSentInvitationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentInvitationsInput, UserUncheckedCreateWithoutSentInvitationsInput>
  }

  export type UserCreateWithoutReceivedInvitationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutReceivedInvitationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutReceivedInvitationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedInvitationsInput, UserUncheckedCreateWithoutReceivedInvitationsInput>
  }

  export type ProblemUpsertWithoutInvitationsInput = {
    update: XOR<ProblemUpdateWithoutInvitationsInput, ProblemUncheckedUpdateWithoutInvitationsInput>
    create: XOR<ProblemCreateWithoutInvitationsInput, ProblemUncheckedCreateWithoutInvitationsInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutInvitationsInput, ProblemUncheckedUpdateWithoutInvitationsInput>
  }

  export type ProblemUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collaborations?: ProblemCollaborationUpdateManyWithoutProblemNestedInput
    user?: UserUpdateOneRequiredWithoutProblemsNestedInput
    submission?: SubmissionUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    collaborations?: ProblemCollaborationUncheckedUpdateManyWithoutProblemNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUncheckedUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type UserUpsertWithoutSentInvitationsInput = {
    update: XOR<UserUpdateWithoutSentInvitationsInput, UserUncheckedUpdateWithoutSentInvitationsInput>
    create: XOR<UserCreateWithoutSentInvitationsInput, UserUncheckedCreateWithoutSentInvitationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentInvitationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentInvitationsInput, UserUncheckedUpdateWithoutSentInvitationsInput>
  }

  export type UserUpdateWithoutSentInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutSentInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUpsertWithoutReceivedInvitationsInput = {
    update: XOR<UserUpdateWithoutReceivedInvitationsInput, UserUncheckedUpdateWithoutReceivedInvitationsInput>
    create: XOR<UserCreateWithoutReceivedInvitationsInput, UserUncheckedCreateWithoutReceivedInvitationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedInvitationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedInvitationsInput, UserUncheckedUpdateWithoutReceivedInvitationsInput>
  }

  export type UserUpdateWithoutReceivedInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type ProblemCreateWithoutCollaborationsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationCreateNestedManyWithoutProblemInput
    user: UserCreateNestedOneWithoutProblemsInput
    submission?: SubmissionCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistCreateNestedManyWithoutProblemInput
    reports?: ProblemReportCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutCollaborationsInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    userId: string
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    invitations?: ProblemInvitationUncheckedCreateNestedManyWithoutProblemInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutProblemInput
    solvedBy?: ProblemSolvedUncheckedCreateNestedManyWithoutProblemInput
    problemsPlaylists?: ProblemInPlaylistUncheckedCreateNestedManyWithoutProblemInput
    reports?: ProblemReportUncheckedCreateNestedManyWithoutProblemInput
    discussions?: ProblemDiscussionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutCollaborationsInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutCollaborationsInput, ProblemUncheckedCreateWithoutCollaborationsInput>
  }

  export type UserCreateWithoutInitiatedCollaborationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInitiatedCollaborationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    participatingCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutParticipantsInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInitiatedCollaborationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInitiatedCollaborationsInput, UserUncheckedCreateWithoutInitiatedCollaborationsInput>
  }

  export type UserCreateWithoutParticipatingCollaborationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowCreateNestedManyWithoutFollowingInput
    following?: FollowCreateNestedManyWithoutFollowerInput
    problems?: ProblemCreateNestedManyWithoutUserInput
    submission?: SubmissionCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationCreateNestedManyWithoutReceiverInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationCreateNestedManyWithoutInitiatorInput
  }

  export type UserUncheckedCreateWithoutParticipatingCollaborationsInput = {
    id?: string
    name: string
    username: string
    bio?: string | null
    linkedin?: string | null
    portfolio?: string | null
    email: string
    image?: string | null
    role?: $Enums.UserRole
    password: string
    forgotPasswordOtp?: string | null
    forgotPasswordOtpExpiry?: Date | string | null
    provider?: string | null
    currentStreak?: number
    longestStreak?: number
    lastSolvedDate?: Date | string | null
    followerCount?: number
    followingCount?: number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    followers?: FollowUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowUncheckedCreateNestedManyWithoutFollowerInput
    problems?: ProblemUncheckedCreateNestedManyWithoutUserInput
    submission?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    problemSolved?: ProblemSolvedUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    submittedReports?: ProblemReportUncheckedCreateNestedManyWithoutUserInput
    discussionMessages?: DiscussionMessageUncheckedCreateNestedManyWithoutUserInput
    discussionReplies?: DiscussionReplyUncheckedCreateNestedManyWithoutUserInput
    discussionUpvotes?: DiscussionUpvoteUncheckedCreateNestedManyWithoutUserInput
    playlistPurchases?: PlaylistPurchaseUncheckedCreateNestedManyWithoutUserInput
    sentInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutSenderInput
    receivedInvitations?: ProblemInvitationUncheckedCreateNestedManyWithoutReceiverInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    initiatedCollaborations?: ProblemCollaborationUncheckedCreateNestedManyWithoutInitiatorInput
  }

  export type UserCreateOrConnectWithoutParticipatingCollaborationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParticipatingCollaborationsInput, UserUncheckedCreateWithoutParticipatingCollaborationsInput>
  }

  export type ProblemUpsertWithoutCollaborationsInput = {
    update: XOR<ProblemUpdateWithoutCollaborationsInput, ProblemUncheckedUpdateWithoutCollaborationsInput>
    create: XOR<ProblemCreateWithoutCollaborationsInput, ProblemUncheckedCreateWithoutCollaborationsInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutCollaborationsInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutCollaborationsInput, ProblemUncheckedUpdateWithoutCollaborationsInput>
  }

  export type ProblemUpdateWithoutCollaborationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUpdateManyWithoutProblemNestedInput
    user?: UserUpdateOneRequiredWithoutProblemsNestedInput
    submission?: SubmissionUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutCollaborationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    userId?: StringFieldUpdateOperationsInput | string
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUncheckedUpdateManyWithoutProblemNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUncheckedUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type UserUpsertWithoutInitiatedCollaborationsInput = {
    update: XOR<UserUpdateWithoutInitiatedCollaborationsInput, UserUncheckedUpdateWithoutInitiatedCollaborationsInput>
    create: XOR<UserCreateWithoutInitiatedCollaborationsInput, UserUncheckedCreateWithoutInitiatedCollaborationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInitiatedCollaborationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInitiatedCollaborationsInput, UserUncheckedUpdateWithoutInitiatedCollaborationsInput>
  }

  export type UserUpdateWithoutInitiatedCollaborationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInitiatedCollaborationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    participatingCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutParticipantsNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutParticipatingCollaborationsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutParticipatingCollaborationsInput, UserUncheckedUpdateWithoutParticipatingCollaborationsInput>
    create: XOR<UserCreateWithoutParticipatingCollaborationsInput, UserUncheckedCreateWithoutParticipatingCollaborationsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutParticipatingCollaborationsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutParticipatingCollaborationsInput, UserUncheckedUpdateWithoutParticipatingCollaborationsInput>
  }

  export type UserUpdateManyWithWhereWithoutParticipatingCollaborationsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutParticipatingCollaborationsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    bio?: StringNullableFilter<"User"> | string | null
    linkedin?: StringNullableFilter<"User"> | string | null
    portfolio?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    password?: StringFilter<"User"> | string
    forgotPasswordOtp?: StringNullableFilter<"User"> | string | null
    forgotPasswordOtpExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    provider?: StringNullableFilter<"User"> | string | null
    currentStreak?: IntFilter<"User"> | number
    longestStreak?: IntFilter<"User"> | number
    lastSolvedDate?: DateTimeNullableFilter<"User"> | Date | string | null
    followerCount?: IntFilter<"User"> | number
    followingCount?: IntFilter<"User"> | number
    badges?: JsonFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type FollowCreateManyFollowingInput = {
    id?: string
    followerId: string
    createdAt?: Date | string
  }

  export type FollowCreateManyFollowerInput = {
    id?: string
    followingId: string
    createdAt?: Date | string
  }

  export type ProblemCreateManyUserInput = {
    id?: string
    title: string
    description: string
    difficulty: $Enums.Difficulty
    tags?: ProblemCreatetagsInput | string[]
    examples: JsonNullValueInput | InputJsonValue
    constraints: string
    hints?: string | null
    editorial?: string | null
    testcases: JsonNullValueInput | InputJsonValue
    codeSnippets: JsonNullValueInput | InputJsonValue
    referenceSolutions: JsonNullValueInput | InputJsonValue
    isPaid?: boolean
    askedIn?: ProblemCreateaskedInInput | string[]
    likes?: number
    dislikes?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionCreateManyUserInput = {
    id?: string
    problemId: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemSolvedCreateManyUserInput = {
    id?: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    isPaid?: boolean
    price?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemReportCreateManyUserInput = {
    id?: string
    problemId: string
    reason: $Enums.ReportReason
    description?: string | null
    status?: string
    createdAt?: Date | string
  }

  export type DiscussionMessageCreateManyUserInput = {
    id?: string
    discussionId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionReplyCreateManyUserInput = {
    id?: string
    messageId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionUpvoteCreateManyUserInput = {
    id?: string
    messageId: string
  }

  export type PlaylistPurchaseCreateManyUserInput = {
    id?: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    playlistId: string
    purchaseDate?: Date | string
  }

  export type ProblemInvitationCreateManySenderInput = {
    id?: string
    problemId: string
    receiverId: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInvitationCreateManyReceiverInput = {
    id?: string
    problemId: string
    senderId: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: $Enums.NotificationType
    content: string
    isRead?: boolean
    referenceId?: string | null
    createdAt?: Date | string
  }

  export type ProblemCollaborationCreateManyInitiatorInput = {
    id?: string
    problemId: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follower?: UserUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    followerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    following?: UserUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowUncheckedUpdateWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUncheckedUpdateManyWithoutFollowerInput = {
    id?: StringFieldUpdateOperationsInput | string
    followingId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUpdateManyWithoutProblemNestedInput
    submission?: SubmissionUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    invitations?: ProblemInvitationUncheckedUpdateManyWithoutProblemNestedInput
    collaborations?: ProblemCollaborationUncheckedUpdateManyWithoutProblemNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutProblemNestedInput
    solvedBy?: ProblemSolvedUncheckedUpdateManyWithoutProblemNestedInput
    problemsPlaylists?: ProblemInPlaylistUncheckedUpdateManyWithoutProblemNestedInput
    reports?: ProblemReportUncheckedUpdateManyWithoutProblemNestedInput
    discussions?: ProblemDiscussionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    tags?: ProblemUpdatetagsInput | string[]
    examples?: JsonNullValueInput | InputJsonValue
    constraints?: StringFieldUpdateOperationsInput | string
    hints?: NullableStringFieldUpdateOperationsInput | string | null
    editorial?: NullableStringFieldUpdateOperationsInput | string | null
    testcases?: JsonNullValueInput | InputJsonValue
    codeSnippets?: JsonNullValueInput | InputJsonValue
    referenceSolutions?: JsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    askedIn?: ProblemUpdateaskedInInput | string[]
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutSubmissionNestedInput
    testCases?: TestCaseResultUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCases?: TestCaseResultUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemSolvedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutSolvedByNestedInput
  }

  export type ProblemSolvedUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemSolvedUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemInPlaylistUpdateManyWithoutPlaylistNestedInput
    purchases?: PlaylistPurchaseUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problems?: ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput
    purchases?: PlaylistPurchaseUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemReportUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ProblemReportUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemReportUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionMessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    discussion?: ProblemDiscussionUpdateOneRequiredWithoutMessagesNestedInput
    replies?: DiscussionReplyUpdateManyWithoutMessageNestedInput
    upvotes?: DiscussionUpvoteUpdateManyWithoutMessageNestedInput
  }

  export type DiscussionMessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    discussionId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: DiscussionReplyUncheckedUpdateManyWithoutMessageNestedInput
    upvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type DiscussionMessageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    discussionId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionReplyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: DiscussionMessageUpdateOneRequiredWithoutRepliesNestedInput
  }

  export type DiscussionReplyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionReplyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionUpvoteUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: DiscussionMessageUpdateOneRequiredWithoutUpvotesNestedInput
  }

  export type DiscussionUpvoteUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
  }

  export type DiscussionUpvoteUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
  }

  export type PlaylistPurchaseUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    playlist?: PlaylistUpdateOneRequiredWithoutPurchasesNestedInput
  }

  export type PlaylistPurchaseUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistPurchaseUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInvitationUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutInvitationsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitationsNestedInput
  }

  export type ProblemInvitationUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInvitationUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInvitationUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutInvitationsNestedInput
    sender?: UserUpdateOneRequiredWithoutSentInvitationsNestedInput
  }

  export type ProblemInvitationUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInvitationUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemCollaborationUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutCollaborationsNestedInput
    initiator?: UserUpdateOneRequiredWithoutInitiatedCollaborationsNestedInput
  }

  export type ProblemCollaborationUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemCollaborationUncheckedUpdateManyWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    content?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemCollaborationUpdateWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutCollaborationsNestedInput
    participants?: UserUpdateManyWithoutParticipatingCollaborationsNestedInput
  }

  export type ProblemCollaborationUncheckedUpdateWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUncheckedUpdateManyWithoutParticipatingCollaborationsNestedInput
  }

  export type ProblemCollaborationUncheckedUpdateManyWithoutInitiatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInvitationCreateManyProblemInput = {
    id?: string
    senderId: string
    receiverId: string
    status?: $Enums.InvitationStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemCollaborationCreateManyProblemInput = {
    id?: string
    initiatorId: string
    maxParticipants?: number
    currentCode: string
    language: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionCreateManyProblemInput = {
    id?: string
    userId: string
    sourceCode: string
    language: string
    stdin?: string | null
    stdout?: string | null
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemSolvedCreateManyProblemInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInPlaylistCreateManyProblemInput = {
    id?: string
    playlistId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemReportCreateManyProblemInput = {
    id?: string
    userId: string
    reason: $Enums.ReportReason
    description?: string | null
    status?: string
    createdAt?: Date | string
  }

  export type ProblemDiscussionCreateManyProblemInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProblemInvitationUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutSentInvitationsNestedInput
    receiver?: UserUpdateOneRequiredWithoutReceivedInvitationsNestedInput
  }

  export type ProblemInvitationUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInvitationUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemCollaborationUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    initiator?: UserUpdateOneRequiredWithoutInitiatedCollaborationsNestedInput
    participants?: UserUpdateManyWithoutParticipatingCollaborationsNestedInput
  }

  export type ProblemCollaborationUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: UserUncheckedUpdateManyWithoutParticipatingCollaborationsNestedInput
  }

  export type ProblemCollaborationUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    initiatorId?: StringFieldUpdateOperationsInput | string
    maxParticipants?: IntFieldUpdateOperationsInput | number
    currentCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionNestedInput
    testCases?: TestCaseResultUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testCases?: TestCaseResultUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sourceCode?: StringFieldUpdateOperationsInput | string
    language?: StringFieldUpdateOperationsInput | string
    stdin?: NullableStringFieldUpdateOperationsInput | string | null
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemSolvedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProblemSolvedNestedInput
  }

  export type ProblemSolvedUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemSolvedUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInPlaylistUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlist?: PlaylistUpdateOneRequiredWithoutProblemsNestedInput
  }

  export type ProblemInPlaylistUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInPlaylistUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemReportUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmittedReportsNestedInput
  }

  export type ProblemReportUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemReportUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    reason?: EnumReportReasonFieldUpdateOperationsInput | $Enums.ReportReason
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemDiscussionUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: DiscussionMessageUpdateManyWithoutDiscussionNestedInput
  }

  export type ProblemDiscussionUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: DiscussionMessageUncheckedUpdateManyWithoutDiscussionNestedInput
  }

  export type ProblemDiscussionUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultCreateManySubmissionInput = {
    id?: string
    testCase: number
    passed: boolean
    stdout?: string | null
    expected: string
    stderr?: string | null
    compileOutput?: string | null
    status: string
    memory?: string | null
    time?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TestCaseResultUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCase?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    expected?: StringFieldUpdateOperationsInput | string
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCase?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    expected?: StringFieldUpdateOperationsInput | string
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCaseResultUncheckedUpdateManyWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    testCase?: IntFieldUpdateOperationsInput | number
    passed?: BoolFieldUpdateOperationsInput | boolean
    stdout?: NullableStringFieldUpdateOperationsInput | string | null
    expected?: StringFieldUpdateOperationsInput | string
    stderr?: NullableStringFieldUpdateOperationsInput | string | null
    compileOutput?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    memory?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInPlaylistCreateManyPlaylistInput = {
    id?: string
    problemId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistPurchaseCreateManyPlaylistInput = {
    id?: string
    userId: string
    paymentId: string
    paymentOrderId: string
    paymentSignature: string
    purchaseDate?: Date | string
  }

  export type ProblemInPlaylistUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    problem?: ProblemUpdateOneRequiredWithoutProblemsPlaylistsNestedInput
  }

  export type ProblemInPlaylistUncheckedUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProblemInPlaylistUncheckedUpdateManyWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistPurchaseUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlaylistPurchasesNestedInput
  }

  export type PlaylistPurchaseUncheckedUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistPurchaseUncheckedUpdateManyWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    paymentOrderId?: StringFieldUpdateOperationsInput | string
    paymentSignature?: StringFieldUpdateOperationsInput | string
    purchaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionMessageCreateManyDiscussionInput = {
    id?: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionMessageUpdateWithoutDiscussionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDiscussionMessagesNestedInput
    replies?: DiscussionReplyUpdateManyWithoutMessageNestedInput
    upvotes?: DiscussionUpvoteUpdateManyWithoutMessageNestedInput
  }

  export type DiscussionMessageUncheckedUpdateWithoutDiscussionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: DiscussionReplyUncheckedUpdateManyWithoutMessageNestedInput
    upvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type DiscussionMessageUncheckedUpdateManyWithoutDiscussionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionReplyCreateManyMessageInput = {
    id?: string
    userId: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiscussionUpvoteCreateManyMessageInput = {
    id?: string
    userId: string
  }

  export type DiscussionReplyUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDiscussionRepliesNestedInput
  }

  export type DiscussionReplyUncheckedUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionReplyUncheckedUpdateManyWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionUpvoteUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDiscussionUpvotesNestedInput
  }

  export type DiscussionUpvoteUncheckedUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type DiscussionUpvoteUncheckedUpdateManyWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutParticipatingCollaborationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUpdateManyWithoutFollowingNestedInput
    following?: FollowUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUpdateManyWithoutUserNestedInput
    submission?: SubmissionUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUpdateManyWithoutReceiverNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateWithoutParticipatingCollaborationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followers?: FollowUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowUncheckedUpdateManyWithoutFollowerNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutUserNestedInput
    submission?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    problemSolved?: ProblemSolvedUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    submittedReports?: ProblemReportUncheckedUpdateManyWithoutUserNestedInput
    discussionMessages?: DiscussionMessageUncheckedUpdateManyWithoutUserNestedInput
    discussionReplies?: DiscussionReplyUncheckedUpdateManyWithoutUserNestedInput
    discussionUpvotes?: DiscussionUpvoteUncheckedUpdateManyWithoutUserNestedInput
    playlistPurchases?: PlaylistPurchaseUncheckedUpdateManyWithoutUserNestedInput
    sentInvitations?: ProblemInvitationUncheckedUpdateManyWithoutSenderNestedInput
    receivedInvitations?: ProblemInvitationUncheckedUpdateManyWithoutReceiverNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    initiatedCollaborations?: ProblemCollaborationUncheckedUpdateManyWithoutInitiatorNestedInput
  }

  export type UserUncheckedUpdateManyWithoutParticipatingCollaborationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    portfolio?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    password?: StringFieldUpdateOperationsInput | string
    forgotPasswordOtp?: NullableStringFieldUpdateOperationsInput | string | null
    forgotPasswordOtpExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    provider?: NullableStringFieldUpdateOperationsInput | string | null
    currentStreak?: IntFieldUpdateOperationsInput | number
    longestStreak?: IntFieldUpdateOperationsInput | number
    lastSolvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    followerCount?: IntFieldUpdateOperationsInput | number
    followingCount?: IntFieldUpdateOperationsInput | number
    badges?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}