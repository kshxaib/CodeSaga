generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PRO
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ReportReason {
  INCORRECT_TEST_CASES
  POOR_DESCRIPTION
  DUPLICATE
  INAPPROPRIATE
  OTHER
}

enum NotificationType {
  INVITATION
  ACCEPTED_INVITATION
  COLLABORATION_JOINED
  PROBLEM_SOLVED
  NEW_FOLLOWER
  GENERAL
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum ReactionType {
  HEART
  LAUGH
  LAMP
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  username                String    @unique
  bio                     String?
  linkedin                String?
  portfolio               String?
  email                   String    @unique
  image                   String?   @default("https://static.vecteezy.com/system/resources/previews/018/765/757/original/user-profile-icon-in-flat-style-member-avatar-illustration-on-isolated-background-human-permission-sign-business-concept-vector.jpg")
  role                    UserRole  @default(USER)
  password                String
  forgotPasswordOtp       String?
  forgotPasswordOtpExpiry DateTime?
  provider                String?

  currentStreak  Int       @default(0)
  longestStreak  Int       @default(0)
  lastSolvedDate DateTime?

  problems            Problem[]
  submission          Submission[]
  problemSolved       ProblemSolved[]
  playlists           Playlist[]
  submittedReports    ProblemReport[]
  discussionMessages  DiscussionMessage[]
  discussionReplies   DiscussionReply[]
  discussionUpvotes   DiscussionUpvote[]
  playlistPurchases   PlaylistPurchase[]
  notifications       Notification[]
  devLogs             DevLog[]
  devLogReactions     DevLogReaction[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Problem {
  id                 String              @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  isPaid             Boolean             @default(false)
  askedIn            String[]            @default([])

  likes    Int @default(0)
  dislikes Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission        Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
  reports           ProblemReport[]
  discussions       ProblemDiscussion[]
}

model ProblemReaction {
  id        String  @id @default(uuid())
  problemId String
  userId    String
  isLike    Boolean

  @@unique([problemId, userId])
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    String
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String   @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String
  isPaid      Boolean @default(false)
  price       Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems  ProblemInPlaylist[]
  purchases PlaylistPurchase[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model PlaylistPurchase {
  id               String   @id @default(uuid())
  userId           String
  paymentId        String
  paymentOrderId   String
  paymentSignature String
  playlistId       String
  purchaseDate     DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([userId, playlistId])
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

model ProblemReport {
  id          String       @id @default(uuid())
  problemId   String
  userId      String
  reason      ReportReason
  description String?
  status      String       @default("PENDING")
  createdAt   DateTime     @default(now())

  problem Problem @relation(fields: [problemId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model ProblemDiscussion {
  id        String   @id @default(uuid())
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem  Problem             @relation(fields: [problemId], references: [id])
  messages DiscussionMessage[]
}

model DiscussionMessage {
  id           String   @id @default(uuid())
  discussionId String
  userId       String
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  discussion ProblemDiscussion  @relation(fields: [discussionId], references: [id])
  user       User               @relation(fields: [userId], references: [id])
  replies    DiscussionReply[]
  upvotes    DiscussionUpvote[]
}

model DiscussionReply {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message DiscussionMessage @relation(fields: [messageId], references: [id])
  user    User              @relation(fields: [userId], references: [id])
}

model DiscussionUpvote {
  id        String @id @default(uuid())
  userId    String
  messageId String

  user    User              @relation(fields: [userId], references: [id])
  message DiscussionMessage @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId])
}

model Notification {
  id          String           @id @default(uuid())
  userId      String
  type        NotificationType
  content     String
  isRead      Boolean          @default(false)
  referenceId String?
  createdAt DateTime @default(now())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DevLog {
  id          String   @id @default(uuid())
  userId      String
  title       String
  tags        String[]
  description String
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  upvotes     Int      @default(0)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions  DevLogReaction[]

  @@index([userId])
}

model DevLogReaction {
  id       String        @id @default(uuid())
  devLogId String
  userId   String
  type     ReactionType

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  devLog  DevLog @relation(fields: [devLogId], references: [id], onDelete: Cascade)

  @@unique([devLogId, userId, type])
}
